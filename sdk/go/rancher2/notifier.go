// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Rancher v2 Notifier resource. This can be used to create notifiers for Rancher v2 environments and retrieve their information.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/notifier.html.markdown.
type Notifier struct {
	s *pulumi.ResourceState
}

// NewNotifier registers a new resource with the given unique name, arguments, and options.
func NewNotifier(ctx *pulumi.Context,
	name string, args *NotifierArgs, opts ...pulumi.ResourceOpt) (*Notifier, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["annotations"] = nil
		inputs["clusterId"] = nil
		inputs["description"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["pagerdutyConfig"] = nil
		inputs["slackConfig"] = nil
		inputs["smtpConfig"] = nil
		inputs["webhookConfig"] = nil
		inputs["wechatConfig"] = nil
	} else {
		inputs["annotations"] = args.Annotations
		inputs["clusterId"] = args.ClusterId
		inputs["description"] = args.Description
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["pagerdutyConfig"] = args.PagerdutyConfig
		inputs["slackConfig"] = args.SlackConfig
		inputs["smtpConfig"] = args.SmtpConfig
		inputs["webhookConfig"] = args.WebhookConfig
		inputs["wechatConfig"] = args.WechatConfig
	}
	s, err := ctx.RegisterResource("rancher2:index/notifier:Notifier", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Notifier{s: s}, nil
}

// GetNotifier gets an existing Notifier resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotifier(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NotifierState, opts ...pulumi.ResourceOpt) (*Notifier, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["annotations"] = state.Annotations
		inputs["clusterId"] = state.ClusterId
		inputs["description"] = state.Description
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["pagerdutyConfig"] = state.PagerdutyConfig
		inputs["slackConfig"] = state.SlackConfig
		inputs["smtpConfig"] = state.SmtpConfig
		inputs["webhookConfig"] = state.WebhookConfig
		inputs["wechatConfig"] = state.WechatConfig
	}
	s, err := ctx.ReadResource("rancher2:index/notifier:Notifier", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Notifier{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Notifier) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Notifier) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Annotations for notifier object (map)
func (r *Notifier) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// The cluster id where create notifier (string)
func (r *Notifier) ClusterId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterId"])
}

// The notifier description (string)
func (r *Notifier) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Labels for notifier object (map)
func (r *Notifier) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// The name of the notifier (string)
func (r *Notifier) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Pagerduty config for notifier (list maxitems:1)
func (r *Notifier) PagerdutyConfig() pulumi.Output {
	return r.s.State["pagerdutyConfig"]
}

// Slack config for notifier (list maxitems:1)
func (r *Notifier) SlackConfig() pulumi.Output {
	return r.s.State["slackConfig"]
}

// SMTP config for notifier (list maxitems:1)
func (r *Notifier) SmtpConfig() pulumi.Output {
	return r.s.State["smtpConfig"]
}

// Webhook config for notifier (list maxitems:1)
func (r *Notifier) WebhookConfig() pulumi.Output {
	return r.s.State["webhookConfig"]
}

// Wechat config for notifier (list maxitems:1)
func (r *Notifier) WechatConfig() pulumi.Output {
	return r.s.State["wechatConfig"]
}

// Input properties used for looking up and filtering Notifier resources.
type NotifierState struct {
	// Annotations for notifier object (map)
	Annotations interface{}
	// The cluster id where create notifier (string)
	ClusterId interface{}
	// The notifier description (string)
	Description interface{}
	// Labels for notifier object (map)
	Labels interface{}
	// The name of the notifier (string)
	Name interface{}
	// Pagerduty config for notifier (list maxitems:1)
	PagerdutyConfig interface{}
	// Slack config for notifier (list maxitems:1)
	SlackConfig interface{}
	// SMTP config for notifier (list maxitems:1)
	SmtpConfig interface{}
	// Webhook config for notifier (list maxitems:1)
	WebhookConfig interface{}
	// Wechat config for notifier (list maxitems:1)
	WechatConfig interface{}
}

// The set of arguments for constructing a Notifier resource.
type NotifierArgs struct {
	// Annotations for notifier object (map)
	Annotations interface{}
	// The cluster id where create notifier (string)
	ClusterId interface{}
	// The notifier description (string)
	Description interface{}
	// Labels for notifier object (map)
	Labels interface{}
	// The name of the notifier (string)
	Name interface{}
	// Pagerduty config for notifier (list maxitems:1)
	PagerdutyConfig interface{}
	// Slack config for notifier (list maxitems:1)
	SlackConfig interface{}
	// SMTP config for notifier (list maxitems:1)
	SmtpConfig interface{}
	// Webhook config for notifier (list maxitems:1)
	WebhookConfig interface{}
	// Wechat config for notifier (list maxitems:1)
	WechatConfig interface{}
}
