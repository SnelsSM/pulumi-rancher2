// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Rancher v2 Setting resource. This can be used to create settings for Rancher v2 environments and retrieve their information.
// 
// On create, if setting already exists, provider will import it and update its value.
// 
// On destroy, if setting is a system setting like `server-url`, provider'll not delete it from Rancher, it'll just update setting value to default and remove it from tfstate. 
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/setting.html.markdown.
type Setting struct {
	s *pulumi.ResourceState
}

// NewSetting registers a new resource with the given unique name, arguments, and options.
func NewSetting(ctx *pulumi.Context,
	name string, args *SettingArgs, opts ...pulumi.ResourceOpt) (*Setting, error) {
	if args == nil || args.Value == nil {
		return nil, errors.New("missing required argument 'Value'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["annotations"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["value"] = nil
	} else {
		inputs["annotations"] = args.Annotations
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["value"] = args.Value
	}
	s, err := ctx.RegisterResource("rancher2:index/setting:Setting", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Setting{s: s}, nil
}

// GetSetting gets an existing Setting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSetting(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SettingState, opts ...pulumi.ResourceOpt) (*Setting, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["annotations"] = state.Annotations
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["value"] = state.Value
	}
	s, err := ctx.ReadResource("rancher2:index/setting:Setting", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Setting{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Setting) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Setting) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Annotations for setting object (map)
func (r *Setting) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// Labels for setting object (map)
func (r *Setting) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// The name of the setting (string)
func (r *Setting) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The value of the setting (string)
func (r *Setting) Value() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["value"])
}

// Input properties used for looking up and filtering Setting resources.
type SettingState struct {
	// Annotations for setting object (map)
	Annotations interface{}
	// Labels for setting object (map)
	Labels interface{}
	// The name of the setting (string)
	Name interface{}
	// The value of the setting (string)
	Value interface{}
}

// The set of arguments for constructing a Setting resource.
type SettingArgs struct {
	// Annotations for setting object (map)
	Annotations interface{}
	// Labels for setting object (map)
	Labels interface{}
	// The name of the setting (string)
	Name interface{}
	// The value of the setting (string)
	Value interface{}
}
