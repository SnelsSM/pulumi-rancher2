// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type NodePool struct {
	pulumi.CustomResourceState

	// Annotations of the resource
	Annotations             pulumi.MapOutput     `pulumi:"annotations"`
	ClusterId               pulumi.StringOutput  `pulumi:"clusterId"`
	ControlPlane            pulumi.BoolPtrOutput `pulumi:"controlPlane"`
	DeleteNotReadyAfterSecs pulumi.IntPtrOutput  `pulumi:"deleteNotReadyAfterSecs"`
	Etcd                    pulumi.BoolPtrOutput `pulumi:"etcd"`
	HostnamePrefix          pulumi.StringOutput  `pulumi:"hostnamePrefix"`
	// Labels of the resource
	Labels         pulumi.MapOutput             `pulumi:"labels"`
	Name           pulumi.StringOutput          `pulumi:"name"`
	NodeTaints     NodePoolNodeTaintArrayOutput `pulumi:"nodeTaints"`
	NodeTemplateId pulumi.StringOutput          `pulumi:"nodeTemplateId"`
	Quantity       pulumi.IntPtrOutput          `pulumi:"quantity"`
	Worker         pulumi.BoolPtrOutput         `pulumi:"worker"`
}

// NewNodePool registers a new resource with the given unique name, arguments, and options.
func NewNodePool(ctx *pulumi.Context,
	name string, args *NodePoolArgs, opts ...pulumi.ResourceOption) (*NodePool, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	if args == nil || args.HostnamePrefix == nil {
		return nil, errors.New("missing required argument 'HostnamePrefix'")
	}
	if args == nil || args.NodeTemplateId == nil {
		return nil, errors.New("missing required argument 'NodeTemplateId'")
	}
	if args == nil {
		args = &NodePoolArgs{}
	}
	var resource NodePool
	err := ctx.RegisterResource("rancher2:index/nodePool:NodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodePool gets an existing NodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodePoolState, opts ...pulumi.ResourceOption) (*NodePool, error) {
	var resource NodePool
	err := ctx.ReadResource("rancher2:index/nodePool:NodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodePool resources.
type nodePoolState struct {
	// Annotations of the resource
	Annotations             map[string]interface{} `pulumi:"annotations"`
	ClusterId               *string                `pulumi:"clusterId"`
	ControlPlane            *bool                  `pulumi:"controlPlane"`
	DeleteNotReadyAfterSecs *int                   `pulumi:"deleteNotReadyAfterSecs"`
	Etcd                    *bool                  `pulumi:"etcd"`
	HostnamePrefix          *string                `pulumi:"hostnamePrefix"`
	// Labels of the resource
	Labels         map[string]interface{} `pulumi:"labels"`
	Name           *string                `pulumi:"name"`
	NodeTaints     []NodePoolNodeTaint    `pulumi:"nodeTaints"`
	NodeTemplateId *string                `pulumi:"nodeTemplateId"`
	Quantity       *int                   `pulumi:"quantity"`
	Worker         *bool                  `pulumi:"worker"`
}

type NodePoolState struct {
	// Annotations of the resource
	Annotations             pulumi.MapInput
	ClusterId               pulumi.StringPtrInput
	ControlPlane            pulumi.BoolPtrInput
	DeleteNotReadyAfterSecs pulumi.IntPtrInput
	Etcd                    pulumi.BoolPtrInput
	HostnamePrefix          pulumi.StringPtrInput
	// Labels of the resource
	Labels         pulumi.MapInput
	Name           pulumi.StringPtrInput
	NodeTaints     NodePoolNodeTaintArrayInput
	NodeTemplateId pulumi.StringPtrInput
	Quantity       pulumi.IntPtrInput
	Worker         pulumi.BoolPtrInput
}

func (NodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodePoolState)(nil)).Elem()
}

type nodePoolArgs struct {
	// Annotations of the resource
	Annotations             map[string]interface{} `pulumi:"annotations"`
	ClusterId               string                 `pulumi:"clusterId"`
	ControlPlane            *bool                  `pulumi:"controlPlane"`
	DeleteNotReadyAfterSecs *int                   `pulumi:"deleteNotReadyAfterSecs"`
	Etcd                    *bool                  `pulumi:"etcd"`
	HostnamePrefix          string                 `pulumi:"hostnamePrefix"`
	// Labels of the resource
	Labels         map[string]interface{} `pulumi:"labels"`
	Name           *string                `pulumi:"name"`
	NodeTaints     []NodePoolNodeTaint    `pulumi:"nodeTaints"`
	NodeTemplateId string                 `pulumi:"nodeTemplateId"`
	Quantity       *int                   `pulumi:"quantity"`
	Worker         *bool                  `pulumi:"worker"`
}

// The set of arguments for constructing a NodePool resource.
type NodePoolArgs struct {
	// Annotations of the resource
	Annotations             pulumi.MapInput
	ClusterId               pulumi.StringInput
	ControlPlane            pulumi.BoolPtrInput
	DeleteNotReadyAfterSecs pulumi.IntPtrInput
	Etcd                    pulumi.BoolPtrInput
	HostnamePrefix          pulumi.StringInput
	// Labels of the resource
	Labels         pulumi.MapInput
	Name           pulumi.StringPtrInput
	NodeTaints     NodePoolNodeTaintArrayInput
	NodeTemplateId pulumi.StringInput
	Quantity       pulumi.IntPtrInput
	Worker         pulumi.BoolPtrInput
}

func (NodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodePoolArgs)(nil)).Elem()
}
