// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Rancher v2 Node Pool resource. This can be used to create Node Pool, using Node template for Rancher v2 RKE clusters and retrieve their information.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/node_pool.html.markdown.
type NodePool struct {
	s *pulumi.ResourceState
}

// NewNodePool registers a new resource with the given unique name, arguments, and options.
func NewNodePool(ctx *pulumi.Context,
	name string, args *NodePoolArgs, opts ...pulumi.ResourceOpt) (*NodePool, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	if args == nil || args.HostnamePrefix == nil {
		return nil, errors.New("missing required argument 'HostnamePrefix'")
	}
	if args == nil || args.NodeTemplateId == nil {
		return nil, errors.New("missing required argument 'NodeTemplateId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["annotations"] = nil
		inputs["clusterId"] = nil
		inputs["controlPlane"] = nil
		inputs["etcd"] = nil
		inputs["hostnamePrefix"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["nodeTemplateId"] = nil
		inputs["quantity"] = nil
		inputs["worker"] = nil
	} else {
		inputs["annotations"] = args.Annotations
		inputs["clusterId"] = args.ClusterId
		inputs["controlPlane"] = args.ControlPlane
		inputs["etcd"] = args.Etcd
		inputs["hostnamePrefix"] = args.HostnamePrefix
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["nodeTemplateId"] = args.NodeTemplateId
		inputs["quantity"] = args.Quantity
		inputs["worker"] = args.Worker
	}
	s, err := ctx.RegisterResource("rancher2:index/nodePool:NodePool", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NodePool{s: s}, nil
}

// GetNodePool gets an existing NodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodePool(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NodePoolState, opts ...pulumi.ResourceOpt) (*NodePool, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["annotations"] = state.Annotations
		inputs["clusterId"] = state.ClusterId
		inputs["controlPlane"] = state.ControlPlane
		inputs["etcd"] = state.Etcd
		inputs["hostnamePrefix"] = state.HostnamePrefix
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["nodeTemplateId"] = state.NodeTemplateId
		inputs["quantity"] = state.Quantity
		inputs["worker"] = state.Worker
	}
	s, err := ctx.ReadResource("rancher2:index/nodePool:NodePool", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NodePool{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *NodePool) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *NodePool) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Annotations for Node Pool object (map)
func (r *NodePool) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// The RKE cluster id to use Node Pool (string)
func (r *NodePool) ClusterId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterId"])
}

// RKE control plane role for created nodes (bool)
func (r *NodePool) ControlPlane() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["controlPlane"])
}

// RKE etcd role for created nodes (bool)
func (r *NodePool) Etcd() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["etcd"])
}

// The prefix for created nodes of the Node Pool (string)
func (r *NodePool) HostnamePrefix() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["hostnamePrefix"])
}

// Labels for Node Pool object (map)
func (r *NodePool) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// The name of the Node Pool (string)
func (r *NodePool) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The Node Template ID to use for node creation (string)
func (r *NodePool) NodeTemplateId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["nodeTemplateId"])
}

// The number of nodes to create on Node Pool. Default `1`. Only values >= 1 allowed (int)
func (r *NodePool) Quantity() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["quantity"])
}

// RKE role role for created nodes (bool)
func (r *NodePool) Worker() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["worker"])
}

// Input properties used for looking up and filtering NodePool resources.
type NodePoolState struct {
	// Annotations for Node Pool object (map)
	Annotations interface{}
	// The RKE cluster id to use Node Pool (string)
	ClusterId interface{}
	// RKE control plane role for created nodes (bool)
	ControlPlane interface{}
	// RKE etcd role for created nodes (bool)
	Etcd interface{}
	// The prefix for created nodes of the Node Pool (string)
	HostnamePrefix interface{}
	// Labels for Node Pool object (map)
	Labels interface{}
	// The name of the Node Pool (string)
	Name interface{}
	// The Node Template ID to use for node creation (string)
	NodeTemplateId interface{}
	// The number of nodes to create on Node Pool. Default `1`. Only values >= 1 allowed (int)
	Quantity interface{}
	// RKE role role for created nodes (bool)
	Worker interface{}
}

// The set of arguments for constructing a NodePool resource.
type NodePoolArgs struct {
	// Annotations for Node Pool object (map)
	Annotations interface{}
	// The RKE cluster id to use Node Pool (string)
	ClusterId interface{}
	// RKE control plane role for created nodes (bool)
	ControlPlane interface{}
	// RKE etcd role for created nodes (bool)
	Etcd interface{}
	// The prefix for created nodes of the Node Pool (string)
	HostnamePrefix interface{}
	// Labels for Node Pool object (map)
	Labels interface{}
	// The name of the Node Pool (string)
	Name interface{}
	// The Node Template ID to use for node creation (string)
	NodeTemplateId interface{}
	// The number of nodes to create on Node Pool. Default `1`. Only values >= 1 allowed (int)
	Quantity interface{}
	// RKE role role for created nodes (bool)
	Worker interface{}
}
