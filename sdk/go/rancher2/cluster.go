// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Rancher v2 Cluster resource. This can be used to create Clusters for Rancher v2 environments and retrieve their information.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/cluster.html.markdown.
type Cluster struct {
	s *pulumi.ResourceState
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOpt) (*Cluster, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["aksConfig"] = nil
		inputs["annotations"] = nil
		inputs["clusterAuthEndpoint"] = nil
		inputs["clusterMonitoringInput"] = nil
		inputs["clusterTemplateAnswers"] = nil
		inputs["clusterTemplateId"] = nil
		inputs["clusterTemplateQuestions"] = nil
		inputs["clusterTemplateRevisionId"] = nil
		inputs["defaultPodSecurityPolicyTemplateId"] = nil
		inputs["description"] = nil
		inputs["desiredAgentImage"] = nil
		inputs["desiredAuthImage"] = nil
		inputs["dockerRootDir"] = nil
		inputs["driver"] = nil
		inputs["eksConfig"] = nil
		inputs["enableClusterAlerting"] = nil
		inputs["enableClusterIstio"] = nil
		inputs["enableClusterMonitoring"] = nil
		inputs["enableNetworkPolicy"] = nil
		inputs["gkeConfig"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["rkeConfig"] = nil
	} else {
		inputs["aksConfig"] = args.AksConfig
		inputs["annotations"] = args.Annotations
		inputs["clusterAuthEndpoint"] = args.ClusterAuthEndpoint
		inputs["clusterMonitoringInput"] = args.ClusterMonitoringInput
		inputs["clusterTemplateAnswers"] = args.ClusterTemplateAnswers
		inputs["clusterTemplateId"] = args.ClusterTemplateId
		inputs["clusterTemplateQuestions"] = args.ClusterTemplateQuestions
		inputs["clusterTemplateRevisionId"] = args.ClusterTemplateRevisionId
		inputs["defaultPodSecurityPolicyTemplateId"] = args.DefaultPodSecurityPolicyTemplateId
		inputs["description"] = args.Description
		inputs["desiredAgentImage"] = args.DesiredAgentImage
		inputs["desiredAuthImage"] = args.DesiredAuthImage
		inputs["dockerRootDir"] = args.DockerRootDir
		inputs["driver"] = args.Driver
		inputs["eksConfig"] = args.EksConfig
		inputs["enableClusterAlerting"] = args.EnableClusterAlerting
		inputs["enableClusterIstio"] = args.EnableClusterIstio
		inputs["enableClusterMonitoring"] = args.EnableClusterMonitoring
		inputs["enableNetworkPolicy"] = args.EnableNetworkPolicy
		inputs["gkeConfig"] = args.GkeConfig
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["rkeConfig"] = args.RkeConfig
	}
	inputs["clusterRegistrationToken"] = nil
	inputs["defaultProjectId"] = nil
	inputs["kubeConfig"] = nil
	inputs["systemProjectId"] = nil
	s, err := ctx.RegisterResource("rancher2:index/cluster:Cluster", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Cluster{s: s}, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClusterState, opts ...pulumi.ResourceOpt) (*Cluster, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["aksConfig"] = state.AksConfig
		inputs["annotations"] = state.Annotations
		inputs["clusterAuthEndpoint"] = state.ClusterAuthEndpoint
		inputs["clusterMonitoringInput"] = state.ClusterMonitoringInput
		inputs["clusterRegistrationToken"] = state.ClusterRegistrationToken
		inputs["clusterTemplateAnswers"] = state.ClusterTemplateAnswers
		inputs["clusterTemplateId"] = state.ClusterTemplateId
		inputs["clusterTemplateQuestions"] = state.ClusterTemplateQuestions
		inputs["clusterTemplateRevisionId"] = state.ClusterTemplateRevisionId
		inputs["defaultPodSecurityPolicyTemplateId"] = state.DefaultPodSecurityPolicyTemplateId
		inputs["defaultProjectId"] = state.DefaultProjectId
		inputs["description"] = state.Description
		inputs["desiredAgentImage"] = state.DesiredAgentImage
		inputs["desiredAuthImage"] = state.DesiredAuthImage
		inputs["dockerRootDir"] = state.DockerRootDir
		inputs["driver"] = state.Driver
		inputs["eksConfig"] = state.EksConfig
		inputs["enableClusterAlerting"] = state.EnableClusterAlerting
		inputs["enableClusterIstio"] = state.EnableClusterIstio
		inputs["enableClusterMonitoring"] = state.EnableClusterMonitoring
		inputs["enableNetworkPolicy"] = state.EnableNetworkPolicy
		inputs["gkeConfig"] = state.GkeConfig
		inputs["kubeConfig"] = state.KubeConfig
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["rkeConfig"] = state.RkeConfig
		inputs["systemProjectId"] = state.SystemProjectId
	}
	s, err := ctx.ReadResource("rancher2:index/cluster:Cluster", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Cluster{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Cluster) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Cluster) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The Azure AKS configuration for `aks` Clusters. Conflicts with `eksConfig`, `gkeConfig` and `rkeConfig` (list maxitems:1)
func (r *Cluster) AksConfig() pulumi.Output {
	return r.s.State["aksConfig"]
}

// Annotations for cluster registration token object (map)
func (r *Cluster) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
func (r *Cluster) ClusterAuthEndpoint() pulumi.Output {
	return r.s.State["clusterAuthEndpoint"]
}

// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
func (r *Cluster) ClusterMonitoringInput() pulumi.Output {
	return r.s.State["clusterMonitoringInput"]
}

// (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
func (r *Cluster) ClusterRegistrationToken() pulumi.Output {
	return r.s.State["clusterRegistrationToken"]
}

// Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
func (r *Cluster) ClusterTemplateAnswers() pulumi.Output {
	return r.s.State["clusterTemplateAnswers"]
}

// Cluster template ID. Just for Rancher v2.3.x and above (string)
func (r *Cluster) ClusterTemplateId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterTemplateId"])
}

// Cluster template questions. Just for Rancher v2.3.x and above (list)
func (r *Cluster) ClusterTemplateQuestions() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["clusterTemplateQuestions"])
}

// Cluster template revision ID. Just for Rancher v2.3.x and above (string)
func (r *Cluster) ClusterTemplateRevisionId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterTemplateRevisionId"])
}

// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
func (r *Cluster) DefaultPodSecurityPolicyTemplateId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["defaultPodSecurityPolicyTemplateId"])
}

// (Computed) Default project ID for the cluster (string)
func (r *Cluster) DefaultProjectId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["defaultProjectId"])
}

// An optional description of this cluster (string)
func (r *Cluster) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Desired agent image. Just for Rancher v2.3.x and above (string)
func (r *Cluster) DesiredAgentImage() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["desiredAgentImage"])
}

// Desired auth image. Just for Rancher v2.3.x and above (string)
func (r *Cluster) DesiredAuthImage() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["desiredAuthImage"])
}

// Desired auth image. Just for Rancher v2.3.x and above (string)
func (r *Cluster) DockerRootDir() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["dockerRootDir"])
}

// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
func (r *Cluster) Driver() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["driver"])
}

// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `gkeConfig` and `rkeConfig` (list maxitems:1)
func (r *Cluster) EksConfig() pulumi.Output {
	return r.s.State["eksConfig"]
}

// Enable built-in cluster alerting. Default `false` (bool)
func (r *Cluster) EnableClusterAlerting() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enableClusterAlerting"])
}

// Enable built-in cluster istio. Default `false`. Just for Rancher v2.3.x and above (bool)
func (r *Cluster) EnableClusterIstio() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enableClusterIstio"])
}

// Enable built-in cluster monitoring. Default `false` (bool)
func (r *Cluster) EnableClusterMonitoring() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enableClusterMonitoring"])
}

// Enable project network isolation. Default `false` (bool)
func (r *Cluster) EnableNetworkPolicy() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enableNetworkPolicy"])
}

// The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `eksConfig` and `rkeConfig` (list maxitems:1)
func (r *Cluster) GkeConfig() pulumi.Output {
	return r.s.State["gkeConfig"]
}

// (Computed) Kube Config generated for the cluster (string)
func (r *Cluster) KubeConfig() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["kubeConfig"])
}

// Labels for cluster registration token object (map)
func (r *Cluster) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// Name of cluster registration token (string)
func (r *Cluster) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `eksConfig` and `gkeConfig` (list maxitems:1)
func (r *Cluster) RkeConfig() pulumi.Output {
	return r.s.State["rkeConfig"]
}

// (Computed) System project ID for the cluster (string)
func (r *Cluster) SystemProjectId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["systemProjectId"])
}

// Input properties used for looking up and filtering Cluster resources.
type ClusterState struct {
	// The Azure AKS configuration for `aks` Clusters. Conflicts with `eksConfig`, `gkeConfig` and `rkeConfig` (list maxitems:1)
	AksConfig interface{}
	// Annotations for cluster registration token object (map)
	Annotations interface{}
	// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
	ClusterAuthEndpoint interface{}
	// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
	ClusterMonitoringInput interface{}
	// (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
	ClusterRegistrationToken interface{}
	// Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
	ClusterTemplateAnswers interface{}
	// Cluster template ID. Just for Rancher v2.3.x and above (string)
	ClusterTemplateId interface{}
	// Cluster template questions. Just for Rancher v2.3.x and above (list)
	ClusterTemplateQuestions interface{}
	// Cluster template revision ID. Just for Rancher v2.3.x and above (string)
	ClusterTemplateRevisionId interface{}
	// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
	DefaultPodSecurityPolicyTemplateId interface{}
	// (Computed) Default project ID for the cluster (string)
	DefaultProjectId interface{}
	// An optional description of this cluster (string)
	Description interface{}
	// Desired agent image. Just for Rancher v2.3.x and above (string)
	DesiredAgentImage interface{}
	// Desired auth image. Just for Rancher v2.3.x and above (string)
	DesiredAuthImage interface{}
	// Desired auth image. Just for Rancher v2.3.x and above (string)
	DockerRootDir interface{}
	// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
	Driver interface{}
	// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `gkeConfig` and `rkeConfig` (list maxitems:1)
	EksConfig interface{}
	// Enable built-in cluster alerting. Default `false` (bool)
	EnableClusterAlerting interface{}
	// Enable built-in cluster istio. Default `false`. Just for Rancher v2.3.x and above (bool)
	EnableClusterIstio interface{}
	// Enable built-in cluster monitoring. Default `false` (bool)
	EnableClusterMonitoring interface{}
	// Enable project network isolation. Default `false` (bool)
	EnableNetworkPolicy interface{}
	// The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `eksConfig` and `rkeConfig` (list maxitems:1)
	GkeConfig interface{}
	// (Computed) Kube Config generated for the cluster (string)
	KubeConfig interface{}
	// Labels for cluster registration token object (map)
	Labels interface{}
	// Name of cluster registration token (string)
	Name interface{}
	// The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `eksConfig` and `gkeConfig` (list maxitems:1)
	RkeConfig interface{}
	// (Computed) System project ID for the cluster (string)
	SystemProjectId interface{}
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// The Azure AKS configuration for `aks` Clusters. Conflicts with `eksConfig`, `gkeConfig` and `rkeConfig` (list maxitems:1)
	AksConfig interface{}
	// Annotations for cluster registration token object (map)
	Annotations interface{}
	// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
	ClusterAuthEndpoint interface{}
	// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
	ClusterMonitoringInput interface{}
	// Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
	ClusterTemplateAnswers interface{}
	// Cluster template ID. Just for Rancher v2.3.x and above (string)
	ClusterTemplateId interface{}
	// Cluster template questions. Just for Rancher v2.3.x and above (list)
	ClusterTemplateQuestions interface{}
	// Cluster template revision ID. Just for Rancher v2.3.x and above (string)
	ClusterTemplateRevisionId interface{}
	// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
	DefaultPodSecurityPolicyTemplateId interface{}
	// An optional description of this cluster (string)
	Description interface{}
	// Desired agent image. Just for Rancher v2.3.x and above (string)
	DesiredAgentImage interface{}
	// Desired auth image. Just for Rancher v2.3.x and above (string)
	DesiredAuthImage interface{}
	// Desired auth image. Just for Rancher v2.3.x and above (string)
	DockerRootDir interface{}
	// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
	Driver interface{}
	// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `gkeConfig` and `rkeConfig` (list maxitems:1)
	EksConfig interface{}
	// Enable built-in cluster alerting. Default `false` (bool)
	EnableClusterAlerting interface{}
	// Enable built-in cluster istio. Default `false`. Just for Rancher v2.3.x and above (bool)
	EnableClusterIstio interface{}
	// Enable built-in cluster monitoring. Default `false` (bool)
	EnableClusterMonitoring interface{}
	// Enable project network isolation. Default `false` (bool)
	EnableNetworkPolicy interface{}
	// The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `eksConfig` and `rkeConfig` (list maxitems:1)
	GkeConfig interface{}
	// Labels for cluster registration token object (map)
	Labels interface{}
	// Name of cluster registration token (string)
	Name interface{}
	// The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `eksConfig` and `gkeConfig` (list maxitems:1)
	RkeConfig interface{}
}
