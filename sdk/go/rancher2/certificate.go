// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Rancher v2 certificate resource. This can be used to create certificates for Rancher v2 environments and retrieve their information.
// 
// There are 2 types of Rancher v2 certificates:
// - Project certificate: Available to all namespaces in the `projectId`
// - Namespaced certificate: Available to just `namespaceId` in the `projectId`
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/certificate.html.markdown.
type Certificate struct {
	s *pulumi.ResourceState
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOpt) (*Certificate, error) {
	if args == nil || args.Certs == nil {
		return nil, errors.New("missing required argument 'Certs'")
	}
	if args == nil || args.Key == nil {
		return nil, errors.New("missing required argument 'Key'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["annotations"] = nil
		inputs["certs"] = nil
		inputs["description"] = nil
		inputs["key"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["namespaceId"] = nil
		inputs["projectId"] = nil
	} else {
		inputs["annotations"] = args.Annotations
		inputs["certs"] = args.Certs
		inputs["description"] = args.Description
		inputs["key"] = args.Key
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["namespaceId"] = args.NamespaceId
		inputs["projectId"] = args.ProjectId
	}
	s, err := ctx.RegisterResource("rancher2:index/certificate:Certificate", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Certificate{s: s}, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CertificateState, opts ...pulumi.ResourceOpt) (*Certificate, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["annotations"] = state.Annotations
		inputs["certs"] = state.Certs
		inputs["description"] = state.Description
		inputs["key"] = state.Key
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["namespaceId"] = state.NamespaceId
		inputs["projectId"] = state.ProjectId
	}
	s, err := ctx.ReadResource("rancher2:index/certificate:Certificate", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Certificate{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Certificate) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Certificate) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Annotations for certificate object (map)
func (r *Certificate) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// Base64 encoded public certs (string)
func (r *Certificate) Certs() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["certs"])
}

// A certificate description (string)
func (r *Certificate) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Base64 encoded private key (string)
func (r *Certificate) Key() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["key"])
}

// Labels for certificate object (map)
func (r *Certificate) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// The name of the certificate (string)
func (r *Certificate) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The namespace id where the namespaced certificate should be created (string)
func (r *Certificate) NamespaceId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["namespaceId"])
}

// The project id where the certificate should be created  (string)
func (r *Certificate) ProjectId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["projectId"])
}

// Input properties used for looking up and filtering Certificate resources.
type CertificateState struct {
	// Annotations for certificate object (map)
	Annotations interface{}
	// Base64 encoded public certs (string)
	Certs interface{}
	// A certificate description (string)
	Description interface{}
	// Base64 encoded private key (string)
	Key interface{}
	// Labels for certificate object (map)
	Labels interface{}
	// The name of the certificate (string)
	Name interface{}
	// The namespace id where the namespaced certificate should be created (string)
	NamespaceId interface{}
	// The project id where the certificate should be created  (string)
	ProjectId interface{}
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// Annotations for certificate object (map)
	Annotations interface{}
	// Base64 encoded public certs (string)
	Certs interface{}
	// A certificate description (string)
	Description interface{}
	// Base64 encoded private key (string)
	Key interface{}
	// Labels for certificate object (map)
	Labels interface{}
	// The name of the certificate (string)
	Name interface{}
	// The namespace id where the namespaced certificate should be created (string)
	NamespaceId interface{}
	// The project id where the certificate should be created  (string)
	ProjectId interface{}
}
