// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ProjectLogging struct {
	pulumi.CustomResourceState

	// Annotations of the resource
	Annotations         pulumi.MapOutput                           `pulumi:"annotations"`
	CustomTargetConfig  ProjectLoggingCustomTargetConfigPtrOutput  `pulumi:"customTargetConfig"`
	ElasticsearchConfig ProjectLoggingElasticsearchConfigPtrOutput `pulumi:"elasticsearchConfig"`
	// Optional enable json log parsing
	EnableJsonParsing pulumi.BoolPtrOutput                 `pulumi:"enableJsonParsing"`
	FluentdConfig     ProjectLoggingFluentdConfigPtrOutput `pulumi:"fluentdConfig"`
	KafkaConfig       ProjectLoggingKafkaConfigPtrOutput   `pulumi:"kafkaConfig"`
	Kind              pulumi.StringOutput                  `pulumi:"kind"`
	// Labels of the resource
	Labels              pulumi.MapOutput                    `pulumi:"labels"`
	Name                pulumi.StringOutput                 `pulumi:"name"`
	NamespaceId         pulumi.StringPtrOutput              `pulumi:"namespaceId"`
	OutputFlushInterval pulumi.IntPtrOutput                 `pulumi:"outputFlushInterval"`
	OutputTags          pulumi.MapOutput                    `pulumi:"outputTags"`
	ProjectId           pulumi.StringOutput                 `pulumi:"projectId"`
	SplunkConfig        ProjectLoggingSplunkConfigPtrOutput `pulumi:"splunkConfig"`
	SyslogConfig        ProjectLoggingSyslogConfigPtrOutput `pulumi:"syslogConfig"`
}

// NewProjectLogging registers a new resource with the given unique name, arguments, and options.
func NewProjectLogging(ctx *pulumi.Context,
	name string, args *ProjectLoggingArgs, opts ...pulumi.ResourceOption) (*ProjectLogging, error) {
	if args == nil || args.Kind == nil {
		return nil, errors.New("missing required argument 'Kind'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	if args == nil {
		args = &ProjectLoggingArgs{}
	}
	var resource ProjectLogging
	err := ctx.RegisterResource("rancher2:index/projectLogging:ProjectLogging", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectLogging gets an existing ProjectLogging resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectLogging(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectLoggingState, opts ...pulumi.ResourceOption) (*ProjectLogging, error) {
	var resource ProjectLogging
	err := ctx.ReadResource("rancher2:index/projectLogging:ProjectLogging", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectLogging resources.
type projectLoggingState struct {
	// Annotations of the resource
	Annotations         map[string]interface{}             `pulumi:"annotations"`
	CustomTargetConfig  *ProjectLoggingCustomTargetConfig  `pulumi:"customTargetConfig"`
	ElasticsearchConfig *ProjectLoggingElasticsearchConfig `pulumi:"elasticsearchConfig"`
	// Optional enable json log parsing
	EnableJsonParsing *bool                        `pulumi:"enableJsonParsing"`
	FluentdConfig     *ProjectLoggingFluentdConfig `pulumi:"fluentdConfig"`
	KafkaConfig       *ProjectLoggingKafkaConfig   `pulumi:"kafkaConfig"`
	Kind              *string                      `pulumi:"kind"`
	// Labels of the resource
	Labels              map[string]interface{}      `pulumi:"labels"`
	Name                *string                     `pulumi:"name"`
	NamespaceId         *string                     `pulumi:"namespaceId"`
	OutputFlushInterval *int                        `pulumi:"outputFlushInterval"`
	OutputTags          map[string]interface{}      `pulumi:"outputTags"`
	ProjectId           *string                     `pulumi:"projectId"`
	SplunkConfig        *ProjectLoggingSplunkConfig `pulumi:"splunkConfig"`
	SyslogConfig        *ProjectLoggingSyslogConfig `pulumi:"syslogConfig"`
}

type ProjectLoggingState struct {
	// Annotations of the resource
	Annotations         pulumi.MapInput
	CustomTargetConfig  ProjectLoggingCustomTargetConfigPtrInput
	ElasticsearchConfig ProjectLoggingElasticsearchConfigPtrInput
	// Optional enable json log parsing
	EnableJsonParsing pulumi.BoolPtrInput
	FluentdConfig     ProjectLoggingFluentdConfigPtrInput
	KafkaConfig       ProjectLoggingKafkaConfigPtrInput
	Kind              pulumi.StringPtrInput
	// Labels of the resource
	Labels              pulumi.MapInput
	Name                pulumi.StringPtrInput
	NamespaceId         pulumi.StringPtrInput
	OutputFlushInterval pulumi.IntPtrInput
	OutputTags          pulumi.MapInput
	ProjectId           pulumi.StringPtrInput
	SplunkConfig        ProjectLoggingSplunkConfigPtrInput
	SyslogConfig        ProjectLoggingSyslogConfigPtrInput
}

func (ProjectLoggingState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectLoggingState)(nil)).Elem()
}

type projectLoggingArgs struct {
	// Annotations of the resource
	Annotations         map[string]interface{}             `pulumi:"annotations"`
	CustomTargetConfig  *ProjectLoggingCustomTargetConfig  `pulumi:"customTargetConfig"`
	ElasticsearchConfig *ProjectLoggingElasticsearchConfig `pulumi:"elasticsearchConfig"`
	// Optional enable json log parsing
	EnableJsonParsing *bool                        `pulumi:"enableJsonParsing"`
	FluentdConfig     *ProjectLoggingFluentdConfig `pulumi:"fluentdConfig"`
	KafkaConfig       *ProjectLoggingKafkaConfig   `pulumi:"kafkaConfig"`
	Kind              string                       `pulumi:"kind"`
	// Labels of the resource
	Labels              map[string]interface{}      `pulumi:"labels"`
	Name                *string                     `pulumi:"name"`
	NamespaceId         *string                     `pulumi:"namespaceId"`
	OutputFlushInterval *int                        `pulumi:"outputFlushInterval"`
	OutputTags          map[string]interface{}      `pulumi:"outputTags"`
	ProjectId           string                      `pulumi:"projectId"`
	SplunkConfig        *ProjectLoggingSplunkConfig `pulumi:"splunkConfig"`
	SyslogConfig        *ProjectLoggingSyslogConfig `pulumi:"syslogConfig"`
}

// The set of arguments for constructing a ProjectLogging resource.
type ProjectLoggingArgs struct {
	// Annotations of the resource
	Annotations         pulumi.MapInput
	CustomTargetConfig  ProjectLoggingCustomTargetConfigPtrInput
	ElasticsearchConfig ProjectLoggingElasticsearchConfigPtrInput
	// Optional enable json log parsing
	EnableJsonParsing pulumi.BoolPtrInput
	FluentdConfig     ProjectLoggingFluentdConfigPtrInput
	KafkaConfig       ProjectLoggingKafkaConfigPtrInput
	Kind              pulumi.StringInput
	// Labels of the resource
	Labels              pulumi.MapInput
	Name                pulumi.StringPtrInput
	NamespaceId         pulumi.StringPtrInput
	OutputFlushInterval pulumi.IntPtrInput
	OutputTags          pulumi.MapInput
	ProjectId           pulumi.StringInput
	SplunkConfig        ProjectLoggingSplunkConfigPtrInput
	SyslogConfig        ProjectLoggingSyslogConfigPtrInput
}

func (ProjectLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectLoggingArgs)(nil)).Elem()
}
