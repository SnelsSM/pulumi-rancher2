// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type EtcdBackup struct {
	pulumi.CustomResourceState

	// Annotations of the resource
	Annotations  pulumi.MapOutput             `pulumi:"annotations"`
	BackupConfig EtcdBackupBackupConfigOutput `pulumi:"backupConfig"`
	ClusterId    pulumi.StringOutput          `pulumi:"clusterId"`
	Filename     pulumi.StringOutput          `pulumi:"filename"`
	// Labels of the resource
	Labels      pulumi.MapOutput     `pulumi:"labels"`
	Manual      pulumi.BoolPtrOutput `pulumi:"manual"`
	Name        pulumi.StringOutput  `pulumi:"name"`
	NamespaceId pulumi.StringOutput  `pulumi:"namespaceId"`
}

// NewEtcdBackup registers a new resource with the given unique name, arguments, and options.
func NewEtcdBackup(ctx *pulumi.Context,
	name string, args *EtcdBackupArgs, opts ...pulumi.ResourceOption) (*EtcdBackup, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	if args == nil {
		args = &EtcdBackupArgs{}
	}
	var resource EtcdBackup
	err := ctx.RegisterResource("rancher2:index/etcdBackup:EtcdBackup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEtcdBackup gets an existing EtcdBackup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEtcdBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EtcdBackupState, opts ...pulumi.ResourceOption) (*EtcdBackup, error) {
	var resource EtcdBackup
	err := ctx.ReadResource("rancher2:index/etcdBackup:EtcdBackup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EtcdBackup resources.
type etcdBackupState struct {
	// Annotations of the resource
	Annotations  map[string]interface{}  `pulumi:"annotations"`
	BackupConfig *EtcdBackupBackupConfig `pulumi:"backupConfig"`
	ClusterId    *string                 `pulumi:"clusterId"`
	Filename     *string                 `pulumi:"filename"`
	// Labels of the resource
	Labels      map[string]interface{} `pulumi:"labels"`
	Manual      *bool                  `pulumi:"manual"`
	Name        *string                `pulumi:"name"`
	NamespaceId *string                `pulumi:"namespaceId"`
}

type EtcdBackupState struct {
	// Annotations of the resource
	Annotations  pulumi.MapInput
	BackupConfig EtcdBackupBackupConfigPtrInput
	ClusterId    pulumi.StringPtrInput
	Filename     pulumi.StringPtrInput
	// Labels of the resource
	Labels      pulumi.MapInput
	Manual      pulumi.BoolPtrInput
	Name        pulumi.StringPtrInput
	NamespaceId pulumi.StringPtrInput
}

func (EtcdBackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*etcdBackupState)(nil)).Elem()
}

type etcdBackupArgs struct {
	// Annotations of the resource
	Annotations  map[string]interface{}  `pulumi:"annotations"`
	BackupConfig *EtcdBackupBackupConfig `pulumi:"backupConfig"`
	ClusterId    string                  `pulumi:"clusterId"`
	Filename     *string                 `pulumi:"filename"`
	// Labels of the resource
	Labels      map[string]interface{} `pulumi:"labels"`
	Manual      *bool                  `pulumi:"manual"`
	Name        *string                `pulumi:"name"`
	NamespaceId *string                `pulumi:"namespaceId"`
}

// The set of arguments for constructing a EtcdBackup resource.
type EtcdBackupArgs struct {
	// Annotations of the resource
	Annotations  pulumi.MapInput
	BackupConfig EtcdBackupBackupConfigPtrInput
	ClusterId    pulumi.StringInput
	Filename     pulumi.StringPtrInput
	// Labels of the resource
	Labels      pulumi.MapInput
	Manual      pulumi.BoolPtrInput
	Name        pulumi.StringPtrInput
	NamespaceId pulumi.StringPtrInput
}

func (EtcdBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*etcdBackupArgs)(nil)).Elem()
}
