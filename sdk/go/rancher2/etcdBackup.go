// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/etcd_backup.html.markdown.
type EtcdBackup struct {
	s *pulumi.ResourceState
}

// NewEtcdBackup registers a new resource with the given unique name, arguments, and options.
func NewEtcdBackup(ctx *pulumi.Context,
	name string, args *EtcdBackupArgs, opts ...pulumi.ResourceOpt) (*EtcdBackup, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["annotations"] = nil
		inputs["backupConfig"] = nil
		inputs["clusterId"] = nil
		inputs["filename"] = nil
		inputs["labels"] = nil
		inputs["manual"] = nil
		inputs["name"] = nil
		inputs["namespaceId"] = nil
	} else {
		inputs["annotations"] = args.Annotations
		inputs["backupConfig"] = args.BackupConfig
		inputs["clusterId"] = args.ClusterId
		inputs["filename"] = args.Filename
		inputs["labels"] = args.Labels
		inputs["manual"] = args.Manual
		inputs["name"] = args.Name
		inputs["namespaceId"] = args.NamespaceId
	}
	s, err := ctx.RegisterResource("rancher2:index/etcdBackup:EtcdBackup", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &EtcdBackup{s: s}, nil
}

// GetEtcdBackup gets an existing EtcdBackup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEtcdBackup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *EtcdBackupState, opts ...pulumi.ResourceOpt) (*EtcdBackup, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["annotations"] = state.Annotations
		inputs["backupConfig"] = state.BackupConfig
		inputs["clusterId"] = state.ClusterId
		inputs["filename"] = state.Filename
		inputs["labels"] = state.Labels
		inputs["manual"] = state.Manual
		inputs["name"] = state.Name
		inputs["namespaceId"] = state.NamespaceId
	}
	s, err := ctx.ReadResource("rancher2:index/etcdBackup:EtcdBackup", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &EtcdBackup{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *EtcdBackup) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *EtcdBackup) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Annotations for Etcd Backup object (map)
func (r *EtcdBackup) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// Backup config for etcd backup (list maxitems:1)
func (r *EtcdBackup) BackupConfig() pulumi.Output {
	return r.s.State["backupConfig"]
}

// Cluster ID to config Etcd Backup (string)
func (r *EtcdBackup) ClusterId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterId"])
}

// Filename of the Etcd Backup (string)
func (r *EtcdBackup) Filename() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["filename"])
}

// Labels for Etcd Backup object (map)
func (r *EtcdBackup) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// Manual execution of the Etcd Backup. Default `false` (bool)
func (r *EtcdBackup) Manual() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["manual"])
}

// The name of the Etcd Backup (string)
func (r *EtcdBackup) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Description for the Etcd Backup (string)
func (r *EtcdBackup) NamespaceId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["namespaceId"])
}

// Input properties used for looking up and filtering EtcdBackup resources.
type EtcdBackupState struct {
	// Annotations for Etcd Backup object (map)
	Annotations interface{}
	// Backup config for etcd backup (list maxitems:1)
	BackupConfig interface{}
	// Cluster ID to config Etcd Backup (string)
	ClusterId interface{}
	// Filename of the Etcd Backup (string)
	Filename interface{}
	// Labels for Etcd Backup object (map)
	Labels interface{}
	// Manual execution of the Etcd Backup. Default `false` (bool)
	Manual interface{}
	// The name of the Etcd Backup (string)
	Name interface{}
	// Description for the Etcd Backup (string)
	NamespaceId interface{}
}

// The set of arguments for constructing a EtcdBackup resource.
type EtcdBackupArgs struct {
	// Annotations for Etcd Backup object (map)
	Annotations interface{}
	// Backup config for etcd backup (list maxitems:1)
	BackupConfig interface{}
	// Cluster ID to config Etcd Backup (string)
	ClusterId interface{}
	// Filename of the Etcd Backup (string)
	Filename interface{}
	// Labels for Etcd Backup object (map)
	Labels interface{}
	// Manual execution of the Etcd Backup. Default `false` (bool)
	Manual interface{}
	// The name of the Etcd Backup (string)
	Name interface{}
	// Description for the Etcd Backup (string)
	NamespaceId interface{}
}
