// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Rancher v2 Project Role Template Binding resource. This can be used to create Project Role Template Bindings for Rancher v2 environments and retrieve their information.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/project_role_template_binding.html.markdown.
type ProjectRoleTemplateBinding struct {
	s *pulumi.ResourceState
}

// NewProjectRoleTemplateBinding registers a new resource with the given unique name, arguments, and options.
func NewProjectRoleTemplateBinding(ctx *pulumi.Context,
	name string, args *ProjectRoleTemplateBindingArgs, opts ...pulumi.ResourceOpt) (*ProjectRoleTemplateBinding, error) {
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	if args == nil || args.RoleTemplateId == nil {
		return nil, errors.New("missing required argument 'RoleTemplateId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["annotations"] = nil
		inputs["groupId"] = nil
		inputs["groupPrincipalId"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["projectId"] = nil
		inputs["roleTemplateId"] = nil
		inputs["userId"] = nil
		inputs["userPrincipalId"] = nil
	} else {
		inputs["annotations"] = args.Annotations
		inputs["groupId"] = args.GroupId
		inputs["groupPrincipalId"] = args.GroupPrincipalId
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["projectId"] = args.ProjectId
		inputs["roleTemplateId"] = args.RoleTemplateId
		inputs["userId"] = args.UserId
		inputs["userPrincipalId"] = args.UserPrincipalId
	}
	s, err := ctx.RegisterResource("rancher2:index/projectRoleTemplateBinding:ProjectRoleTemplateBinding", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectRoleTemplateBinding{s: s}, nil
}

// GetProjectRoleTemplateBinding gets an existing ProjectRoleTemplateBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectRoleTemplateBinding(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProjectRoleTemplateBindingState, opts ...pulumi.ResourceOpt) (*ProjectRoleTemplateBinding, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["annotations"] = state.Annotations
		inputs["groupId"] = state.GroupId
		inputs["groupPrincipalId"] = state.GroupPrincipalId
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["projectId"] = state.ProjectId
		inputs["roleTemplateId"] = state.RoleTemplateId
		inputs["userId"] = state.UserId
		inputs["userPrincipalId"] = state.UserPrincipalId
	}
	s, err := ctx.ReadResource("rancher2:index/projectRoleTemplateBinding:ProjectRoleTemplateBinding", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectRoleTemplateBinding{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProjectRoleTemplateBinding) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProjectRoleTemplateBinding) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Annotations of the resource (map)
func (r *ProjectRoleTemplateBinding) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// The group ID to assign project role template binding (string)
func (r *ProjectRoleTemplateBinding) GroupId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupId"])
}

// The groupPrincipal ID to assign project role template binding (string)
func (r *ProjectRoleTemplateBinding) GroupPrincipalId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupPrincipalId"])
}

// Labels of the resource (map)
func (r *ProjectRoleTemplateBinding) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// The name of the project role template binding (string)
func (r *ProjectRoleTemplateBinding) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The project id where bind project role template (string)
func (r *ProjectRoleTemplateBinding) ProjectId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["projectId"])
}

// The role template id from create project role template binding (string)
func (r *ProjectRoleTemplateBinding) RoleTemplateId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["roleTemplateId"])
}

// The user ID to assign project role template binding (string)
func (r *ProjectRoleTemplateBinding) UserId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userId"])
}

// The userPrincipal ID to assign project role template binding (string)
func (r *ProjectRoleTemplateBinding) UserPrincipalId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userPrincipalId"])
}

// Input properties used for looking up and filtering ProjectRoleTemplateBinding resources.
type ProjectRoleTemplateBindingState struct {
	// Annotations of the resource (map)
	Annotations interface{}
	// The group ID to assign project role template binding (string)
	GroupId interface{}
	// The groupPrincipal ID to assign project role template binding (string)
	GroupPrincipalId interface{}
	// Labels of the resource (map)
	Labels interface{}
	// The name of the project role template binding (string)
	Name interface{}
	// The project id where bind project role template (string)
	ProjectId interface{}
	// The role template id from create project role template binding (string)
	RoleTemplateId interface{}
	// The user ID to assign project role template binding (string)
	UserId interface{}
	// The userPrincipal ID to assign project role template binding (string)
	UserPrincipalId interface{}
}

// The set of arguments for constructing a ProjectRoleTemplateBinding resource.
type ProjectRoleTemplateBindingArgs struct {
	// Annotations of the resource (map)
	Annotations interface{}
	// The group ID to assign project role template binding (string)
	GroupId interface{}
	// The groupPrincipal ID to assign project role template binding (string)
	GroupPrincipalId interface{}
	// Labels of the resource (map)
	Labels interface{}
	// The name of the project role template binding (string)
	Name interface{}
	// The project id where bind project role template (string)
	ProjectId interface{}
	// The role template id from create project role template binding (string)
	RoleTemplateId interface{}
	// The user ID to assign project role template binding (string)
	UserId interface{}
	// The userPrincipal ID to assign project role template binding (string)
	UserPrincipalId interface{}
}
