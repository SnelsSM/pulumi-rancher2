// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AuthConfigAdfs struct {
	pulumi.CustomResourceState

	AccessMode          pulumi.StringPtrOutput   `pulumi:"accessMode"`
	AllowedPrincipalIds pulumi.StringArrayOutput `pulumi:"allowedPrincipalIds"`
	// Annotations of the resource
	Annotations        pulumi.MapOutput     `pulumi:"annotations"`
	DisplayNameField   pulumi.StringOutput  `pulumi:"displayNameField"`
	Enabled            pulumi.BoolPtrOutput `pulumi:"enabled"`
	GroupsField        pulumi.StringOutput  `pulumi:"groupsField"`
	IdpMetadataContent pulumi.StringOutput  `pulumi:"idpMetadataContent"`
	// Labels of the resource
	Labels         pulumi.MapOutput    `pulumi:"labels"`
	Name           pulumi.StringOutput `pulumi:"name"`
	RancherApiHost pulumi.StringOutput `pulumi:"rancherApiHost"`
	SpCert         pulumi.StringOutput `pulumi:"spCert"`
	SpKey          pulumi.StringOutput `pulumi:"spKey"`
	Type           pulumi.StringOutput `pulumi:"type"`
	UidField       pulumi.StringOutput `pulumi:"uidField"`
	UserNameField  pulumi.StringOutput `pulumi:"userNameField"`
}

// NewAuthConfigAdfs registers a new resource with the given unique name, arguments, and options.
func NewAuthConfigAdfs(ctx *pulumi.Context,
	name string, args *AuthConfigAdfsArgs, opts ...pulumi.ResourceOption) (*AuthConfigAdfs, error) {
	if args == nil || args.DisplayNameField == nil {
		return nil, errors.New("missing required argument 'DisplayNameField'")
	}
	if args == nil || args.GroupsField == nil {
		return nil, errors.New("missing required argument 'GroupsField'")
	}
	if args == nil || args.IdpMetadataContent == nil {
		return nil, errors.New("missing required argument 'IdpMetadataContent'")
	}
	if args == nil || args.RancherApiHost == nil {
		return nil, errors.New("missing required argument 'RancherApiHost'")
	}
	if args == nil || args.SpCert == nil {
		return nil, errors.New("missing required argument 'SpCert'")
	}
	if args == nil || args.SpKey == nil {
		return nil, errors.New("missing required argument 'SpKey'")
	}
	if args == nil || args.UidField == nil {
		return nil, errors.New("missing required argument 'UidField'")
	}
	if args == nil || args.UserNameField == nil {
		return nil, errors.New("missing required argument 'UserNameField'")
	}
	if args == nil {
		args = &AuthConfigAdfsArgs{}
	}
	var resource AuthConfigAdfs
	err := ctx.RegisterResource("rancher2:index/authConfigAdfs:AuthConfigAdfs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthConfigAdfs gets an existing AuthConfigAdfs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthConfigAdfs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthConfigAdfsState, opts ...pulumi.ResourceOption) (*AuthConfigAdfs, error) {
	var resource AuthConfigAdfs
	err := ctx.ReadResource("rancher2:index/authConfigAdfs:AuthConfigAdfs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthConfigAdfs resources.
type authConfigAdfsState struct {
	AccessMode          *string  `pulumi:"accessMode"`
	AllowedPrincipalIds []string `pulumi:"allowedPrincipalIds"`
	// Annotations of the resource
	Annotations        map[string]interface{} `pulumi:"annotations"`
	DisplayNameField   *string                `pulumi:"displayNameField"`
	Enabled            *bool                  `pulumi:"enabled"`
	GroupsField        *string                `pulumi:"groupsField"`
	IdpMetadataContent *string                `pulumi:"idpMetadataContent"`
	// Labels of the resource
	Labels         map[string]interface{} `pulumi:"labels"`
	Name           *string                `pulumi:"name"`
	RancherApiHost *string                `pulumi:"rancherApiHost"`
	SpCert         *string                `pulumi:"spCert"`
	SpKey          *string                `pulumi:"spKey"`
	Type           *string                `pulumi:"type"`
	UidField       *string                `pulumi:"uidField"`
	UserNameField  *string                `pulumi:"userNameField"`
}

type AuthConfigAdfsState struct {
	AccessMode          pulumi.StringPtrInput
	AllowedPrincipalIds pulumi.StringArrayInput
	// Annotations of the resource
	Annotations        pulumi.MapInput
	DisplayNameField   pulumi.StringPtrInput
	Enabled            pulumi.BoolPtrInput
	GroupsField        pulumi.StringPtrInput
	IdpMetadataContent pulumi.StringPtrInput
	// Labels of the resource
	Labels         pulumi.MapInput
	Name           pulumi.StringPtrInput
	RancherApiHost pulumi.StringPtrInput
	SpCert         pulumi.StringPtrInput
	SpKey          pulumi.StringPtrInput
	Type           pulumi.StringPtrInput
	UidField       pulumi.StringPtrInput
	UserNameField  pulumi.StringPtrInput
}

func (AuthConfigAdfsState) ElementType() reflect.Type {
	return reflect.TypeOf((*authConfigAdfsState)(nil)).Elem()
}

type authConfigAdfsArgs struct {
	AccessMode          *string  `pulumi:"accessMode"`
	AllowedPrincipalIds []string `pulumi:"allowedPrincipalIds"`
	// Annotations of the resource
	Annotations        map[string]interface{} `pulumi:"annotations"`
	DisplayNameField   string                 `pulumi:"displayNameField"`
	Enabled            *bool                  `pulumi:"enabled"`
	GroupsField        string                 `pulumi:"groupsField"`
	IdpMetadataContent string                 `pulumi:"idpMetadataContent"`
	// Labels of the resource
	Labels         map[string]interface{} `pulumi:"labels"`
	RancherApiHost string                 `pulumi:"rancherApiHost"`
	SpCert         string                 `pulumi:"spCert"`
	SpKey          string                 `pulumi:"spKey"`
	UidField       string                 `pulumi:"uidField"`
	UserNameField  string                 `pulumi:"userNameField"`
}

// The set of arguments for constructing a AuthConfigAdfs resource.
type AuthConfigAdfsArgs struct {
	AccessMode          pulumi.StringPtrInput
	AllowedPrincipalIds pulumi.StringArrayInput
	// Annotations of the resource
	Annotations        pulumi.MapInput
	DisplayNameField   pulumi.StringInput
	Enabled            pulumi.BoolPtrInput
	GroupsField        pulumi.StringInput
	IdpMetadataContent pulumi.StringInput
	// Labels of the resource
	Labels         pulumi.MapInput
	RancherApiHost pulumi.StringInput
	SpCert         pulumi.StringInput
	SpKey          pulumi.StringInput
	UidField       pulumi.StringInput
	UserNameField  pulumi.StringInput
}

func (AuthConfigAdfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authConfigAdfsArgs)(nil)).Elem()
}
