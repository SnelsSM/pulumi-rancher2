// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type PodSecurityPolicyTemplate struct {
	pulumi.CustomResourceState

	// allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to
	// true.
	AllowPrivilegeEscalation pulumi.BoolOutput `pulumi:"allowPrivilegeEscalation"`
	// allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field
	// may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and
	// requiredDropCapabilities.
	AllowedCapabilities pulumi.StringArrayOutput `pulumi:"allowedCapabilities"`
	// AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An
	// empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only
	// honored if the API server enables the CSIInlineVolume feature gate.
	AllowedCsiDrivers PodSecurityPolicyTemplateAllowedCsiDriverArrayOutput `pulumi:"allowedCsiDrivers"`
	// allowedFlexVolumes is a whitelist of allowed Flexvolumes. Empty or nil indicates that all Flexvolumes may be used. This
	// parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
	AllowedFlexVolumes PodSecurityPolicyTemplateAllowedFlexVolumeArrayOutput `pulumi:"allowedFlexVolumes"`
	// allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
	AllowedHostPaths PodSecurityPolicyTemplateAllowedHostPathArrayOutput `pulumi:"allowedHostPaths"`
	// AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the
	// DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
	AllowedProcMountTypes pulumi.StringArrayOutput `pulumi:"allowedProcMountTypes"`
	// allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain
	// sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe
	// sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
	AllowedUnsafeSysctls pulumi.StringArrayOutput `pulumi:"allowedUnsafeSysctls"`
	// Annotations of the resource
	Annotations pulumi.MapOutput `pulumi:"annotations"`
	// defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec
	// specifically drops the capability. You may not list a capability in both defaultAddCapabilities and
	// requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the
	// allowedCapabilities list.
	DefaultAddCapabilities pulumi.StringArrayOutput `pulumi:"defaultAddCapabilities"`
	// defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its
	// parent process.
	DefaultAllowPrivilegeEscalation pulumi.BoolPtrOutput `pulumi:"defaultAllowPrivilegeEscalation"`
	// Pod Security Policy template policy description
	Description pulumi.StringOutput `pulumi:"description"`
	// forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name
	// or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are
	// forbidden.
	ForbiddenSysctls pulumi.StringArrayOutput `pulumi:"forbiddenSysctls"`
	// fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
	FsGroup PodSecurityPolicyTemplateFsGroupOutput `pulumi:"fsGroup"`
	// hostIPC determines if the policy allows the use of HostIPC in the pod spec.
	HostIpc pulumi.BoolOutput `pulumi:"hostIpc"`
	// hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
	HostNetwork pulumi.BoolOutput `pulumi:"hostNetwork"`
	// hostPID determines if the policy allows the use of HostPID in the pod spec.
	HostPid pulumi.BoolOutput `pulumi:"hostPid"`
	// hostPorts determines which host port ranges are allowed to be exposed.
	HostPorts PodSecurityPolicyTemplateHostPortArrayOutput `pulumi:"hostPorts"`
	// Labels of the resource
	Labels pulumi.MapOutput `pulumi:"labels"`
	// Pod Security Policy template policy name
	Name pulumi.StringOutput `pulumi:"name"`
	// privileged determines if a pod can request to be run as privileged.
	Privileged pulumi.BoolOutput `pulumi:"privileged"`
	// readOnlyRootFilesystem when set to true will force containers to run with a read only root file system. If the container
	// specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the
	// container may run with a read only root file system if it wishes but it will not be forced to.
	ReadOnlyRootFilesystem pulumi.BoolOutput `pulumi:"readOnlyRootFilesystem"`
	// requiredDropCapabilities are the capabilities that will be dropped from the container. These are required to be dropped
	// and cannot be added.
	RequiredDropCapabilities pulumi.StringArrayOutput `pulumi:"requiredDropCapabilities"`
	// RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted,
	// the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
	RunAsGroup PodSecurityPolicyTemplateRunAsGroupPtrOutput `pulumi:"runAsGroup"`
	// runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
	RunAsUser PodSecurityPolicyTemplateRunAsUserOutput `pulumi:"runAsUser"`
	// runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the
	// pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being
	// enabled.
	RuntimeClass PodSecurityPolicyTemplateRuntimeClassPtrOutput `pulumi:"runtimeClass"`
	// seLinux is the strategy that will dictate the allowable labels that may be set.
	SeLinux PodSecurityPolicyTemplateSeLinuxOutput `pulumi:"seLinux"`
	// supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
	SupplementalGroup PodSecurityPolicyTemplateSupplementalGroupOutput `pulumi:"supplementalGroup"`
	// volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you
	// may use '*'
	Volumes pulumi.StringArrayOutput `pulumi:"volumes"`
}

// NewPodSecurityPolicyTemplate registers a new resource with the given unique name, arguments, and options.
func NewPodSecurityPolicyTemplate(ctx *pulumi.Context,
	name string, args *PodSecurityPolicyTemplateArgs, opts ...pulumi.ResourceOption) (*PodSecurityPolicyTemplate, error) {
	if args == nil {
		args = &PodSecurityPolicyTemplateArgs{}
	}
	var resource PodSecurityPolicyTemplate
	err := ctx.RegisterResource("rancher2:index/podSecurityPolicyTemplate:PodSecurityPolicyTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPodSecurityPolicyTemplate gets an existing PodSecurityPolicyTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPodSecurityPolicyTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PodSecurityPolicyTemplateState, opts ...pulumi.ResourceOption) (*PodSecurityPolicyTemplate, error) {
	var resource PodSecurityPolicyTemplate
	err := ctx.ReadResource("rancher2:index/podSecurityPolicyTemplate:PodSecurityPolicyTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PodSecurityPolicyTemplate resources.
type podSecurityPolicyTemplateState struct {
	// allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to
	// true.
	AllowPrivilegeEscalation *bool `pulumi:"allowPrivilegeEscalation"`
	// allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field
	// may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and
	// requiredDropCapabilities.
	AllowedCapabilities []string `pulumi:"allowedCapabilities"`
	// AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An
	// empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only
	// honored if the API server enables the CSIInlineVolume feature gate.
	AllowedCsiDrivers []PodSecurityPolicyTemplateAllowedCsiDriver `pulumi:"allowedCsiDrivers"`
	// allowedFlexVolumes is a whitelist of allowed Flexvolumes. Empty or nil indicates that all Flexvolumes may be used. This
	// parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
	AllowedFlexVolumes []PodSecurityPolicyTemplateAllowedFlexVolume `pulumi:"allowedFlexVolumes"`
	// allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
	AllowedHostPaths []PodSecurityPolicyTemplateAllowedHostPath `pulumi:"allowedHostPaths"`
	// AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the
	// DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
	AllowedProcMountTypes []string `pulumi:"allowedProcMountTypes"`
	// allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain
	// sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe
	// sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
	AllowedUnsafeSysctls []string `pulumi:"allowedUnsafeSysctls"`
	// Annotations of the resource
	Annotations map[string]interface{} `pulumi:"annotations"`
	// defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec
	// specifically drops the capability. You may not list a capability in both defaultAddCapabilities and
	// requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the
	// allowedCapabilities list.
	DefaultAddCapabilities []string `pulumi:"defaultAddCapabilities"`
	// defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its
	// parent process.
	DefaultAllowPrivilegeEscalation *bool `pulumi:"defaultAllowPrivilegeEscalation"`
	// Pod Security Policy template policy description
	Description *string `pulumi:"description"`
	// forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name
	// or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are
	// forbidden.
	ForbiddenSysctls []string `pulumi:"forbiddenSysctls"`
	// fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
	FsGroup *PodSecurityPolicyTemplateFsGroup `pulumi:"fsGroup"`
	// hostIPC determines if the policy allows the use of HostIPC in the pod spec.
	HostIpc *bool `pulumi:"hostIpc"`
	// hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
	HostNetwork *bool `pulumi:"hostNetwork"`
	// hostPID determines if the policy allows the use of HostPID in the pod spec.
	HostPid *bool `pulumi:"hostPid"`
	// hostPorts determines which host port ranges are allowed to be exposed.
	HostPorts []PodSecurityPolicyTemplateHostPort `pulumi:"hostPorts"`
	// Labels of the resource
	Labels map[string]interface{} `pulumi:"labels"`
	// Pod Security Policy template policy name
	Name *string `pulumi:"name"`
	// privileged determines if a pod can request to be run as privileged.
	Privileged *bool `pulumi:"privileged"`
	// readOnlyRootFilesystem when set to true will force containers to run with a read only root file system. If the container
	// specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the
	// container may run with a read only root file system if it wishes but it will not be forced to.
	ReadOnlyRootFilesystem *bool `pulumi:"readOnlyRootFilesystem"`
	// requiredDropCapabilities are the capabilities that will be dropped from the container. These are required to be dropped
	// and cannot be added.
	RequiredDropCapabilities []string `pulumi:"requiredDropCapabilities"`
	// RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted,
	// the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
	RunAsGroup *PodSecurityPolicyTemplateRunAsGroup `pulumi:"runAsGroup"`
	// runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
	RunAsUser *PodSecurityPolicyTemplateRunAsUser `pulumi:"runAsUser"`
	// runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the
	// pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being
	// enabled.
	RuntimeClass *PodSecurityPolicyTemplateRuntimeClass `pulumi:"runtimeClass"`
	// seLinux is the strategy that will dictate the allowable labels that may be set.
	SeLinux *PodSecurityPolicyTemplateSeLinux `pulumi:"seLinux"`
	// supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
	SupplementalGroup *PodSecurityPolicyTemplateSupplementalGroup `pulumi:"supplementalGroup"`
	// volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you
	// may use '*'
	Volumes []string `pulumi:"volumes"`
}

type PodSecurityPolicyTemplateState struct {
	// allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to
	// true.
	AllowPrivilegeEscalation pulumi.BoolPtrInput
	// allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field
	// may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and
	// requiredDropCapabilities.
	AllowedCapabilities pulumi.StringArrayInput
	// AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An
	// empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only
	// honored if the API server enables the CSIInlineVolume feature gate.
	AllowedCsiDrivers PodSecurityPolicyTemplateAllowedCsiDriverArrayInput
	// allowedFlexVolumes is a whitelist of allowed Flexvolumes. Empty or nil indicates that all Flexvolumes may be used. This
	// parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
	AllowedFlexVolumes PodSecurityPolicyTemplateAllowedFlexVolumeArrayInput
	// allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
	AllowedHostPaths PodSecurityPolicyTemplateAllowedHostPathArrayInput
	// AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the
	// DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
	AllowedProcMountTypes pulumi.StringArrayInput
	// allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain
	// sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe
	// sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
	AllowedUnsafeSysctls pulumi.StringArrayInput
	// Annotations of the resource
	Annotations pulumi.MapInput
	// defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec
	// specifically drops the capability. You may not list a capability in both defaultAddCapabilities and
	// requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the
	// allowedCapabilities list.
	DefaultAddCapabilities pulumi.StringArrayInput
	// defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its
	// parent process.
	DefaultAllowPrivilegeEscalation pulumi.BoolPtrInput
	// Pod Security Policy template policy description
	Description pulumi.StringPtrInput
	// forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name
	// or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are
	// forbidden.
	ForbiddenSysctls pulumi.StringArrayInput
	// fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
	FsGroup PodSecurityPolicyTemplateFsGroupPtrInput
	// hostIPC determines if the policy allows the use of HostIPC in the pod spec.
	HostIpc pulumi.BoolPtrInput
	// hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
	HostNetwork pulumi.BoolPtrInput
	// hostPID determines if the policy allows the use of HostPID in the pod spec.
	HostPid pulumi.BoolPtrInput
	// hostPorts determines which host port ranges are allowed to be exposed.
	HostPorts PodSecurityPolicyTemplateHostPortArrayInput
	// Labels of the resource
	Labels pulumi.MapInput
	// Pod Security Policy template policy name
	Name pulumi.StringPtrInput
	// privileged determines if a pod can request to be run as privileged.
	Privileged pulumi.BoolPtrInput
	// readOnlyRootFilesystem when set to true will force containers to run with a read only root file system. If the container
	// specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the
	// container may run with a read only root file system if it wishes but it will not be forced to.
	ReadOnlyRootFilesystem pulumi.BoolPtrInput
	// requiredDropCapabilities are the capabilities that will be dropped from the container. These are required to be dropped
	// and cannot be added.
	RequiredDropCapabilities pulumi.StringArrayInput
	// RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted,
	// the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
	RunAsGroup PodSecurityPolicyTemplateRunAsGroupPtrInput
	// runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
	RunAsUser PodSecurityPolicyTemplateRunAsUserPtrInput
	// runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the
	// pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being
	// enabled.
	RuntimeClass PodSecurityPolicyTemplateRuntimeClassPtrInput
	// seLinux is the strategy that will dictate the allowable labels that may be set.
	SeLinux PodSecurityPolicyTemplateSeLinuxPtrInput
	// supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
	SupplementalGroup PodSecurityPolicyTemplateSupplementalGroupPtrInput
	// volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you
	// may use '*'
	Volumes pulumi.StringArrayInput
}

func (PodSecurityPolicyTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*podSecurityPolicyTemplateState)(nil)).Elem()
}

type podSecurityPolicyTemplateArgs struct {
	// allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to
	// true.
	AllowPrivilegeEscalation *bool `pulumi:"allowPrivilegeEscalation"`
	// allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field
	// may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and
	// requiredDropCapabilities.
	AllowedCapabilities []string `pulumi:"allowedCapabilities"`
	// AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An
	// empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only
	// honored if the API server enables the CSIInlineVolume feature gate.
	AllowedCsiDrivers []PodSecurityPolicyTemplateAllowedCsiDriver `pulumi:"allowedCsiDrivers"`
	// allowedFlexVolumes is a whitelist of allowed Flexvolumes. Empty or nil indicates that all Flexvolumes may be used. This
	// parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
	AllowedFlexVolumes []PodSecurityPolicyTemplateAllowedFlexVolume `pulumi:"allowedFlexVolumes"`
	// allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
	AllowedHostPaths []PodSecurityPolicyTemplateAllowedHostPath `pulumi:"allowedHostPaths"`
	// AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the
	// DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
	AllowedProcMountTypes []string `pulumi:"allowedProcMountTypes"`
	// allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain
	// sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe
	// sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
	AllowedUnsafeSysctls []string `pulumi:"allowedUnsafeSysctls"`
	// Annotations of the resource
	Annotations map[string]interface{} `pulumi:"annotations"`
	// defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec
	// specifically drops the capability. You may not list a capability in both defaultAddCapabilities and
	// requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the
	// allowedCapabilities list.
	DefaultAddCapabilities []string `pulumi:"defaultAddCapabilities"`
	// defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its
	// parent process.
	DefaultAllowPrivilegeEscalation *bool `pulumi:"defaultAllowPrivilegeEscalation"`
	// Pod Security Policy template policy description
	Description *string `pulumi:"description"`
	// forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name
	// or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are
	// forbidden.
	ForbiddenSysctls []string `pulumi:"forbiddenSysctls"`
	// fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
	FsGroup *PodSecurityPolicyTemplateFsGroup `pulumi:"fsGroup"`
	// hostIPC determines if the policy allows the use of HostIPC in the pod spec.
	HostIpc *bool `pulumi:"hostIpc"`
	// hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
	HostNetwork *bool `pulumi:"hostNetwork"`
	// hostPID determines if the policy allows the use of HostPID in the pod spec.
	HostPid *bool `pulumi:"hostPid"`
	// hostPorts determines which host port ranges are allowed to be exposed.
	HostPorts []PodSecurityPolicyTemplateHostPort `pulumi:"hostPorts"`
	// Labels of the resource
	Labels map[string]interface{} `pulumi:"labels"`
	// Pod Security Policy template policy name
	Name *string `pulumi:"name"`
	// privileged determines if a pod can request to be run as privileged.
	Privileged *bool `pulumi:"privileged"`
	// readOnlyRootFilesystem when set to true will force containers to run with a read only root file system. If the container
	// specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the
	// container may run with a read only root file system if it wishes but it will not be forced to.
	ReadOnlyRootFilesystem *bool `pulumi:"readOnlyRootFilesystem"`
	// requiredDropCapabilities are the capabilities that will be dropped from the container. These are required to be dropped
	// and cannot be added.
	RequiredDropCapabilities []string `pulumi:"requiredDropCapabilities"`
	// RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted,
	// the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
	RunAsGroup *PodSecurityPolicyTemplateRunAsGroup `pulumi:"runAsGroup"`
	// runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
	RunAsUser *PodSecurityPolicyTemplateRunAsUser `pulumi:"runAsUser"`
	// runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the
	// pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being
	// enabled.
	RuntimeClass *PodSecurityPolicyTemplateRuntimeClass `pulumi:"runtimeClass"`
	// seLinux is the strategy that will dictate the allowable labels that may be set.
	SeLinux *PodSecurityPolicyTemplateSeLinux `pulumi:"seLinux"`
	// supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
	SupplementalGroup *PodSecurityPolicyTemplateSupplementalGroup `pulumi:"supplementalGroup"`
	// volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you
	// may use '*'
	Volumes []string `pulumi:"volumes"`
}

// The set of arguments for constructing a PodSecurityPolicyTemplate resource.
type PodSecurityPolicyTemplateArgs struct {
	// allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to
	// true.
	AllowPrivilegeEscalation pulumi.BoolPtrInput
	// allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field
	// may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and
	// requiredDropCapabilities.
	AllowedCapabilities pulumi.StringArrayInput
	// AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An
	// empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only
	// honored if the API server enables the CSIInlineVolume feature gate.
	AllowedCsiDrivers PodSecurityPolicyTemplateAllowedCsiDriverArrayInput
	// allowedFlexVolumes is a whitelist of allowed Flexvolumes. Empty or nil indicates that all Flexvolumes may be used. This
	// parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
	AllowedFlexVolumes PodSecurityPolicyTemplateAllowedFlexVolumeArrayInput
	// allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
	AllowedHostPaths PodSecurityPolicyTemplateAllowedHostPathArrayInput
	// AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the
	// DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
	AllowedProcMountTypes pulumi.StringArrayInput
	// allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain
	// sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe
	// sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
	AllowedUnsafeSysctls pulumi.StringArrayInput
	// Annotations of the resource
	Annotations pulumi.MapInput
	// defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec
	// specifically drops the capability. You may not list a capability in both defaultAddCapabilities and
	// requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the
	// allowedCapabilities list.
	DefaultAddCapabilities pulumi.StringArrayInput
	// defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its
	// parent process.
	DefaultAllowPrivilegeEscalation pulumi.BoolPtrInput
	// Pod Security Policy template policy description
	Description pulumi.StringPtrInput
	// forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name
	// or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are
	// forbidden.
	ForbiddenSysctls pulumi.StringArrayInput
	// fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
	FsGroup PodSecurityPolicyTemplateFsGroupPtrInput
	// hostIPC determines if the policy allows the use of HostIPC in the pod spec.
	HostIpc pulumi.BoolPtrInput
	// hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
	HostNetwork pulumi.BoolPtrInput
	// hostPID determines if the policy allows the use of HostPID in the pod spec.
	HostPid pulumi.BoolPtrInput
	// hostPorts determines which host port ranges are allowed to be exposed.
	HostPorts PodSecurityPolicyTemplateHostPortArrayInput
	// Labels of the resource
	Labels pulumi.MapInput
	// Pod Security Policy template policy name
	Name pulumi.StringPtrInput
	// privileged determines if a pod can request to be run as privileged.
	Privileged pulumi.BoolPtrInput
	// readOnlyRootFilesystem when set to true will force containers to run with a read only root file system. If the container
	// specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the
	// container may run with a read only root file system if it wishes but it will not be forced to.
	ReadOnlyRootFilesystem pulumi.BoolPtrInput
	// requiredDropCapabilities are the capabilities that will be dropped from the container. These are required to be dropped
	// and cannot be added.
	RequiredDropCapabilities pulumi.StringArrayInput
	// RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted,
	// the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
	RunAsGroup PodSecurityPolicyTemplateRunAsGroupPtrInput
	// runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
	RunAsUser PodSecurityPolicyTemplateRunAsUserPtrInput
	// runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the
	// pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being
	// enabled.
	RuntimeClass PodSecurityPolicyTemplateRuntimeClassPtrInput
	// seLinux is the strategy that will dictate the allowable labels that may be set.
	SeLinux PodSecurityPolicyTemplateSeLinuxPtrInput
	// supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
	SupplementalGroup PodSecurityPolicyTemplateSupplementalGroupPtrInput
	// volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you
	// may use '*'
	Volumes pulumi.StringArrayInput
}

func (PodSecurityPolicyTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*podSecurityPolicyTemplateArgs)(nil)).Elem()
}
