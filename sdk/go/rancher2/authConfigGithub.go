// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Rancher v2 Auth Config Github resource. This can be used to configure and enable Auth Config Github for Rancher v2 RKE clusters and retrieve their information.
// 
// In addition to the built-in local auth, only one external auth config provider can be enabled at a time. 
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/auth_config_github.html.markdown.
type AuthConfigGithub struct {
	s *pulumi.ResourceState
}

// NewAuthConfigGithub registers a new resource with the given unique name, arguments, and options.
func NewAuthConfigGithub(ctx *pulumi.Context,
	name string, args *AuthConfigGithubArgs, opts ...pulumi.ResourceOpt) (*AuthConfigGithub, error) {
	if args == nil || args.ClientId == nil {
		return nil, errors.New("missing required argument 'ClientId'")
	}
	if args == nil || args.ClientSecret == nil {
		return nil, errors.New("missing required argument 'ClientSecret'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessMode"] = nil
		inputs["allowedPrincipalIds"] = nil
		inputs["annotations"] = nil
		inputs["clientId"] = nil
		inputs["clientSecret"] = nil
		inputs["enabled"] = nil
		inputs["hostname"] = nil
		inputs["labels"] = nil
		inputs["tls"] = nil
	} else {
		inputs["accessMode"] = args.AccessMode
		inputs["allowedPrincipalIds"] = args.AllowedPrincipalIds
		inputs["annotations"] = args.Annotations
		inputs["clientId"] = args.ClientId
		inputs["clientSecret"] = args.ClientSecret
		inputs["enabled"] = args.Enabled
		inputs["hostname"] = args.Hostname
		inputs["labels"] = args.Labels
		inputs["tls"] = args.Tls
	}
	inputs["name"] = nil
	inputs["type"] = nil
	s, err := ctx.RegisterResource("rancher2:index/authConfigGithub:AuthConfigGithub", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthConfigGithub{s: s}, nil
}

// GetAuthConfigGithub gets an existing AuthConfigGithub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthConfigGithub(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AuthConfigGithubState, opts ...pulumi.ResourceOpt) (*AuthConfigGithub, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessMode"] = state.AccessMode
		inputs["allowedPrincipalIds"] = state.AllowedPrincipalIds
		inputs["annotations"] = state.Annotations
		inputs["clientId"] = state.ClientId
		inputs["clientSecret"] = state.ClientSecret
		inputs["enabled"] = state.Enabled
		inputs["hostname"] = state.Hostname
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["tls"] = state.Tls
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("rancher2:index/authConfigGithub:AuthConfigGithub", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthConfigGithub{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AuthConfigGithub) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AuthConfigGithub) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
func (r *AuthConfigGithub) AccessMode() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accessMode"])
}

// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `github_user://<USER_ID>`  `github_team://<GROUP_ID>` `github_org://<ORG_ID>` (list)
func (r *AuthConfigGithub) AllowedPrincipalIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["allowedPrincipalIds"])
}

// Annotations of the resource (map)
func (r *AuthConfigGithub) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// Github auth Client ID (string)
func (r *AuthConfigGithub) ClientId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientId"])
}

// Github auth Client secret (string)
func (r *AuthConfigGithub) ClientSecret() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientSecret"])
}

// Enable auth config provider. Default `true` (bool)
func (r *AuthConfigGithub) Enabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enabled"])
}

// Github hostname to connect. Default `github.com` (string)
func (r *AuthConfigGithub) Hostname() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["hostname"])
}

// Labels of the resource (map)
func (r *AuthConfigGithub) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// (Computed) The name of the resource (string)
func (r *AuthConfigGithub) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Enable TLS connection. Default `true` (bool)
func (r *AuthConfigGithub) Tls() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["tls"])
}

// (Computed) The type of the resource (string)
func (r *AuthConfigGithub) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering AuthConfigGithub resources.
type AuthConfigGithubState struct {
	// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
	AccessMode interface{}
	// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `github_user://<USER_ID>`  `github_team://<GROUP_ID>` `github_org://<ORG_ID>` (list)
	AllowedPrincipalIds interface{}
	// Annotations of the resource (map)
	Annotations interface{}
	// Github auth Client ID (string)
	ClientId interface{}
	// Github auth Client secret (string)
	ClientSecret interface{}
	// Enable auth config provider. Default `true` (bool)
	Enabled interface{}
	// Github hostname to connect. Default `github.com` (string)
	Hostname interface{}
	// Labels of the resource (map)
	Labels interface{}
	// (Computed) The name of the resource (string)
	Name interface{}
	// Enable TLS connection. Default `true` (bool)
	Tls interface{}
	// (Computed) The type of the resource (string)
	Type interface{}
}

// The set of arguments for constructing a AuthConfigGithub resource.
type AuthConfigGithubArgs struct {
	// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
	AccessMode interface{}
	// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `github_user://<USER_ID>`  `github_team://<GROUP_ID>` `github_org://<ORG_ID>` (list)
	AllowedPrincipalIds interface{}
	// Annotations of the resource (map)
	Annotations interface{}
	// Github auth Client ID (string)
	ClientId interface{}
	// Github auth Client secret (string)
	ClientSecret interface{}
	// Enable auth config provider. Default `true` (bool)
	Enabled interface{}
	// Github hostname to connect. Default `github.com` (string)
	Hostname interface{}
	// Labels of the resource (map)
	Labels interface{}
	// Enable TLS connection. Default `true` (bool)
	Tls interface{}
}
