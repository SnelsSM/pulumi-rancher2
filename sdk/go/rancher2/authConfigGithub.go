// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AuthConfigGithub struct {
	pulumi.CustomResourceState

	AccessMode          pulumi.StringPtrOutput   `pulumi:"accessMode"`
	AllowedPrincipalIds pulumi.StringArrayOutput `pulumi:"allowedPrincipalIds"`
	// Annotations of the resource
	Annotations  pulumi.MapOutput       `pulumi:"annotations"`
	ClientId     pulumi.StringOutput    `pulumi:"clientId"`
	ClientSecret pulumi.StringOutput    `pulumi:"clientSecret"`
	Enabled      pulumi.BoolPtrOutput   `pulumi:"enabled"`
	Hostname     pulumi.StringPtrOutput `pulumi:"hostname"`
	// Labels of the resource
	Labels pulumi.MapOutput     `pulumi:"labels"`
	Name   pulumi.StringOutput  `pulumi:"name"`
	Tls    pulumi.BoolPtrOutput `pulumi:"tls"`
	Type   pulumi.StringOutput  `pulumi:"type"`
}

// NewAuthConfigGithub registers a new resource with the given unique name, arguments, and options.
func NewAuthConfigGithub(ctx *pulumi.Context,
	name string, args *AuthConfigGithubArgs, opts ...pulumi.ResourceOption) (*AuthConfigGithub, error) {
	if args == nil || args.ClientId == nil {
		return nil, errors.New("missing required argument 'ClientId'")
	}
	if args == nil || args.ClientSecret == nil {
		return nil, errors.New("missing required argument 'ClientSecret'")
	}
	if args == nil {
		args = &AuthConfigGithubArgs{}
	}
	var resource AuthConfigGithub
	err := ctx.RegisterResource("rancher2:index/authConfigGithub:AuthConfigGithub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthConfigGithub gets an existing AuthConfigGithub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthConfigGithub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthConfigGithubState, opts ...pulumi.ResourceOption) (*AuthConfigGithub, error) {
	var resource AuthConfigGithub
	err := ctx.ReadResource("rancher2:index/authConfigGithub:AuthConfigGithub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthConfigGithub resources.
type authConfigGithubState struct {
	AccessMode          *string  `pulumi:"accessMode"`
	AllowedPrincipalIds []string `pulumi:"allowedPrincipalIds"`
	// Annotations of the resource
	Annotations  map[string]interface{} `pulumi:"annotations"`
	ClientId     *string                `pulumi:"clientId"`
	ClientSecret *string                `pulumi:"clientSecret"`
	Enabled      *bool                  `pulumi:"enabled"`
	Hostname     *string                `pulumi:"hostname"`
	// Labels of the resource
	Labels map[string]interface{} `pulumi:"labels"`
	Name   *string                `pulumi:"name"`
	Tls    *bool                  `pulumi:"tls"`
	Type   *string                `pulumi:"type"`
}

type AuthConfigGithubState struct {
	AccessMode          pulumi.StringPtrInput
	AllowedPrincipalIds pulumi.StringArrayInput
	// Annotations of the resource
	Annotations  pulumi.MapInput
	ClientId     pulumi.StringPtrInput
	ClientSecret pulumi.StringPtrInput
	Enabled      pulumi.BoolPtrInput
	Hostname     pulumi.StringPtrInput
	// Labels of the resource
	Labels pulumi.MapInput
	Name   pulumi.StringPtrInput
	Tls    pulumi.BoolPtrInput
	Type   pulumi.StringPtrInput
}

func (AuthConfigGithubState) ElementType() reflect.Type {
	return reflect.TypeOf((*authConfigGithubState)(nil)).Elem()
}

type authConfigGithubArgs struct {
	AccessMode          *string  `pulumi:"accessMode"`
	AllowedPrincipalIds []string `pulumi:"allowedPrincipalIds"`
	// Annotations of the resource
	Annotations  map[string]interface{} `pulumi:"annotations"`
	ClientId     string                 `pulumi:"clientId"`
	ClientSecret string                 `pulumi:"clientSecret"`
	Enabled      *bool                  `pulumi:"enabled"`
	Hostname     *string                `pulumi:"hostname"`
	// Labels of the resource
	Labels map[string]interface{} `pulumi:"labels"`
	Tls    *bool                  `pulumi:"tls"`
}

// The set of arguments for constructing a AuthConfigGithub resource.
type AuthConfigGithubArgs struct {
	AccessMode          pulumi.StringPtrInput
	AllowedPrincipalIds pulumi.StringArrayInput
	// Annotations of the resource
	Annotations  pulumi.MapInput
	ClientId     pulumi.StringInput
	ClientSecret pulumi.StringInput
	Enabled      pulumi.BoolPtrInput
	Hostname     pulumi.StringPtrInput
	// Labels of the resource
	Labels pulumi.MapInput
	Tls    pulumi.BoolPtrInput
}

func (AuthConfigGithubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authConfigGithubArgs)(nil)).Elem()
}
