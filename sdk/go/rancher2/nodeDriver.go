// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type NodeDriver struct {
	pulumi.CustomResourceState

	Active pulumi.BoolOutput `pulumi:"active"`
	// Annotations of the resource
	Annotations pulumi.MapOutput       `pulumi:"annotations"`
	Builtin     pulumi.BoolOutput      `pulumi:"builtin"`
	Checksum    pulumi.StringPtrOutput `pulumi:"checksum"`
	Description pulumi.StringPtrOutput `pulumi:"description"`
	ExternalId  pulumi.StringPtrOutput `pulumi:"externalId"`
	// Labels of the resource
	Labels           pulumi.MapOutput         `pulumi:"labels"`
	Name             pulumi.StringOutput      `pulumi:"name"`
	UiUrl            pulumi.StringPtrOutput   `pulumi:"uiUrl"`
	Url              pulumi.StringOutput      `pulumi:"url"`
	WhitelistDomains pulumi.StringArrayOutput `pulumi:"whitelistDomains"`
}

// NewNodeDriver registers a new resource with the given unique name, arguments, and options.
func NewNodeDriver(ctx *pulumi.Context,
	name string, args *NodeDriverArgs, opts ...pulumi.ResourceOption) (*NodeDriver, error) {
	if args == nil || args.Active == nil {
		return nil, errors.New("missing required argument 'Active'")
	}
	if args == nil || args.Builtin == nil {
		return nil, errors.New("missing required argument 'Builtin'")
	}
	if args == nil || args.Url == nil {
		return nil, errors.New("missing required argument 'Url'")
	}
	if args == nil {
		args = &NodeDriverArgs{}
	}
	var resource NodeDriver
	err := ctx.RegisterResource("rancher2:index/nodeDriver:NodeDriver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodeDriver gets an existing NodeDriver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodeDriver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodeDriverState, opts ...pulumi.ResourceOption) (*NodeDriver, error) {
	var resource NodeDriver
	err := ctx.ReadResource("rancher2:index/nodeDriver:NodeDriver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodeDriver resources.
type nodeDriverState struct {
	Active *bool `pulumi:"active"`
	// Annotations of the resource
	Annotations map[string]interface{} `pulumi:"annotations"`
	Builtin     *bool                  `pulumi:"builtin"`
	Checksum    *string                `pulumi:"checksum"`
	Description *string                `pulumi:"description"`
	ExternalId  *string                `pulumi:"externalId"`
	// Labels of the resource
	Labels           map[string]interface{} `pulumi:"labels"`
	Name             *string                `pulumi:"name"`
	UiUrl            *string                `pulumi:"uiUrl"`
	Url              *string                `pulumi:"url"`
	WhitelistDomains []string               `pulumi:"whitelistDomains"`
}

type NodeDriverState struct {
	Active pulumi.BoolPtrInput
	// Annotations of the resource
	Annotations pulumi.MapInput
	Builtin     pulumi.BoolPtrInput
	Checksum    pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	ExternalId  pulumi.StringPtrInput
	// Labels of the resource
	Labels           pulumi.MapInput
	Name             pulumi.StringPtrInput
	UiUrl            pulumi.StringPtrInput
	Url              pulumi.StringPtrInput
	WhitelistDomains pulumi.StringArrayInput
}

func (NodeDriverState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeDriverState)(nil)).Elem()
}

type nodeDriverArgs struct {
	Active bool `pulumi:"active"`
	// Annotations of the resource
	Annotations map[string]interface{} `pulumi:"annotations"`
	Builtin     bool                   `pulumi:"builtin"`
	Checksum    *string                `pulumi:"checksum"`
	Description *string                `pulumi:"description"`
	ExternalId  *string                `pulumi:"externalId"`
	// Labels of the resource
	Labels           map[string]interface{} `pulumi:"labels"`
	Name             *string                `pulumi:"name"`
	UiUrl            *string                `pulumi:"uiUrl"`
	Url              string                 `pulumi:"url"`
	WhitelistDomains []string               `pulumi:"whitelistDomains"`
}

// The set of arguments for constructing a NodeDriver resource.
type NodeDriverArgs struct {
	Active pulumi.BoolInput
	// Annotations of the resource
	Annotations pulumi.MapInput
	Builtin     pulumi.BoolInput
	Checksum    pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	ExternalId  pulumi.StringPtrInput
	// Labels of the resource
	Labels           pulumi.MapInput
	Name             pulumi.StringPtrInput
	UiUrl            pulumi.StringPtrInput
	Url              pulumi.StringInput
	WhitelistDomains pulumi.StringArrayInput
}

func (NodeDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeDriverArgs)(nil)).Elem()
}
