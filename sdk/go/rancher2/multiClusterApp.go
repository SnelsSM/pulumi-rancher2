// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/multi_cluster_app.html.markdown.
type MultiClusterApp struct {
	s *pulumi.ResourceState
}

// NewMultiClusterApp registers a new resource with the given unique name, arguments, and options.
func NewMultiClusterApp(ctx *pulumi.Context,
	name string, args *MultiClusterAppArgs, opts ...pulumi.ResourceOpt) (*MultiClusterApp, error) {
	if args == nil || args.CatalogName == nil {
		return nil, errors.New("missing required argument 'CatalogName'")
	}
	if args == nil || args.Roles == nil {
		return nil, errors.New("missing required argument 'Roles'")
	}
	if args == nil || args.Targets == nil {
		return nil, errors.New("missing required argument 'Targets'")
	}
	if args == nil || args.TemplateName == nil {
		return nil, errors.New("missing required argument 'TemplateName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["annotations"] = nil
		inputs["answers"] = nil
		inputs["catalogName"] = nil
		inputs["labels"] = nil
		inputs["members"] = nil
		inputs["name"] = nil
		inputs["revisionHistoryLimit"] = nil
		inputs["revisionId"] = nil
		inputs["roles"] = nil
		inputs["targets"] = nil
		inputs["templateName"] = nil
		inputs["templateVersion"] = nil
		inputs["upgradeStrategy"] = nil
		inputs["wait"] = nil
	} else {
		inputs["annotations"] = args.Annotations
		inputs["answers"] = args.Answers
		inputs["catalogName"] = args.CatalogName
		inputs["labels"] = args.Labels
		inputs["members"] = args.Members
		inputs["name"] = args.Name
		inputs["revisionHistoryLimit"] = args.RevisionHistoryLimit
		inputs["revisionId"] = args.RevisionId
		inputs["roles"] = args.Roles
		inputs["targets"] = args.Targets
		inputs["templateName"] = args.TemplateName
		inputs["templateVersion"] = args.TemplateVersion
		inputs["upgradeStrategy"] = args.UpgradeStrategy
		inputs["wait"] = args.Wait
	}
	inputs["templateVersionId"] = nil
	s, err := ctx.RegisterResource("rancher2:index/multiClusterApp:MultiClusterApp", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MultiClusterApp{s: s}, nil
}

// GetMultiClusterApp gets an existing MultiClusterApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMultiClusterApp(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MultiClusterAppState, opts ...pulumi.ResourceOpt) (*MultiClusterApp, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["annotations"] = state.Annotations
		inputs["answers"] = state.Answers
		inputs["catalogName"] = state.CatalogName
		inputs["labels"] = state.Labels
		inputs["members"] = state.Members
		inputs["name"] = state.Name
		inputs["revisionHistoryLimit"] = state.RevisionHistoryLimit
		inputs["revisionId"] = state.RevisionId
		inputs["roles"] = state.Roles
		inputs["targets"] = state.Targets
		inputs["templateName"] = state.TemplateName
		inputs["templateVersion"] = state.TemplateVersion
		inputs["templateVersionId"] = state.TemplateVersionId
		inputs["upgradeStrategy"] = state.UpgradeStrategy
		inputs["wait"] = state.Wait
	}
	s, err := ctx.ReadResource("rancher2:index/multiClusterApp:MultiClusterApp", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MultiClusterApp{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *MultiClusterApp) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *MultiClusterApp) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Annotations for multi cluster app object (map)
func (r *MultiClusterApp) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// The multi cluster app answers (list)
func (r *MultiClusterApp) Answers() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["answers"])
}

// The multi cluster app catalog name (string)
func (r *MultiClusterApp) CatalogName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["catalogName"])
}

// Labels for multi cluster app object (map)
func (r *MultiClusterApp) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// The multi cluster app answers (list)
func (r *MultiClusterApp) Members() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["members"])
}

// The multi cluster app name (string)
func (r *MultiClusterApp) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The multi cluster app revision history limit. Default `10` (int)
func (r *MultiClusterApp) RevisionHistoryLimit() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["revisionHistoryLimit"])
}

// Current revision id for the multi cluster app (string)
func (r *MultiClusterApp) RevisionId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["revisionId"])
}

// The multi cluster app roles (list)
func (r *MultiClusterApp) Roles() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["roles"])
}

// The multi cluster app target projects (list)
func (r *MultiClusterApp) Targets() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["targets"])
}

// The multi cluster app template name (string)
func (r *MultiClusterApp) TemplateName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["templateName"])
}

// The multi cluster app template version. Default: `latest` (string)
func (r *MultiClusterApp) TemplateVersion() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["templateVersion"])
}

// (Computed) The multi cluster app template version ID (string)
func (r *MultiClusterApp) TemplateVersionId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["templateVersionId"])
}

// The multi cluster app upgrade strategy (list MaxItems:1)
func (r *MultiClusterApp) UpgradeStrategy() pulumi.Output {
	return r.s.State["upgradeStrategy"]
}

// Wait until the multi cluster app is active. Default `true` (bool)
func (r *MultiClusterApp) Wait() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["wait"])
}

// Input properties used for looking up and filtering MultiClusterApp resources.
type MultiClusterAppState struct {
	// Annotations for multi cluster app object (map)
	Annotations interface{}
	// The multi cluster app answers (list)
	Answers interface{}
	// The multi cluster app catalog name (string)
	CatalogName interface{}
	// Labels for multi cluster app object (map)
	Labels interface{}
	// The multi cluster app answers (list)
	Members interface{}
	// The multi cluster app name (string)
	Name interface{}
	// The multi cluster app revision history limit. Default `10` (int)
	RevisionHistoryLimit interface{}
	// Current revision id for the multi cluster app (string)
	RevisionId interface{}
	// The multi cluster app roles (list)
	Roles interface{}
	// The multi cluster app target projects (list)
	Targets interface{}
	// The multi cluster app template name (string)
	TemplateName interface{}
	// The multi cluster app template version. Default: `latest` (string)
	TemplateVersion interface{}
	// (Computed) The multi cluster app template version ID (string)
	TemplateVersionId interface{}
	// The multi cluster app upgrade strategy (list MaxItems:1)
	UpgradeStrategy interface{}
	// Wait until the multi cluster app is active. Default `true` (bool)
	Wait interface{}
}

// The set of arguments for constructing a MultiClusterApp resource.
type MultiClusterAppArgs struct {
	// Annotations for multi cluster app object (map)
	Annotations interface{}
	// The multi cluster app answers (list)
	Answers interface{}
	// The multi cluster app catalog name (string)
	CatalogName interface{}
	// Labels for multi cluster app object (map)
	Labels interface{}
	// The multi cluster app answers (list)
	Members interface{}
	// The multi cluster app name (string)
	Name interface{}
	// The multi cluster app revision history limit. Default `10` (int)
	RevisionHistoryLimit interface{}
	// Current revision id for the multi cluster app (string)
	RevisionId interface{}
	// The multi cluster app roles (list)
	Roles interface{}
	// The multi cluster app target projects (list)
	Targets interface{}
	// The multi cluster app template name (string)
	TemplateName interface{}
	// The multi cluster app template version. Default: `latest` (string)
	TemplateVersion interface{}
	// The multi cluster app upgrade strategy (list MaxItems:1)
	UpgradeStrategy interface{}
	// Wait until the multi cluster app is active. Default `true` (bool)
	Wait interface{}
}
