// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Catalog struct {
	pulumi.CustomResourceState

	// Annotations of the resource
	Annotations pulumi.MapOutput       `pulumi:"annotations"`
	Branch      pulumi.StringPtrOutput `pulumi:"branch"`
	ClusterId   pulumi.StringPtrOutput `pulumi:"clusterId"`
	Description pulumi.StringPtrOutput `pulumi:"description"`
	Kind        pulumi.StringPtrOutput `pulumi:"kind"`
	// Labels of the resource
	Labels    pulumi.MapOutput       `pulumi:"labels"`
	Name      pulumi.StringOutput    `pulumi:"name"`
	Password  pulumi.StringPtrOutput `pulumi:"password"`
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	Refresh   pulumi.BoolPtrOutput   `pulumi:"refresh"`
	Scope     pulumi.StringPtrOutput `pulumi:"scope"`
	Url       pulumi.StringOutput    `pulumi:"url"`
	Username  pulumi.StringPtrOutput `pulumi:"username"`
	Version   pulumi.StringOutput    `pulumi:"version"`
}

// NewCatalog registers a new resource with the given unique name, arguments, and options.
func NewCatalog(ctx *pulumi.Context,
	name string, args *CatalogArgs, opts ...pulumi.ResourceOption) (*Catalog, error) {
	if args == nil || args.Url == nil {
		return nil, errors.New("missing required argument 'Url'")
	}
	if args == nil {
		args = &CatalogArgs{}
	}
	var resource Catalog
	err := ctx.RegisterResource("rancher2:index/catalog:Catalog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCatalog gets an existing Catalog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CatalogState, opts ...pulumi.ResourceOption) (*Catalog, error) {
	var resource Catalog
	err := ctx.ReadResource("rancher2:index/catalog:Catalog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Catalog resources.
type catalogState struct {
	// Annotations of the resource
	Annotations map[string]interface{} `pulumi:"annotations"`
	Branch      *string                `pulumi:"branch"`
	ClusterId   *string                `pulumi:"clusterId"`
	Description *string                `pulumi:"description"`
	Kind        *string                `pulumi:"kind"`
	// Labels of the resource
	Labels    map[string]interface{} `pulumi:"labels"`
	Name      *string                `pulumi:"name"`
	Password  *string                `pulumi:"password"`
	ProjectId *string                `pulumi:"projectId"`
	Refresh   *bool                  `pulumi:"refresh"`
	Scope     *string                `pulumi:"scope"`
	Url       *string                `pulumi:"url"`
	Username  *string                `pulumi:"username"`
	Version   *string                `pulumi:"version"`
}

type CatalogState struct {
	// Annotations of the resource
	Annotations pulumi.MapInput
	Branch      pulumi.StringPtrInput
	ClusterId   pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	Kind        pulumi.StringPtrInput
	// Labels of the resource
	Labels    pulumi.MapInput
	Name      pulumi.StringPtrInput
	Password  pulumi.StringPtrInput
	ProjectId pulumi.StringPtrInput
	Refresh   pulumi.BoolPtrInput
	Scope     pulumi.StringPtrInput
	Url       pulumi.StringPtrInput
	Username  pulumi.StringPtrInput
	Version   pulumi.StringPtrInput
}

func (CatalogState) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogState)(nil)).Elem()
}

type catalogArgs struct {
	// Annotations of the resource
	Annotations map[string]interface{} `pulumi:"annotations"`
	Branch      *string                `pulumi:"branch"`
	ClusterId   *string                `pulumi:"clusterId"`
	Description *string                `pulumi:"description"`
	Kind        *string                `pulumi:"kind"`
	// Labels of the resource
	Labels    map[string]interface{} `pulumi:"labels"`
	Name      *string                `pulumi:"name"`
	Password  *string                `pulumi:"password"`
	ProjectId *string                `pulumi:"projectId"`
	Refresh   *bool                  `pulumi:"refresh"`
	Scope     *string                `pulumi:"scope"`
	Url       string                 `pulumi:"url"`
	Username  *string                `pulumi:"username"`
	Version   *string                `pulumi:"version"`
}

// The set of arguments for constructing a Catalog resource.
type CatalogArgs struct {
	// Annotations of the resource
	Annotations pulumi.MapInput
	Branch      pulumi.StringPtrInput
	ClusterId   pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	Kind        pulumi.StringPtrInput
	// Labels of the resource
	Labels    pulumi.MapInput
	Name      pulumi.StringPtrInput
	Password  pulumi.StringPtrInput
	ProjectId pulumi.StringPtrInput
	Refresh   pulumi.BoolPtrInput
	Scope     pulumi.StringPtrInput
	Url       pulumi.StringInput
	Username  pulumi.StringPtrInput
	Version   pulumi.StringPtrInput
}

func (CatalogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogArgs)(nil)).Elem()
}
