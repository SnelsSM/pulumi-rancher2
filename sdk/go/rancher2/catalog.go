// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Rancher v2 Catalog resource. This can be used to create cluster, global and/or project catalogs for Rancher v2 environments and retrieve their information.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/catalog.html.markdown.
type Catalog struct {
	s *pulumi.ResourceState
}

// NewCatalog registers a new resource with the given unique name, arguments, and options.
func NewCatalog(ctx *pulumi.Context,
	name string, args *CatalogArgs, opts ...pulumi.ResourceOpt) (*Catalog, error) {
	if args == nil || args.Url == nil {
		return nil, errors.New("missing required argument 'Url'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["annotations"] = nil
		inputs["branch"] = nil
		inputs["clusterId"] = nil
		inputs["description"] = nil
		inputs["kind"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["password"] = nil
		inputs["projectId"] = nil
		inputs["scope"] = nil
		inputs["url"] = nil
		inputs["username"] = nil
	} else {
		inputs["annotations"] = args.Annotations
		inputs["branch"] = args.Branch
		inputs["clusterId"] = args.ClusterId
		inputs["description"] = args.Description
		inputs["kind"] = args.Kind
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["password"] = args.Password
		inputs["projectId"] = args.ProjectId
		inputs["scope"] = args.Scope
		inputs["url"] = args.Url
		inputs["username"] = args.Username
	}
	s, err := ctx.RegisterResource("rancher2:index/catalog:Catalog", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Catalog{s: s}, nil
}

// GetCatalog gets an existing Catalog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalog(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CatalogState, opts ...pulumi.ResourceOpt) (*Catalog, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["annotations"] = state.Annotations
		inputs["branch"] = state.Branch
		inputs["clusterId"] = state.ClusterId
		inputs["description"] = state.Description
		inputs["kind"] = state.Kind
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["password"] = state.Password
		inputs["projectId"] = state.ProjectId
		inputs["scope"] = state.Scope
		inputs["url"] = state.Url
		inputs["username"] = state.Username
	}
	s, err := ctx.ReadResource("rancher2:index/catalog:Catalog", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Catalog{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Catalog) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Catalog) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Annotations for the catalog (map)
func (r *Catalog) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// The branch of the catalog repo to use. Default `master` (string)
func (r *Catalog) Branch() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["branch"])
}

// The cluster id of the catalog. Mandatory if `scope = cluster` (string)
func (r *Catalog) ClusterId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterId"])
}

// A catalog description (string)
func (r *Catalog) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// The kind of the catalog. Just helm by the moment (string)
func (r *Catalog) Kind() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["kind"])
}

// Labels for the catalog (map)
func (r *Catalog) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// The name of the catalog (string)
func (r *Catalog) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The password to access the catalog if needed (string)
func (r *Catalog) Password() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["password"])
}

// The project id of the catalog. Mandatory if `scope = project` (string)
func (r *Catalog) ProjectId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["projectId"])
}

// The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
func (r *Catalog) Scope() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["scope"])
}

// The url of the catalog repo (string)
func (r *Catalog) Url() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["url"])
}

// The username to access the catalog if needed (string)
func (r *Catalog) Username() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["username"])
}

// Input properties used for looking up and filtering Catalog resources.
type CatalogState struct {
	// Annotations for the catalog (map)
	Annotations interface{}
	// The branch of the catalog repo to use. Default `master` (string)
	Branch interface{}
	// The cluster id of the catalog. Mandatory if `scope = cluster` (string)
	ClusterId interface{}
	// A catalog description (string)
	Description interface{}
	// The kind of the catalog. Just helm by the moment (string)
	Kind interface{}
	// Labels for the catalog (map)
	Labels interface{}
	// The name of the catalog (string)
	Name interface{}
	// The password to access the catalog if needed (string)
	Password interface{}
	// The project id of the catalog. Mandatory if `scope = project` (string)
	ProjectId interface{}
	// The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
	Scope interface{}
	// The url of the catalog repo (string)
	Url interface{}
	// The username to access the catalog if needed (string)
	Username interface{}
}

// The set of arguments for constructing a Catalog resource.
type CatalogArgs struct {
	// Annotations for the catalog (map)
	Annotations interface{}
	// The branch of the catalog repo to use. Default `master` (string)
	Branch interface{}
	// The cluster id of the catalog. Mandatory if `scope = cluster` (string)
	ClusterId interface{}
	// A catalog description (string)
	Description interface{}
	// The kind of the catalog. Just helm by the moment (string)
	Kind interface{}
	// Labels for the catalog (map)
	Labels interface{}
	// The name of the catalog (string)
	Name interface{}
	// The password to access the catalog if needed (string)
	Password interface{}
	// The project id of the catalog. Mandatory if `scope = project` (string)
	ProjectId interface{}
	// The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
	Scope interface{}
	// The url of the catalog repo (string)
	Url interface{}
	// The username to access the catalog if needed (string)
	Username interface{}
}
