// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Rancher v2 Cluster Driver resource. This can be used to create Cluster Driver for Rancher v2.2.x Kontainer Engine clusters and retrieve their information.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/cluster_driver.html.markdown.
type ClusterDriver struct {
	s *pulumi.ResourceState
}

// NewClusterDriver registers a new resource with the given unique name, arguments, and options.
func NewClusterDriver(ctx *pulumi.Context,
	name string, args *ClusterDriverArgs, opts ...pulumi.ResourceOpt) (*ClusterDriver, error) {
	if args == nil || args.Active == nil {
		return nil, errors.New("missing required argument 'Active'")
	}
	if args == nil || args.Builtin == nil {
		return nil, errors.New("missing required argument 'Builtin'")
	}
	if args == nil || args.Url == nil {
		return nil, errors.New("missing required argument 'Url'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["active"] = nil
		inputs["actualUrl"] = nil
		inputs["annotations"] = nil
		inputs["builtin"] = nil
		inputs["checksum"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["uiUrl"] = nil
		inputs["url"] = nil
		inputs["whitelistDomains"] = nil
	} else {
		inputs["active"] = args.Active
		inputs["actualUrl"] = args.ActualUrl
		inputs["annotations"] = args.Annotations
		inputs["builtin"] = args.Builtin
		inputs["checksum"] = args.Checksum
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["uiUrl"] = args.UiUrl
		inputs["url"] = args.Url
		inputs["whitelistDomains"] = args.WhitelistDomains
	}
	s, err := ctx.RegisterResource("rancher2:index/clusterDriver:ClusterDriver", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ClusterDriver{s: s}, nil
}

// GetClusterDriver gets an existing ClusterDriver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterDriver(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClusterDriverState, opts ...pulumi.ResourceOpt) (*ClusterDriver, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["active"] = state.Active
		inputs["actualUrl"] = state.ActualUrl
		inputs["annotations"] = state.Annotations
		inputs["builtin"] = state.Builtin
		inputs["checksum"] = state.Checksum
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["uiUrl"] = state.UiUrl
		inputs["url"] = state.Url
		inputs["whitelistDomains"] = state.WhitelistDomains
	}
	s, err := ctx.ReadResource("rancher2:index/clusterDriver:ClusterDriver", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ClusterDriver{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ClusterDriver) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ClusterDriver) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Specify the cluster driver state (bool)
func (r *ClusterDriver) Active() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["active"])
}

// Actual url of the cluster driver (string)
func (r *ClusterDriver) ActualUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["actualUrl"])
}

// Annotations of the resource (map)
func (r *ClusterDriver) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// Specify whether the cluster driver is an internal cluster driver or not (bool)
func (r *ClusterDriver) Builtin() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["builtin"])
}

// Verify that the downloaded driver matches the expected checksum (string)
func (r *ClusterDriver) Checksum() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["checksum"])
}

// Labels of the resource (map)
func (r *ClusterDriver) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// Name of the cluster driver (string)
func (r *ClusterDriver) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The URL to load for customized Add Clusters screen for this driver (string)
func (r *ClusterDriver) UiUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["uiUrl"])
}

// The URL to download the machine driver binary for 64-bit Linux (string)
func (r *ClusterDriver) Url() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["url"])
}

// Domains to whitelist for the ui (list)
func (r *ClusterDriver) WhitelistDomains() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["whitelistDomains"])
}

// Input properties used for looking up and filtering ClusterDriver resources.
type ClusterDriverState struct {
	// Specify the cluster driver state (bool)
	Active interface{}
	// Actual url of the cluster driver (string)
	ActualUrl interface{}
	// Annotations of the resource (map)
	Annotations interface{}
	// Specify whether the cluster driver is an internal cluster driver or not (bool)
	Builtin interface{}
	// Verify that the downloaded driver matches the expected checksum (string)
	Checksum interface{}
	// Labels of the resource (map)
	Labels interface{}
	// Name of the cluster driver (string)
	Name interface{}
	// The URL to load for customized Add Clusters screen for this driver (string)
	UiUrl interface{}
	// The URL to download the machine driver binary for 64-bit Linux (string)
	Url interface{}
	// Domains to whitelist for the ui (list)
	WhitelistDomains interface{}
}

// The set of arguments for constructing a ClusterDriver resource.
type ClusterDriverArgs struct {
	// Specify the cluster driver state (bool)
	Active interface{}
	// Actual url of the cluster driver (string)
	ActualUrl interface{}
	// Annotations of the resource (map)
	Annotations interface{}
	// Specify whether the cluster driver is an internal cluster driver or not (bool)
	Builtin interface{}
	// Verify that the downloaded driver matches the expected checksum (string)
	Checksum interface{}
	// Labels of the resource (map)
	Labels interface{}
	// Name of the cluster driver (string)
	Name interface{}
	// The URL to load for customized Add Clusters screen for this driver (string)
	UiUrl interface{}
	// The URL to download the machine driver binary for 64-bit Linux (string)
	Url interface{}
	// Domains to whitelist for the ui (list)
	WhitelistDomains interface{}
}
