// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Rancher v2 Token resource. This can be used to create Tokens for Rancher v2 provider user and retrieve their information.
// 
// There are 2 kind of tokens:
// - no scoped: valid for global system.
// - scoped: valid for just a specific cluster (`clusterId` should be provided).
// 
// Tokens can't be updated once created. Any diff in token data will recreate the token. If any token expire, Rancher2 provider will generate a diff to regenerate it.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/token.html.markdown.
type Token struct {
	s *pulumi.ResourceState
}

// NewToken registers a new resource with the given unique name, arguments, and options.
func NewToken(ctx *pulumi.Context,
	name string, args *TokenArgs, opts ...pulumi.ResourceOpt) (*Token, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["annotations"] = nil
		inputs["clusterId"] = nil
		inputs["description"] = nil
		inputs["labels"] = nil
		inputs["renew"] = nil
		inputs["ttl"] = nil
	} else {
		inputs["annotations"] = args.Annotations
		inputs["clusterId"] = args.ClusterId
		inputs["description"] = args.Description
		inputs["labels"] = args.Labels
		inputs["renew"] = args.Renew
		inputs["ttl"] = args.Ttl
	}
	inputs["accessKey"] = nil
	inputs["enabled"] = nil
	inputs["expired"] = nil
	inputs["name"] = nil
	inputs["secretKey"] = nil
	inputs["token"] = nil
	inputs["userId"] = nil
	s, err := ctx.RegisterResource("rancher2:index/token:Token", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Token{s: s}, nil
}

// GetToken gets an existing Token resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetToken(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TokenState, opts ...pulumi.ResourceOpt) (*Token, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessKey"] = state.AccessKey
		inputs["annotations"] = state.Annotations
		inputs["clusterId"] = state.ClusterId
		inputs["description"] = state.Description
		inputs["enabled"] = state.Enabled
		inputs["expired"] = state.Expired
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["renew"] = state.Renew
		inputs["secretKey"] = state.SecretKey
		inputs["token"] = state.Token
		inputs["ttl"] = state.Ttl
		inputs["userId"] = state.UserId
	}
	s, err := ctx.ReadResource("rancher2:index/token:Token", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Token{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Token) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Token) ID() pulumi.IDOutput {
	return r.s.ID()
}

// (Computed) Token access key part (string)
func (r *Token) AccessKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accessKey"])
}

// Annotations of the token (map)
func (r *Token) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// Cluster ID for scoped token (string)
func (r *Token) ClusterId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterId"])
}

// Token description (string)
func (r *Token) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// (Computed) Token is enabled (bool)
func (r *Token) Enabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enabled"])
}

// (Computed) Token is expired (bool)
func (r *Token) Expired() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["expired"])
}

// Labels of the token (map)
func (r *Token) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// (Computed) Token name (string)
func (r *Token) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Renew expired or disabled token
func (r *Token) Renew() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["renew"])
}

// (Computed/Sensitive) Token secret key part (string)
func (r *Token) SecretKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["secretKey"])
}

// (Computed/Sensitive) Token value (string)
func (r *Token) Token() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["token"])
}

// Token time to live in seconds. Default `0` (int)
func (r *Token) Ttl() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["ttl"])
}

// (Computed) Token user ID (string)
func (r *Token) UserId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userId"])
}

// Input properties used for looking up and filtering Token resources.
type TokenState struct {
	// (Computed) Token access key part (string)
	AccessKey interface{}
	// Annotations of the token (map)
	Annotations interface{}
	// Cluster ID for scoped token (string)
	ClusterId interface{}
	// Token description (string)
	Description interface{}
	// (Computed) Token is enabled (bool)
	Enabled interface{}
	// (Computed) Token is expired (bool)
	Expired interface{}
	// Labels of the token (map)
	Labels interface{}
	// (Computed) Token name (string)
	Name interface{}
	// Renew expired or disabled token
	Renew interface{}
	// (Computed/Sensitive) Token secret key part (string)
	SecretKey interface{}
	// (Computed/Sensitive) Token value (string)
	Token interface{}
	// Token time to live in seconds. Default `0` (int)
	Ttl interface{}
	// (Computed) Token user ID (string)
	UserId interface{}
}

// The set of arguments for constructing a Token resource.
type TokenArgs struct {
	// Annotations of the token (map)
	Annotations interface{}
	// Cluster ID for scoped token (string)
	ClusterId interface{}
	// Token description (string)
	Description interface{}
	// Labels of the token (map)
	Labels interface{}
	// Renew expired or disabled token
	Renew interface{}
	// Token time to live in seconds. Default `0` (int)
	Ttl interface{}
}
