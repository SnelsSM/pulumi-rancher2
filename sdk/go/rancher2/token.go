// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Token struct {
	pulumi.CustomResourceState

	// Token access key
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// Annotations of the resource
	Annotations pulumi.MapOutput `pulumi:"annotations"`
	// Cluster ID for scoped token
	ClusterId pulumi.StringPtrOutput `pulumi:"clusterId"`
	// Token description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Token enabled
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Token expired
	Expired pulumi.BoolOutput `pulumi:"expired"`
	// Labels of the resource
	Labels pulumi.MapOutput `pulumi:"labels"`
	// Token name
	Name pulumi.StringOutput `pulumi:"name"`
	// Renew expired or disabled token
	Renew pulumi.BoolPtrOutput `pulumi:"renew"`
	// Token secret key
	SecretKey pulumi.StringOutput `pulumi:"secretKey"`
	// Token value
	Token pulumi.StringOutput `pulumi:"token"`
	// Token time to live in seconds
	Ttl pulumi.IntPtrOutput `pulumi:"ttl"`
	// Token user ID
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewToken registers a new resource with the given unique name, arguments, and options.
func NewToken(ctx *pulumi.Context,
	name string, args *TokenArgs, opts ...pulumi.ResourceOption) (*Token, error) {
	if args == nil {
		args = &TokenArgs{}
	}
	var resource Token
	err := ctx.RegisterResource("rancher2:index/token:Token", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetToken gets an existing Token resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TokenState, opts ...pulumi.ResourceOption) (*Token, error) {
	var resource Token
	err := ctx.ReadResource("rancher2:index/token:Token", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Token resources.
type tokenState struct {
	// Token access key
	AccessKey *string `pulumi:"accessKey"`
	// Annotations of the resource
	Annotations map[string]interface{} `pulumi:"annotations"`
	// Cluster ID for scoped token
	ClusterId *string `pulumi:"clusterId"`
	// Token description
	Description *string `pulumi:"description"`
	// Token enabled
	Enabled *bool `pulumi:"enabled"`
	// Token expired
	Expired *bool `pulumi:"expired"`
	// Labels of the resource
	Labels map[string]interface{} `pulumi:"labels"`
	// Token name
	Name *string `pulumi:"name"`
	// Renew expired or disabled token
	Renew *bool `pulumi:"renew"`
	// Token secret key
	SecretKey *string `pulumi:"secretKey"`
	// Token value
	Token *string `pulumi:"token"`
	// Token time to live in seconds
	Ttl *int `pulumi:"ttl"`
	// Token user ID
	UserId *string `pulumi:"userId"`
}

type TokenState struct {
	// Token access key
	AccessKey pulumi.StringPtrInput
	// Annotations of the resource
	Annotations pulumi.MapInput
	// Cluster ID for scoped token
	ClusterId pulumi.StringPtrInput
	// Token description
	Description pulumi.StringPtrInput
	// Token enabled
	Enabled pulumi.BoolPtrInput
	// Token expired
	Expired pulumi.BoolPtrInput
	// Labels of the resource
	Labels pulumi.MapInput
	// Token name
	Name pulumi.StringPtrInput
	// Renew expired or disabled token
	Renew pulumi.BoolPtrInput
	// Token secret key
	SecretKey pulumi.StringPtrInput
	// Token value
	Token pulumi.StringPtrInput
	// Token time to live in seconds
	Ttl pulumi.IntPtrInput
	// Token user ID
	UserId pulumi.StringPtrInput
}

func (TokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*tokenState)(nil)).Elem()
}

type tokenArgs struct {
	// Annotations of the resource
	Annotations map[string]interface{} `pulumi:"annotations"`
	// Cluster ID for scoped token
	ClusterId *string `pulumi:"clusterId"`
	// Token description
	Description *string `pulumi:"description"`
	// Labels of the resource
	Labels map[string]interface{} `pulumi:"labels"`
	// Renew expired or disabled token
	Renew *bool `pulumi:"renew"`
	// Token time to live in seconds
	Ttl *int `pulumi:"ttl"`
}

// The set of arguments for constructing a Token resource.
type TokenArgs struct {
	// Annotations of the resource
	Annotations pulumi.MapInput
	// Cluster ID for scoped token
	ClusterId pulumi.StringPtrInput
	// Token description
	Description pulumi.StringPtrInput
	// Labels of the resource
	Labels pulumi.MapInput
	// Renew expired or disabled token
	Renew pulumi.BoolPtrInput
	// Token time to live in seconds
	Ttl pulumi.IntPtrInput
}

func (TokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tokenArgs)(nil)).Elem()
}
