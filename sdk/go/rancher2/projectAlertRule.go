// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Rancher v2 Project Alert Rule resource. This can be used to create Project Alert Rule for Rancher v2 environments and retrieve their information.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/project_alert_rule.html.markdown.
type ProjectAlertRule struct {
	s *pulumi.ResourceState
}

// NewProjectAlertRule registers a new resource with the given unique name, arguments, and options.
func NewProjectAlertRule(ctx *pulumi.Context,
	name string, args *ProjectAlertRuleArgs, opts ...pulumi.ResourceOpt) (*ProjectAlertRule, error) {
	if args == nil || args.GroupId == nil {
		return nil, errors.New("missing required argument 'GroupId'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["annotations"] = nil
		inputs["groupId"] = nil
		inputs["groupIntervalSeconds"] = nil
		inputs["groupWaitSeconds"] = nil
		inputs["inherited"] = nil
		inputs["labels"] = nil
		inputs["metricRule"] = nil
		inputs["name"] = nil
		inputs["podRule"] = nil
		inputs["projectId"] = nil
		inputs["repeatIntervalSeconds"] = nil
		inputs["severity"] = nil
		inputs["workloadRule"] = nil
	} else {
		inputs["annotations"] = args.Annotations
		inputs["groupId"] = args.GroupId
		inputs["groupIntervalSeconds"] = args.GroupIntervalSeconds
		inputs["groupWaitSeconds"] = args.GroupWaitSeconds
		inputs["inherited"] = args.Inherited
		inputs["labels"] = args.Labels
		inputs["metricRule"] = args.MetricRule
		inputs["name"] = args.Name
		inputs["podRule"] = args.PodRule
		inputs["projectId"] = args.ProjectId
		inputs["repeatIntervalSeconds"] = args.RepeatIntervalSeconds
		inputs["severity"] = args.Severity
		inputs["workloadRule"] = args.WorkloadRule
	}
	s, err := ctx.RegisterResource("rancher2:index/projectAlertRule:ProjectAlertRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectAlertRule{s: s}, nil
}

// GetProjectAlertRule gets an existing ProjectAlertRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectAlertRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProjectAlertRuleState, opts ...pulumi.ResourceOpt) (*ProjectAlertRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["annotations"] = state.Annotations
		inputs["groupId"] = state.GroupId
		inputs["groupIntervalSeconds"] = state.GroupIntervalSeconds
		inputs["groupWaitSeconds"] = state.GroupWaitSeconds
		inputs["inherited"] = state.Inherited
		inputs["labels"] = state.Labels
		inputs["metricRule"] = state.MetricRule
		inputs["name"] = state.Name
		inputs["podRule"] = state.PodRule
		inputs["projectId"] = state.ProjectId
		inputs["repeatIntervalSeconds"] = state.RepeatIntervalSeconds
		inputs["severity"] = state.Severity
		inputs["workloadRule"] = state.WorkloadRule
	}
	s, err := ctx.ReadResource("rancher2:index/projectAlertRule:ProjectAlertRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectAlertRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProjectAlertRule) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProjectAlertRule) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The project alert rule annotations (map)
func (r *ProjectAlertRule) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// The project alert rule alert group ID (string)
func (r *ProjectAlertRule) GroupId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupId"])
}

// The project alert rule group interval seconds. Default: `180` (int)
func (r *ProjectAlertRule) GroupIntervalSeconds() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["groupIntervalSeconds"])
}

// The project alert rule group wait seconds. Default: `180` (int)
func (r *ProjectAlertRule) GroupWaitSeconds() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["groupWaitSeconds"])
}

// The project alert rule inherited. Default: `true` (bool)
func (r *ProjectAlertRule) Inherited() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["inherited"])
}

// The project alert rule labels (map)
func (r *ProjectAlertRule) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// The project alert rule metric rule. ConflictsWith: `"podRule", "workloadRule"`` (list Maxitems:1)
func (r *ProjectAlertRule) MetricRule() pulumi.Output {
	return r.s.State["metricRule"]
}

// The project alert rule name (string)
func (r *ProjectAlertRule) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The project alert rule pod rule. ConflictsWith: `"metricRule", "workloadRule"`` (list Maxitems:1)
func (r *ProjectAlertRule) PodRule() pulumi.Output {
	return r.s.State["podRule"]
}

// The project id where create project alert rule (string)
func (r *ProjectAlertRule) ProjectId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["projectId"])
}

// The project alert rule wait seconds. Default: `3600` (int)
func (r *ProjectAlertRule) RepeatIntervalSeconds() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["repeatIntervalSeconds"])
}

// The project alert rule severity. Supported values : `"critical" | "info" | "warning"`. Default: `critical` (string)
func (r *ProjectAlertRule) Severity() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["severity"])
}

// The project alert rule workload rule. ConflictsWith: `"metricRule", "podRule"`` (list Maxitems:1)
func (r *ProjectAlertRule) WorkloadRule() pulumi.Output {
	return r.s.State["workloadRule"]
}

// Input properties used for looking up and filtering ProjectAlertRule resources.
type ProjectAlertRuleState struct {
	// The project alert rule annotations (map)
	Annotations interface{}
	// The project alert rule alert group ID (string)
	GroupId interface{}
	// The project alert rule group interval seconds. Default: `180` (int)
	GroupIntervalSeconds interface{}
	// The project alert rule group wait seconds. Default: `180` (int)
	GroupWaitSeconds interface{}
	// The project alert rule inherited. Default: `true` (bool)
	Inherited interface{}
	// The project alert rule labels (map)
	Labels interface{}
	// The project alert rule metric rule. ConflictsWith: `"podRule", "workloadRule"`` (list Maxitems:1)
	MetricRule interface{}
	// The project alert rule name (string)
	Name interface{}
	// The project alert rule pod rule. ConflictsWith: `"metricRule", "workloadRule"`` (list Maxitems:1)
	PodRule interface{}
	// The project id where create project alert rule (string)
	ProjectId interface{}
	// The project alert rule wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds interface{}
	// The project alert rule severity. Supported values : `"critical" | "info" | "warning"`. Default: `critical` (string)
	Severity interface{}
	// The project alert rule workload rule. ConflictsWith: `"metricRule", "podRule"`` (list Maxitems:1)
	WorkloadRule interface{}
}

// The set of arguments for constructing a ProjectAlertRule resource.
type ProjectAlertRuleArgs struct {
	// The project alert rule annotations (map)
	Annotations interface{}
	// The project alert rule alert group ID (string)
	GroupId interface{}
	// The project alert rule group interval seconds. Default: `180` (int)
	GroupIntervalSeconds interface{}
	// The project alert rule group wait seconds. Default: `180` (int)
	GroupWaitSeconds interface{}
	// The project alert rule inherited. Default: `true` (bool)
	Inherited interface{}
	// The project alert rule labels (map)
	Labels interface{}
	// The project alert rule metric rule. ConflictsWith: `"podRule", "workloadRule"`` (list Maxitems:1)
	MetricRule interface{}
	// The project alert rule name (string)
	Name interface{}
	// The project alert rule pod rule. ConflictsWith: `"metricRule", "workloadRule"`` (list Maxitems:1)
	PodRule interface{}
	// The project id where create project alert rule (string)
	ProjectId interface{}
	// The project alert rule wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds interface{}
	// The project alert rule severity. Supported values : `"critical" | "info" | "warning"`. Default: `critical` (string)
	Severity interface{}
	// The project alert rule workload rule. ConflictsWith: `"metricRule", "podRule"`` (list Maxitems:1)
	WorkloadRule interface{}
}
