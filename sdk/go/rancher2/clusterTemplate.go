// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Rancher v2 Cluster Template resource. This can be used to create Cluster Templates for Rancher v2 RKE clusters and retrieve their information. 
// 
// Cluster Templates are available from Rancher v2.3.x and above.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/cluster_template.html.markdown.
type ClusterTemplate struct {
	s *pulumi.ResourceState
}

// NewClusterTemplate registers a new resource with the given unique name, arguments, and options.
func NewClusterTemplate(ctx *pulumi.Context,
	name string, args *ClusterTemplateArgs, opts ...pulumi.ResourceOpt) (*ClusterTemplate, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["annotations"] = nil
		inputs["description"] = nil
		inputs["labels"] = nil
		inputs["members"] = nil
		inputs["name"] = nil
		inputs["templateRevisions"] = nil
	} else {
		inputs["annotations"] = args.Annotations
		inputs["description"] = args.Description
		inputs["labels"] = args.Labels
		inputs["members"] = args.Members
		inputs["name"] = args.Name
		inputs["templateRevisions"] = args.TemplateRevisions
	}
	inputs["defaultRevisionId"] = nil
	s, err := ctx.RegisterResource("rancher2:index/clusterTemplate:ClusterTemplate", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ClusterTemplate{s: s}, nil
}

// GetClusterTemplate gets an existing ClusterTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterTemplate(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClusterTemplateState, opts ...pulumi.ResourceOpt) (*ClusterTemplate, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["annotations"] = state.Annotations
		inputs["defaultRevisionId"] = state.DefaultRevisionId
		inputs["description"] = state.Description
		inputs["labels"] = state.Labels
		inputs["members"] = state.Members
		inputs["name"] = state.Name
		inputs["templateRevisions"] = state.TemplateRevisions
	}
	s, err := ctx.ReadResource("rancher2:index/clusterTemplate:ClusterTemplate", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ClusterTemplate{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ClusterTemplate) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ClusterTemplate) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Annotations for the cluster template revision (map)
func (r *ClusterTemplate) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// (Computed) Default cluster template revision ID (string)
func (r *ClusterTemplate) DefaultRevisionId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["defaultRevisionId"])
}

// Cluster template description
func (r *ClusterTemplate) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Labels for the cluster template revision (map)
func (r *ClusterTemplate) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// Cluster template members (list)
func (r *ClusterTemplate) Members() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["members"])
}

// The cluster template revision name (string)
func (r *ClusterTemplate) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Cluster template revisions (list)
func (r *ClusterTemplate) TemplateRevisions() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["templateRevisions"])
}

// Input properties used for looking up and filtering ClusterTemplate resources.
type ClusterTemplateState struct {
	// Annotations for the cluster template revision (map)
	Annotations interface{}
	// (Computed) Default cluster template revision ID (string)
	DefaultRevisionId interface{}
	// Cluster template description
	Description interface{}
	// Labels for the cluster template revision (map)
	Labels interface{}
	// Cluster template members (list)
	Members interface{}
	// The cluster template revision name (string)
	Name interface{}
	// Cluster template revisions (list)
	TemplateRevisions interface{}
}

// The set of arguments for constructing a ClusterTemplate resource.
type ClusterTemplateArgs struct {
	// Annotations for the cluster template revision (map)
	Annotations interface{}
	// Cluster template description
	Description interface{}
	// Labels for the cluster template revision (map)
	Labels interface{}
	// Cluster template members (list)
	Members interface{}
	// The cluster template revision name (string)
	Name interface{}
	// Cluster template revisions (list)
	TemplateRevisions interface{}
}
