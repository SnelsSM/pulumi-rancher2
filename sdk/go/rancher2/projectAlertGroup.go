// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Rancher v2 Project Alert Group resource. This can be used to create Project Alert Group for Rancher v2 environments and retrieve their information.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/project_alert_group.html.markdown.
type ProjectAlertGroup struct {
	s *pulumi.ResourceState
}

// NewProjectAlertGroup registers a new resource with the given unique name, arguments, and options.
func NewProjectAlertGroup(ctx *pulumi.Context,
	name string, args *ProjectAlertGroupArgs, opts ...pulumi.ResourceOpt) (*ProjectAlertGroup, error) {
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["annotations"] = nil
		inputs["description"] = nil
		inputs["groupIntervalSeconds"] = nil
		inputs["groupWaitSeconds"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["projectId"] = nil
		inputs["recipients"] = nil
		inputs["repeatIntervalSeconds"] = nil
	} else {
		inputs["annotations"] = args.Annotations
		inputs["description"] = args.Description
		inputs["groupIntervalSeconds"] = args.GroupIntervalSeconds
		inputs["groupWaitSeconds"] = args.GroupWaitSeconds
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["projectId"] = args.ProjectId
		inputs["recipients"] = args.Recipients
		inputs["repeatIntervalSeconds"] = args.RepeatIntervalSeconds
	}
	s, err := ctx.RegisterResource("rancher2:index/projectAlertGroup:ProjectAlertGroup", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectAlertGroup{s: s}, nil
}

// GetProjectAlertGroup gets an existing ProjectAlertGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectAlertGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProjectAlertGroupState, opts ...pulumi.ResourceOpt) (*ProjectAlertGroup, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["annotations"] = state.Annotations
		inputs["description"] = state.Description
		inputs["groupIntervalSeconds"] = state.GroupIntervalSeconds
		inputs["groupWaitSeconds"] = state.GroupWaitSeconds
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["projectId"] = state.ProjectId
		inputs["recipients"] = state.Recipients
		inputs["repeatIntervalSeconds"] = state.RepeatIntervalSeconds
	}
	s, err := ctx.ReadResource("rancher2:index/projectAlertGroup:ProjectAlertGroup", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectAlertGroup{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProjectAlertGroup) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProjectAlertGroup) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The project alert group annotations (map)
func (r *ProjectAlertGroup) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// The project alert group description (string)
func (r *ProjectAlertGroup) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// The project alert group interval seconds. Default: `180` (int)
func (r *ProjectAlertGroup) GroupIntervalSeconds() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["groupIntervalSeconds"])
}

// The project alert group wait seconds. Default: `180` (int)
func (r *ProjectAlertGroup) GroupWaitSeconds() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["groupWaitSeconds"])
}

// The project alert group labels (map)
func (r *ProjectAlertGroup) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// The project alert group name (string)
func (r *ProjectAlertGroup) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The project id where create project alert group (string)
func (r *ProjectAlertGroup) ProjectId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["projectId"])
}

// The project alert group recipients (list)
func (r *ProjectAlertGroup) Recipients() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["recipients"])
}

// The project alert group wait seconds. Default: `3600` (int)
func (r *ProjectAlertGroup) RepeatIntervalSeconds() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["repeatIntervalSeconds"])
}

// Input properties used for looking up and filtering ProjectAlertGroup resources.
type ProjectAlertGroupState struct {
	// The project alert group annotations (map)
	Annotations interface{}
	// The project alert group description (string)
	Description interface{}
	// The project alert group interval seconds. Default: `180` (int)
	GroupIntervalSeconds interface{}
	// The project alert group wait seconds. Default: `180` (int)
	GroupWaitSeconds interface{}
	// The project alert group labels (map)
	Labels interface{}
	// The project alert group name (string)
	Name interface{}
	// The project id where create project alert group (string)
	ProjectId interface{}
	// The project alert group recipients (list)
	Recipients interface{}
	// The project alert group wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds interface{}
}

// The set of arguments for constructing a ProjectAlertGroup resource.
type ProjectAlertGroupArgs struct {
	// The project alert group annotations (map)
	Annotations interface{}
	// The project alert group description (string)
	Description interface{}
	// The project alert group interval seconds. Default: `180` (int)
	GroupIntervalSeconds interface{}
	// The project alert group wait seconds. Default: `180` (int)
	GroupWaitSeconds interface{}
	// The project alert group labels (map)
	Labels interface{}
	// The project alert group name (string)
	Name interface{}
	// The project id where create project alert group (string)
	ProjectId interface{}
	// The project alert group recipients (list)
	Recipients interface{}
	// The project alert group wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds interface{}
}
