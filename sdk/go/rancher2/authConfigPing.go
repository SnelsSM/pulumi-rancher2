// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Rancher v2 Auth Config Ping resource. This can be used to configure and enable Auth Config Ping for Rancher v2 RKE clusters and retrieve their information.
// 
// In addition to the built-in local auth, only one external auth config provider can be enabled at a time.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/auth_config_ping.html.markdown.
type AuthConfigPing struct {
	s *pulumi.ResourceState
}

// NewAuthConfigPing registers a new resource with the given unique name, arguments, and options.
func NewAuthConfigPing(ctx *pulumi.Context,
	name string, args *AuthConfigPingArgs, opts ...pulumi.ResourceOpt) (*AuthConfigPing, error) {
	if args == nil || args.DisplayNameField == nil {
		return nil, errors.New("missing required argument 'DisplayNameField'")
	}
	if args == nil || args.GroupsField == nil {
		return nil, errors.New("missing required argument 'GroupsField'")
	}
	if args == nil || args.IdpMetadataContent == nil {
		return nil, errors.New("missing required argument 'IdpMetadataContent'")
	}
	if args == nil || args.RancherApiHost == nil {
		return nil, errors.New("missing required argument 'RancherApiHost'")
	}
	if args == nil || args.SpCert == nil {
		return nil, errors.New("missing required argument 'SpCert'")
	}
	if args == nil || args.SpKey == nil {
		return nil, errors.New("missing required argument 'SpKey'")
	}
	if args == nil || args.UidField == nil {
		return nil, errors.New("missing required argument 'UidField'")
	}
	if args == nil || args.UserNameField == nil {
		return nil, errors.New("missing required argument 'UserNameField'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessMode"] = nil
		inputs["allowedPrincipalIds"] = nil
		inputs["annotations"] = nil
		inputs["displayNameField"] = nil
		inputs["enabled"] = nil
		inputs["groupsField"] = nil
		inputs["idpMetadataContent"] = nil
		inputs["labels"] = nil
		inputs["rancherApiHost"] = nil
		inputs["spCert"] = nil
		inputs["spKey"] = nil
		inputs["uidField"] = nil
		inputs["userNameField"] = nil
	} else {
		inputs["accessMode"] = args.AccessMode
		inputs["allowedPrincipalIds"] = args.AllowedPrincipalIds
		inputs["annotations"] = args.Annotations
		inputs["displayNameField"] = args.DisplayNameField
		inputs["enabled"] = args.Enabled
		inputs["groupsField"] = args.GroupsField
		inputs["idpMetadataContent"] = args.IdpMetadataContent
		inputs["labels"] = args.Labels
		inputs["rancherApiHost"] = args.RancherApiHost
		inputs["spCert"] = args.SpCert
		inputs["spKey"] = args.SpKey
		inputs["uidField"] = args.UidField
		inputs["userNameField"] = args.UserNameField
	}
	inputs["name"] = nil
	inputs["type"] = nil
	s, err := ctx.RegisterResource("rancher2:index/authConfigPing:AuthConfigPing", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthConfigPing{s: s}, nil
}

// GetAuthConfigPing gets an existing AuthConfigPing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthConfigPing(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AuthConfigPingState, opts ...pulumi.ResourceOpt) (*AuthConfigPing, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessMode"] = state.AccessMode
		inputs["allowedPrincipalIds"] = state.AllowedPrincipalIds
		inputs["annotations"] = state.Annotations
		inputs["displayNameField"] = state.DisplayNameField
		inputs["enabled"] = state.Enabled
		inputs["groupsField"] = state.GroupsField
		inputs["idpMetadataContent"] = state.IdpMetadataContent
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["rancherApiHost"] = state.RancherApiHost
		inputs["spCert"] = state.SpCert
		inputs["spKey"] = state.SpKey
		inputs["type"] = state.Type
		inputs["uidField"] = state.UidField
		inputs["userNameField"] = state.UserNameField
	}
	s, err := ctx.ReadResource("rancher2:index/authConfigPing:AuthConfigPing", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthConfigPing{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AuthConfigPing) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AuthConfigPing) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
func (r *AuthConfigPing) AccessMode() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accessMode"])
}

// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `ping_user://<USER_ID>`  `ping_group://<GROUP_ID>` (list)
func (r *AuthConfigPing) AllowedPrincipalIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["allowedPrincipalIds"])
}

// Annotations of the resource (map)
func (r *AuthConfigPing) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// Ping display name field (string)
func (r *AuthConfigPing) DisplayNameField() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["displayNameField"])
}

// Enable auth config provider. Default `true` (bool)
func (r *AuthConfigPing) Enabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enabled"])
}

// Ping group field (string)
func (r *AuthConfigPing) GroupsField() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupsField"])
}

// Ping IDP metadata content (string)
func (r *AuthConfigPing) IdpMetadataContent() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["idpMetadataContent"])
}

// Labels of the resource (map)
func (r *AuthConfigPing) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// (Computed) The name of the resource (string)
func (r *AuthConfigPing) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Rancher url. Schema needs to be specified, `https://<RANCHER_API_HOST>` (string)
func (r *AuthConfigPing) RancherApiHost() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["rancherApiHost"])
}

// Ping SP cert (string)
func (r *AuthConfigPing) SpCert() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["spCert"])
}

// Ping SP key (string)
func (r *AuthConfigPing) SpKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["spKey"])
}

// (Computed) The type of the resource (string)
func (r *AuthConfigPing) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// Ping UID field (string)
func (r *AuthConfigPing) UidField() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["uidField"])
}

// Ping user name field (string)
func (r *AuthConfigPing) UserNameField() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userNameField"])
}

// Input properties used for looking up and filtering AuthConfigPing resources.
type AuthConfigPingState struct {
	// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
	AccessMode interface{}
	// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `ping_user://<USER_ID>`  `ping_group://<GROUP_ID>` (list)
	AllowedPrincipalIds interface{}
	// Annotations of the resource (map)
	Annotations interface{}
	// Ping display name field (string)
	DisplayNameField interface{}
	// Enable auth config provider. Default `true` (bool)
	Enabled interface{}
	// Ping group field (string)
	GroupsField interface{}
	// Ping IDP metadata content (string)
	IdpMetadataContent interface{}
	// Labels of the resource (map)
	Labels interface{}
	// (Computed) The name of the resource (string)
	Name interface{}
	// Rancher url. Schema needs to be specified, `https://<RANCHER_API_HOST>` (string)
	RancherApiHost interface{}
	// Ping SP cert (string)
	SpCert interface{}
	// Ping SP key (string)
	SpKey interface{}
	// (Computed) The type of the resource (string)
	Type interface{}
	// Ping UID field (string)
	UidField interface{}
	// Ping user name field (string)
	UserNameField interface{}
}

// The set of arguments for constructing a AuthConfigPing resource.
type AuthConfigPingArgs struct {
	// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
	AccessMode interface{}
	// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `ping_user://<USER_ID>`  `ping_group://<GROUP_ID>` (list)
	AllowedPrincipalIds interface{}
	// Annotations of the resource (map)
	Annotations interface{}
	// Ping display name field (string)
	DisplayNameField interface{}
	// Enable auth config provider. Default `true` (bool)
	Enabled interface{}
	// Ping group field (string)
	GroupsField interface{}
	// Ping IDP metadata content (string)
	IdpMetadataContent interface{}
	// Labels of the resource (map)
	Labels interface{}
	// Rancher url. Schema needs to be specified, `https://<RANCHER_API_HOST>` (string)
	RancherApiHost interface{}
	// Ping SP cert (string)
	SpCert interface{}
	// Ping SP key (string)
	SpKey interface{}
	// Ping UID field (string)
	UidField interface{}
	// Ping user name field (string)
	UserNameField interface{}
}
