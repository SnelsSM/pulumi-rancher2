// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ClusterLogging struct {
	pulumi.CustomResourceState

	// Annotations of the resource
	Annotations         pulumi.MapOutput                           `pulumi:"annotations"`
	ClusterId           pulumi.StringOutput                        `pulumi:"clusterId"`
	CustomTargetConfig  ClusterLoggingCustomTargetConfigPtrOutput  `pulumi:"customTargetConfig"`
	ElasticsearchConfig ClusterLoggingElasticsearchConfigPtrOutput `pulumi:"elasticsearchConfig"`
	// Optional enable json log parsing
	EnableJsonParsing pulumi.BoolPtrOutput                 `pulumi:"enableJsonParsing"`
	FluentdConfig     ClusterLoggingFluentdConfigPtrOutput `pulumi:"fluentdConfig"`
	KafkaConfig       ClusterLoggingKafkaConfigPtrOutput   `pulumi:"kafkaConfig"`
	Kind              pulumi.StringOutput                  `pulumi:"kind"`
	// Labels of the resource
	Labels              pulumi.MapOutput                    `pulumi:"labels"`
	Name                pulumi.StringOutput                 `pulumi:"name"`
	NamespaceId         pulumi.StringPtrOutput              `pulumi:"namespaceId"`
	OutputFlushInterval pulumi.IntPtrOutput                 `pulumi:"outputFlushInterval"`
	OutputTags          pulumi.MapOutput                    `pulumi:"outputTags"`
	SplunkConfig        ClusterLoggingSplunkConfigPtrOutput `pulumi:"splunkConfig"`
	SyslogConfig        ClusterLoggingSyslogConfigPtrOutput `pulumi:"syslogConfig"`
}

// NewClusterLogging registers a new resource with the given unique name, arguments, and options.
func NewClusterLogging(ctx *pulumi.Context,
	name string, args *ClusterLoggingArgs, opts ...pulumi.ResourceOption) (*ClusterLogging, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	if args == nil || args.Kind == nil {
		return nil, errors.New("missing required argument 'Kind'")
	}
	if args == nil {
		args = &ClusterLoggingArgs{}
	}
	var resource ClusterLogging
	err := ctx.RegisterResource("rancher2:index/clusterLogging:ClusterLogging", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterLogging gets an existing ClusterLogging resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterLogging(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterLoggingState, opts ...pulumi.ResourceOption) (*ClusterLogging, error) {
	var resource ClusterLogging
	err := ctx.ReadResource("rancher2:index/clusterLogging:ClusterLogging", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterLogging resources.
type clusterLoggingState struct {
	// Annotations of the resource
	Annotations         map[string]interface{}             `pulumi:"annotations"`
	ClusterId           *string                            `pulumi:"clusterId"`
	CustomTargetConfig  *ClusterLoggingCustomTargetConfig  `pulumi:"customTargetConfig"`
	ElasticsearchConfig *ClusterLoggingElasticsearchConfig `pulumi:"elasticsearchConfig"`
	// Optional enable json log parsing
	EnableJsonParsing *bool                        `pulumi:"enableJsonParsing"`
	FluentdConfig     *ClusterLoggingFluentdConfig `pulumi:"fluentdConfig"`
	KafkaConfig       *ClusterLoggingKafkaConfig   `pulumi:"kafkaConfig"`
	Kind              *string                      `pulumi:"kind"`
	// Labels of the resource
	Labels              map[string]interface{}      `pulumi:"labels"`
	Name                *string                     `pulumi:"name"`
	NamespaceId         *string                     `pulumi:"namespaceId"`
	OutputFlushInterval *int                        `pulumi:"outputFlushInterval"`
	OutputTags          map[string]interface{}      `pulumi:"outputTags"`
	SplunkConfig        *ClusterLoggingSplunkConfig `pulumi:"splunkConfig"`
	SyslogConfig        *ClusterLoggingSyslogConfig `pulumi:"syslogConfig"`
}

type ClusterLoggingState struct {
	// Annotations of the resource
	Annotations         pulumi.MapInput
	ClusterId           pulumi.StringPtrInput
	CustomTargetConfig  ClusterLoggingCustomTargetConfigPtrInput
	ElasticsearchConfig ClusterLoggingElasticsearchConfigPtrInput
	// Optional enable json log parsing
	EnableJsonParsing pulumi.BoolPtrInput
	FluentdConfig     ClusterLoggingFluentdConfigPtrInput
	KafkaConfig       ClusterLoggingKafkaConfigPtrInput
	Kind              pulumi.StringPtrInput
	// Labels of the resource
	Labels              pulumi.MapInput
	Name                pulumi.StringPtrInput
	NamespaceId         pulumi.StringPtrInput
	OutputFlushInterval pulumi.IntPtrInput
	OutputTags          pulumi.MapInput
	SplunkConfig        ClusterLoggingSplunkConfigPtrInput
	SyslogConfig        ClusterLoggingSyslogConfigPtrInput
}

func (ClusterLoggingState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterLoggingState)(nil)).Elem()
}

type clusterLoggingArgs struct {
	// Annotations of the resource
	Annotations         map[string]interface{}             `pulumi:"annotations"`
	ClusterId           string                             `pulumi:"clusterId"`
	CustomTargetConfig  *ClusterLoggingCustomTargetConfig  `pulumi:"customTargetConfig"`
	ElasticsearchConfig *ClusterLoggingElasticsearchConfig `pulumi:"elasticsearchConfig"`
	// Optional enable json log parsing
	EnableJsonParsing *bool                        `pulumi:"enableJsonParsing"`
	FluentdConfig     *ClusterLoggingFluentdConfig `pulumi:"fluentdConfig"`
	KafkaConfig       *ClusterLoggingKafkaConfig   `pulumi:"kafkaConfig"`
	Kind              string                       `pulumi:"kind"`
	// Labels of the resource
	Labels              map[string]interface{}      `pulumi:"labels"`
	Name                *string                     `pulumi:"name"`
	NamespaceId         *string                     `pulumi:"namespaceId"`
	OutputFlushInterval *int                        `pulumi:"outputFlushInterval"`
	OutputTags          map[string]interface{}      `pulumi:"outputTags"`
	SplunkConfig        *ClusterLoggingSplunkConfig `pulumi:"splunkConfig"`
	SyslogConfig        *ClusterLoggingSyslogConfig `pulumi:"syslogConfig"`
}

// The set of arguments for constructing a ClusterLogging resource.
type ClusterLoggingArgs struct {
	// Annotations of the resource
	Annotations         pulumi.MapInput
	ClusterId           pulumi.StringInput
	CustomTargetConfig  ClusterLoggingCustomTargetConfigPtrInput
	ElasticsearchConfig ClusterLoggingElasticsearchConfigPtrInput
	// Optional enable json log parsing
	EnableJsonParsing pulumi.BoolPtrInput
	FluentdConfig     ClusterLoggingFluentdConfigPtrInput
	KafkaConfig       ClusterLoggingKafkaConfigPtrInput
	Kind              pulumi.StringInput
	// Labels of the resource
	Labels              pulumi.MapInput
	Name                pulumi.StringPtrInput
	NamespaceId         pulumi.StringPtrInput
	OutputFlushInterval pulumi.IntPtrInput
	OutputTags          pulumi.MapInput
	SplunkConfig        ClusterLoggingSplunkConfigPtrInput
	SyslogConfig        ClusterLoggingSyslogConfigPtrInput
}

func (ClusterLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterLoggingArgs)(nil)).Elem()
}
