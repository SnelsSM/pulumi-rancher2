// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Rancher v2 Cluster Logging resource. This can be used to configure Cluster Logging for Rancher v2 environments and retrieve their information.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/cluster_logging.html.markdown.
type ClusterLogging struct {
	s *pulumi.ResourceState
}

// NewClusterLogging registers a new resource with the given unique name, arguments, and options.
func NewClusterLogging(ctx *pulumi.Context,
	name string, args *ClusterLoggingArgs, opts ...pulumi.ResourceOpt) (*ClusterLogging, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	if args == nil || args.Kind == nil {
		return nil, errors.New("missing required argument 'Kind'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["annotations"] = nil
		inputs["clusterId"] = nil
		inputs["elasticsearchConfig"] = nil
		inputs["fluentdConfig"] = nil
		inputs["kafkaConfig"] = nil
		inputs["kind"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["namespaceId"] = nil
		inputs["outputFlushInterval"] = nil
		inputs["outputTags"] = nil
		inputs["splunkConfig"] = nil
		inputs["syslogConfig"] = nil
	} else {
		inputs["annotations"] = args.Annotations
		inputs["clusterId"] = args.ClusterId
		inputs["elasticsearchConfig"] = args.ElasticsearchConfig
		inputs["fluentdConfig"] = args.FluentdConfig
		inputs["kafkaConfig"] = args.KafkaConfig
		inputs["kind"] = args.Kind
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["namespaceId"] = args.NamespaceId
		inputs["outputFlushInterval"] = args.OutputFlushInterval
		inputs["outputTags"] = args.OutputTags
		inputs["splunkConfig"] = args.SplunkConfig
		inputs["syslogConfig"] = args.SyslogConfig
	}
	s, err := ctx.RegisterResource("rancher2:index/clusterLogging:ClusterLogging", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ClusterLogging{s: s}, nil
}

// GetClusterLogging gets an existing ClusterLogging resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterLogging(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClusterLoggingState, opts ...pulumi.ResourceOpt) (*ClusterLogging, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["annotations"] = state.Annotations
		inputs["clusterId"] = state.ClusterId
		inputs["elasticsearchConfig"] = state.ElasticsearchConfig
		inputs["fluentdConfig"] = state.FluentdConfig
		inputs["kafkaConfig"] = state.KafkaConfig
		inputs["kind"] = state.Kind
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["namespaceId"] = state.NamespaceId
		inputs["outputFlushInterval"] = state.OutputFlushInterval
		inputs["outputTags"] = state.OutputTags
		inputs["splunkConfig"] = state.SplunkConfig
		inputs["syslogConfig"] = state.SyslogConfig
	}
	s, err := ctx.ReadResource("rancher2:index/clusterLogging:ClusterLogging", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ClusterLogging{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ClusterLogging) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ClusterLogging) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Annotations for Cluster Logging object (map)
func (r *ClusterLogging) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// The cluster id to configure logging (string)
func (r *ClusterLogging) ClusterId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterId"])
}

// The elasticsearch config for Cluster Logging. For `kind = elasticsearch`. Conflicts with `fluentdConfig`, `kafkaConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
func (r *ClusterLogging) ElasticsearchConfig() pulumi.Output {
	return r.s.State["elasticsearchConfig"]
}

// The fluentd config for Cluster Logging. For `kind = fluentd`. Conflicts with `elasticsearchConfig`, `kafkaConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
func (r *ClusterLogging) FluentdConfig() pulumi.Output {
	return r.s.State["fluentdConfig"]
}

// The kafka config for Cluster Logging. For `kind = kafka`. Conflicts with `elasticsearchConfig`, `fluentdConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
func (r *ClusterLogging) KafkaConfig() pulumi.Output {
	return r.s.State["kafkaConfig"]
}

// The kind of the Cluster Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)
func (r *ClusterLogging) Kind() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["kind"])
}

// Labels for Cluster Logging object (map)
func (r *ClusterLogging) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// The name of the cluster logging config (string)
func (r *ClusterLogging) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The namespace id from cluster logging (string)
func (r *ClusterLogging) NamespaceId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["namespaceId"])
}

// How often buffered logs would be flushed. Default: `3` seconds (int)
func (r *ClusterLogging) OutputFlushInterval() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["outputFlushInterval"])
}

// The output tags for Cluster Logging (map)
func (r *ClusterLogging) OutputTags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["outputTags"])
}

// The splunk config for Cluster Logging. For `kind = splunk`. Conflicts with `elasticsearchConfig`, `fluentdConfig`, `kafkaConfig`, and `syslogConfig` (list maxitems:1)
func (r *ClusterLogging) SplunkConfig() pulumi.Output {
	return r.s.State["splunkConfig"]
}

// The syslog config for Cluster Logging. For `kind = syslog`. Conflicts with `elasticsearchConfig`, `fluentdConfig`, `kafkaConfig`, and `splunkConfig` (list maxitems:1)
func (r *ClusterLogging) SyslogConfig() pulumi.Output {
	return r.s.State["syslogConfig"]
}

// Input properties used for looking up and filtering ClusterLogging resources.
type ClusterLoggingState struct {
	// Annotations for Cluster Logging object (map)
	Annotations interface{}
	// The cluster id to configure logging (string)
	ClusterId interface{}
	// The elasticsearch config for Cluster Logging. For `kind = elasticsearch`. Conflicts with `fluentdConfig`, `kafkaConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
	ElasticsearchConfig interface{}
	// The fluentd config for Cluster Logging. For `kind = fluentd`. Conflicts with `elasticsearchConfig`, `kafkaConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
	FluentdConfig interface{}
	// The kafka config for Cluster Logging. For `kind = kafka`. Conflicts with `elasticsearchConfig`, `fluentdConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
	KafkaConfig interface{}
	// The kind of the Cluster Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)
	Kind interface{}
	// Labels for Cluster Logging object (map)
	Labels interface{}
	// The name of the cluster logging config (string)
	Name interface{}
	// The namespace id from cluster logging (string)
	NamespaceId interface{}
	// How often buffered logs would be flushed. Default: `3` seconds (int)
	OutputFlushInterval interface{}
	// The output tags for Cluster Logging (map)
	OutputTags interface{}
	// The splunk config for Cluster Logging. For `kind = splunk`. Conflicts with `elasticsearchConfig`, `fluentdConfig`, `kafkaConfig`, and `syslogConfig` (list maxitems:1)
	SplunkConfig interface{}
	// The syslog config for Cluster Logging. For `kind = syslog`. Conflicts with `elasticsearchConfig`, `fluentdConfig`, `kafkaConfig`, and `splunkConfig` (list maxitems:1)
	SyslogConfig interface{}
}

// The set of arguments for constructing a ClusterLogging resource.
type ClusterLoggingArgs struct {
	// Annotations for Cluster Logging object (map)
	Annotations interface{}
	// The cluster id to configure logging (string)
	ClusterId interface{}
	// The elasticsearch config for Cluster Logging. For `kind = elasticsearch`. Conflicts with `fluentdConfig`, `kafkaConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
	ElasticsearchConfig interface{}
	// The fluentd config for Cluster Logging. For `kind = fluentd`. Conflicts with `elasticsearchConfig`, `kafkaConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
	FluentdConfig interface{}
	// The kafka config for Cluster Logging. For `kind = kafka`. Conflicts with `elasticsearchConfig`, `fluentdConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
	KafkaConfig interface{}
	// The kind of the Cluster Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)
	Kind interface{}
	// Labels for Cluster Logging object (map)
	Labels interface{}
	// The name of the cluster logging config (string)
	Name interface{}
	// The namespace id from cluster logging (string)
	NamespaceId interface{}
	// How often buffered logs would be flushed. Default: `3` seconds (int)
	OutputFlushInterval interface{}
	// The output tags for Cluster Logging (map)
	OutputTags interface{}
	// The splunk config for Cluster Logging. For `kind = splunk`. Conflicts with `elasticsearchConfig`, `fluentdConfig`, `kafkaConfig`, and `syslogConfig` (list maxitems:1)
	SplunkConfig interface{}
	// The syslog config for Cluster Logging. For `kind = syslog`. Conflicts with `elasticsearchConfig`, `fluentdConfig`, `kafkaConfig`, and `splunkConfig` (list maxitems:1)
	SyslogConfig interface{}
}
