// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/app.html.markdown.
type App struct {
	s *pulumi.ResourceState
}

// NewApp registers a new resource with the given unique name, arguments, and options.
func NewApp(ctx *pulumi.Context,
	name string, args *AppArgs, opts ...pulumi.ResourceOpt) (*App, error) {
	if args == nil || args.CatalogName == nil {
		return nil, errors.New("missing required argument 'CatalogName'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	if args == nil || args.TargetNamespace == nil {
		return nil, errors.New("missing required argument 'TargetNamespace'")
	}
	if args == nil || args.TemplateName == nil {
		return nil, errors.New("missing required argument 'TemplateName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["annotations"] = nil
		inputs["answers"] = nil
		inputs["catalogName"] = nil
		inputs["description"] = nil
		inputs["forceUpgrade"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["projectId"] = nil
		inputs["revisionId"] = nil
		inputs["targetNamespace"] = nil
		inputs["templateName"] = nil
		inputs["templateVersion"] = nil
		inputs["valuesYaml"] = nil
	} else {
		inputs["annotations"] = args.Annotations
		inputs["answers"] = args.Answers
		inputs["catalogName"] = args.CatalogName
		inputs["description"] = args.Description
		inputs["forceUpgrade"] = args.ForceUpgrade
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["projectId"] = args.ProjectId
		inputs["revisionId"] = args.RevisionId
		inputs["targetNamespace"] = args.TargetNamespace
		inputs["templateName"] = args.TemplateName
		inputs["templateVersion"] = args.TemplateVersion
		inputs["valuesYaml"] = args.ValuesYaml
	}
	inputs["externalId"] = nil
	s, err := ctx.RegisterResource("rancher2:index/app:App", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &App{s: s}, nil
}

// GetApp gets an existing App resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApp(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AppState, opts ...pulumi.ResourceOpt) (*App, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["annotations"] = state.Annotations
		inputs["answers"] = state.Answers
		inputs["catalogName"] = state.CatalogName
		inputs["description"] = state.Description
		inputs["externalId"] = state.ExternalId
		inputs["forceUpgrade"] = state.ForceUpgrade
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["projectId"] = state.ProjectId
		inputs["revisionId"] = state.RevisionId
		inputs["targetNamespace"] = state.TargetNamespace
		inputs["templateName"] = state.TemplateName
		inputs["templateVersion"] = state.TemplateVersion
		inputs["valuesYaml"] = state.ValuesYaml
	}
	s, err := ctx.ReadResource("rancher2:index/app:App", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &App{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *App) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *App) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Annotations for App object (map)
func (r *App) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// Answers for the app template. If modified, app will be upgraded (map)
func (r *App) Answers() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["answers"])
}

// Catalog name of the app. If modified, app will be upgraded. For use scoped catalogs:
// * add cluster ID before name, `c-XXXXX:<name>`
// * add project ID before name, `p-XXXXX:<name>`
func (r *App) CatalogName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["catalogName"])
}

// Description for the app (string)
func (r *App) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// (Computed) The url of the app template on a catalog (string)
func (r *App) ExternalId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["externalId"])
}

// Force app upgrade (string)
func (r *App) ForceUpgrade() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["forceUpgrade"])
}

// Labels for App object (map)
func (r *App) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// The name of the app (string)
func (r *App) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The project id where the app will be installed (string)
func (r *App) ProjectId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["projectId"])
}

// Current revision id for the app. If modified, If this argument is provided or modified, app will be rollbacked to `revisionId` (string)
func (r *App) RevisionId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["revisionId"])
}

// The namespace name where the app will be installed (string)
func (r *App) TargetNamespace() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["targetNamespace"])
}

// Template name of the app. If modified, app will be upgraded (string)
func (r *App) TemplateName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["templateName"])
}

// Template version of the app. If modified, app will be upgraded. Default: `latest` (string)
func (r *App) TemplateVersion() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["templateVersion"])
}

// values.yaml base64 encoded file content for the app template. If modified, app will be upgraded (string)
func (r *App) ValuesYaml() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["valuesYaml"])
}

// Input properties used for looking up and filtering App resources.
type AppState struct {
	// Annotations for App object (map)
	Annotations interface{}
	// Answers for the app template. If modified, app will be upgraded (map)
	Answers interface{}
	// Catalog name of the app. If modified, app will be upgraded. For use scoped catalogs:
	// * add cluster ID before name, `c-XXXXX:<name>`
	// * add project ID before name, `p-XXXXX:<name>`
	CatalogName interface{}
	// Description for the app (string)
	Description interface{}
	// (Computed) The url of the app template on a catalog (string)
	ExternalId interface{}
	// Force app upgrade (string)
	ForceUpgrade interface{}
	// Labels for App object (map)
	Labels interface{}
	// The name of the app (string)
	Name interface{}
	// The project id where the app will be installed (string)
	ProjectId interface{}
	// Current revision id for the app. If modified, If this argument is provided or modified, app will be rollbacked to `revisionId` (string)
	RevisionId interface{}
	// The namespace name where the app will be installed (string)
	TargetNamespace interface{}
	// Template name of the app. If modified, app will be upgraded (string)
	TemplateName interface{}
	// Template version of the app. If modified, app will be upgraded. Default: `latest` (string)
	TemplateVersion interface{}
	// values.yaml base64 encoded file content for the app template. If modified, app will be upgraded (string)
	ValuesYaml interface{}
}

// The set of arguments for constructing a App resource.
type AppArgs struct {
	// Annotations for App object (map)
	Annotations interface{}
	// Answers for the app template. If modified, app will be upgraded (map)
	Answers interface{}
	// Catalog name of the app. If modified, app will be upgraded. For use scoped catalogs:
	// * add cluster ID before name, `c-XXXXX:<name>`
	// * add project ID before name, `p-XXXXX:<name>`
	CatalogName interface{}
	// Description for the app (string)
	Description interface{}
	// Force app upgrade (string)
	ForceUpgrade interface{}
	// Labels for App object (map)
	Labels interface{}
	// The name of the app (string)
	Name interface{}
	// The project id where the app will be installed (string)
	ProjectId interface{}
	// Current revision id for the app. If modified, If this argument is provided or modified, app will be rollbacked to `revisionId` (string)
	RevisionId interface{}
	// The namespace name where the app will be installed (string)
	TargetNamespace interface{}
	// Template name of the app. If modified, app will be upgraded (string)
	TemplateName interface{}
	// Template version of the app. If modified, app will be upgraded. Default: `latest` (string)
	TemplateVersion interface{}
	// values.yaml base64 encoded file content for the app template. If modified, app will be upgraded (string)
	ValuesYaml interface{}
}
