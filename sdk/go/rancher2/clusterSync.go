// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ClusterSync struct {
	pulumi.CustomResourceState

	// Cluster id to sync
	ClusterId        pulumi.StringOutput `pulumi:"clusterId"`
	DefaultProjectId pulumi.StringOutput `pulumi:"defaultProjectId"`
	KubeConfig       pulumi.StringOutput `pulumi:"kubeConfig"`
	// Cluster node pool ids
	NodePoolIds pulumi.StringArrayOutput `pulumi:"nodePoolIds"`
	// Wait until active status is confirmed a number of times (wait interval of 5s)
	StateConfirm    pulumi.IntPtrOutput  `pulumi:"stateConfirm"`
	Synced          pulumi.BoolPtrOutput `pulumi:"synced"`
	SystemProjectId pulumi.StringOutput  `pulumi:"systemProjectId"`
	// Wait until monitoring is up and running
	WaitMonitoring pulumi.BoolPtrOutput `pulumi:"waitMonitoring"`
}

// NewClusterSync registers a new resource with the given unique name, arguments, and options.
func NewClusterSync(ctx *pulumi.Context,
	name string, args *ClusterSyncArgs, opts ...pulumi.ResourceOption) (*ClusterSync, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	if args == nil {
		args = &ClusterSyncArgs{}
	}
	var resource ClusterSync
	err := ctx.RegisterResource("rancher2:index/clusterSync:ClusterSync", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterSync gets an existing ClusterSync resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterSync(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterSyncState, opts ...pulumi.ResourceOption) (*ClusterSync, error) {
	var resource ClusterSync
	err := ctx.ReadResource("rancher2:index/clusterSync:ClusterSync", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterSync resources.
type clusterSyncState struct {
	// Cluster id to sync
	ClusterId        *string `pulumi:"clusterId"`
	DefaultProjectId *string `pulumi:"defaultProjectId"`
	KubeConfig       *string `pulumi:"kubeConfig"`
	// Cluster node pool ids
	NodePoolIds []string `pulumi:"nodePoolIds"`
	// Wait until active status is confirmed a number of times (wait interval of 5s)
	StateConfirm    *int    `pulumi:"stateConfirm"`
	Synced          *bool   `pulumi:"synced"`
	SystemProjectId *string `pulumi:"systemProjectId"`
	// Wait until monitoring is up and running
	WaitMonitoring *bool `pulumi:"waitMonitoring"`
}

type ClusterSyncState struct {
	// Cluster id to sync
	ClusterId        pulumi.StringPtrInput
	DefaultProjectId pulumi.StringPtrInput
	KubeConfig       pulumi.StringPtrInput
	// Cluster node pool ids
	NodePoolIds pulumi.StringArrayInput
	// Wait until active status is confirmed a number of times (wait interval of 5s)
	StateConfirm    pulumi.IntPtrInput
	Synced          pulumi.BoolPtrInput
	SystemProjectId pulumi.StringPtrInput
	// Wait until monitoring is up and running
	WaitMonitoring pulumi.BoolPtrInput
}

func (ClusterSyncState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterSyncState)(nil)).Elem()
}

type clusterSyncArgs struct {
	// Cluster id to sync
	ClusterId string `pulumi:"clusterId"`
	// Cluster node pool ids
	NodePoolIds []string `pulumi:"nodePoolIds"`
	// Wait until active status is confirmed a number of times (wait interval of 5s)
	StateConfirm *int  `pulumi:"stateConfirm"`
	Synced       *bool `pulumi:"synced"`
	// Wait until monitoring is up and running
	WaitMonitoring *bool `pulumi:"waitMonitoring"`
}

// The set of arguments for constructing a ClusterSync resource.
type ClusterSyncArgs struct {
	// Cluster id to sync
	ClusterId pulumi.StringInput
	// Cluster node pool ids
	NodePoolIds pulumi.StringArrayInput
	// Wait until active status is confirmed a number of times (wait interval of 5s)
	StateConfirm pulumi.IntPtrInput
	Synced       pulumi.BoolPtrInput
	// Wait until monitoring is up and running
	WaitMonitoring pulumi.BoolPtrInput
}

func (ClusterSyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterSyncArgs)(nil)).Elem()
}
