// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/cluster_sync.html.markdown.
type ClusterSync struct {
	s *pulumi.ResourceState
}

// NewClusterSync registers a new resource with the given unique name, arguments, and options.
func NewClusterSync(ctx *pulumi.Context,
	name string, args *ClusterSyncArgs, opts ...pulumi.ResourceOpt) (*ClusterSync, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["clusterId"] = nil
		inputs["nodePoolIds"] = nil
		inputs["synced"] = nil
	} else {
		inputs["clusterId"] = args.ClusterId
		inputs["nodePoolIds"] = args.NodePoolIds
		inputs["synced"] = args.Synced
	}
	inputs["defaultProjectId"] = nil
	inputs["kubeConfig"] = nil
	inputs["systemProjectId"] = nil
	s, err := ctx.RegisterResource("rancher2:index/clusterSync:ClusterSync", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ClusterSync{s: s}, nil
}

// GetClusterSync gets an existing ClusterSync resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterSync(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClusterSyncState, opts ...pulumi.ResourceOpt) (*ClusterSync, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["clusterId"] = state.ClusterId
		inputs["defaultProjectId"] = state.DefaultProjectId
		inputs["kubeConfig"] = state.KubeConfig
		inputs["nodePoolIds"] = state.NodePoolIds
		inputs["synced"] = state.Synced
		inputs["systemProjectId"] = state.SystemProjectId
	}
	s, err := ctx.ReadResource("rancher2:index/clusterSync:ClusterSync", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ClusterSync{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ClusterSync) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ClusterSync) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The cluster ID that is syncing (string)
func (r *ClusterSync) ClusterId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterId"])
}

// (Computed) Default project ID for the cluster sync (string)
func (r *ClusterSync) DefaultProjectId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["defaultProjectId"])
}

// (Computed) Kube Config generated for the cluster sync (string)
func (r *ClusterSync) KubeConfig() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["kubeConfig"])
}

// The node pool IDs used by the cluster id (list)
func (r *ClusterSync) NodePoolIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["nodePoolIds"])
}

func (r *ClusterSync) Synced() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["synced"])
}

// (Computed) System project ID for the cluster sync (string)
func (r *ClusterSync) SystemProjectId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["systemProjectId"])
}

// Input properties used for looking up and filtering ClusterSync resources.
type ClusterSyncState struct {
	// The cluster ID that is syncing (string)
	ClusterId interface{}
	// (Computed) Default project ID for the cluster sync (string)
	DefaultProjectId interface{}
	// (Computed) Kube Config generated for the cluster sync (string)
	KubeConfig interface{}
	// The node pool IDs used by the cluster id (list)
	NodePoolIds interface{}
	Synced interface{}
	// (Computed) System project ID for the cluster sync (string)
	SystemProjectId interface{}
}

// The set of arguments for constructing a ClusterSync resource.
type ClusterSyncArgs struct {
	// The cluster ID that is syncing (string)
	ClusterId interface{}
	// The node pool IDs used by the cluster id (list)
	NodePoolIds interface{}
	Synced interface{}
}
