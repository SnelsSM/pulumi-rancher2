// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Registry struct {
	pulumi.CustomResourceState

	// Annotations of the resource
	Annotations pulumi.MapOutput `pulumi:"annotations"`
	// Description of the docker registry
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Labels of the resource
	Labels pulumi.MapOutput `pulumi:"labels"`
	// Name of the docker registry
	Name pulumi.StringOutput `pulumi:"name"`
	// Namespace ID to add docker registry
	NamespaceId pulumi.StringPtrOutput `pulumi:"namespaceId"`
	// Project ID to add docker registry
	ProjectId  pulumi.StringOutput         `pulumi:"projectId"`
	Registries RegistryRegistryArrayOutput `pulumi:"registries"`
}

// NewRegistry registers a new resource with the given unique name, arguments, and options.
func NewRegistry(ctx *pulumi.Context,
	name string, args *RegistryArgs, opts ...pulumi.ResourceOption) (*Registry, error) {
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	if args == nil || args.Registries == nil {
		return nil, errors.New("missing required argument 'Registries'")
	}
	if args == nil {
		args = &RegistryArgs{}
	}
	var resource Registry
	err := ctx.RegisterResource("rancher2:index/registry:Registry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistry gets an existing Registry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryState, opts ...pulumi.ResourceOption) (*Registry, error) {
	var resource Registry
	err := ctx.ReadResource("rancher2:index/registry:Registry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Registry resources.
type registryState struct {
	// Annotations of the resource
	Annotations map[string]interface{} `pulumi:"annotations"`
	// Description of the docker registry
	Description *string `pulumi:"description"`
	// Labels of the resource
	Labels map[string]interface{} `pulumi:"labels"`
	// Name of the docker registry
	Name *string `pulumi:"name"`
	// Namespace ID to add docker registry
	NamespaceId *string `pulumi:"namespaceId"`
	// Project ID to add docker registry
	ProjectId  *string            `pulumi:"projectId"`
	Registries []RegistryRegistry `pulumi:"registries"`
}

type RegistryState struct {
	// Annotations of the resource
	Annotations pulumi.MapInput
	// Description of the docker registry
	Description pulumi.StringPtrInput
	// Labels of the resource
	Labels pulumi.MapInput
	// Name of the docker registry
	Name pulumi.StringPtrInput
	// Namespace ID to add docker registry
	NamespaceId pulumi.StringPtrInput
	// Project ID to add docker registry
	ProjectId  pulumi.StringPtrInput
	Registries RegistryRegistryArrayInput
}

func (RegistryState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryState)(nil)).Elem()
}

type registryArgs struct {
	// Annotations of the resource
	Annotations map[string]interface{} `pulumi:"annotations"`
	// Description of the docker registry
	Description *string `pulumi:"description"`
	// Labels of the resource
	Labels map[string]interface{} `pulumi:"labels"`
	// Name of the docker registry
	Name *string `pulumi:"name"`
	// Namespace ID to add docker registry
	NamespaceId *string `pulumi:"namespaceId"`
	// Project ID to add docker registry
	ProjectId  string             `pulumi:"projectId"`
	Registries []RegistryRegistry `pulumi:"registries"`
}

// The set of arguments for constructing a Registry resource.
type RegistryArgs struct {
	// Annotations of the resource
	Annotations pulumi.MapInput
	// Description of the docker registry
	Description pulumi.StringPtrInput
	// Labels of the resource
	Labels pulumi.MapInput
	// Name of the docker registry
	Name pulumi.StringPtrInput
	// Namespace ID to add docker registry
	NamespaceId pulumi.StringPtrInput
	// Project ID to add docker registry
	ProjectId  pulumi.StringInput
	Registries RegistryRegistryArrayInput
}

func (RegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryArgs)(nil)).Elem()
}
