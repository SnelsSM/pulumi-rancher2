// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Rancher v2 User resource. This can be used to create Users for Rancher v2 environments and retrieve their information.
// 
// When a Rancher User is created, it doesn't have a global role binding. At least, `user-base` global role binding in needed in order to enable user login.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/user.html.markdown.
type User struct {
	s *pulumi.ResourceState
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOpt) (*User, error) {
	if args == nil || args.Password == nil {
		return nil, errors.New("missing required argument 'Password'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["annotations"] = nil
		inputs["enabled"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["password"] = nil
		inputs["username"] = nil
	} else {
		inputs["annotations"] = args.Annotations
		inputs["enabled"] = args.Enabled
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["password"] = args.Password
		inputs["username"] = args.Username
	}
	inputs["principalIds"] = nil
	s, err := ctx.RegisterResource("rancher2:index/user:User", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &User{s: s}, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.ID, state *UserState, opts ...pulumi.ResourceOpt) (*User, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["annotations"] = state.Annotations
		inputs["enabled"] = state.Enabled
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["password"] = state.Password
		inputs["principalIds"] = state.PrincipalIds
		inputs["username"] = state.Username
	}
	s, err := ctx.ReadResource("rancher2:index/user:User", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &User{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *User) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *User) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Annotations for global role binding (map)
func (r *User) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

func (r *User) Enabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enabled"])
}

// Labels for global role binding (map)
func (r *User) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// The user full name (string)
func (r *User) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The user password (string)
func (r *User) Password() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["password"])
}

// (Computed) The user principal IDs (list)
func (r *User) PrincipalIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["principalIds"])
}

// The user username (string)
func (r *User) Username() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["username"])
}

// Input properties used for looking up and filtering User resources.
type UserState struct {
	// Annotations for global role binding (map)
	Annotations interface{}
	Enabled interface{}
	// Labels for global role binding (map)
	Labels interface{}
	// The user full name (string)
	Name interface{}
	// The user password (string)
	Password interface{}
	// (Computed) The user principal IDs (list)
	PrincipalIds interface{}
	// The user username (string)
	Username interface{}
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// Annotations for global role binding (map)
	Annotations interface{}
	Enabled interface{}
	// Labels for global role binding (map)
	Labels interface{}
	// The user full name (string)
	Name interface{}
	// The user password (string)
	Password interface{}
	// The user username (string)
	Username interface{}
}
