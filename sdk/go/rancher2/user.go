// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type User struct {
	pulumi.CustomResourceState

	// Annotations of the resource
	Annotations pulumi.MapOutput     `pulumi:"annotations"`
	Enabled     pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Labels of the resource
	Labels       pulumi.MapOutput         `pulumi:"labels"`
	Name         pulumi.StringOutput      `pulumi:"name"`
	Password     pulumi.StringOutput      `pulumi:"password"`
	PrincipalIds pulumi.StringArrayOutput `pulumi:"principalIds"`
	Username     pulumi.StringOutput      `pulumi:"username"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil || args.Password == nil {
		return nil, errors.New("missing required argument 'Password'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	if args == nil {
		args = &UserArgs{}
	}
	var resource User
	err := ctx.RegisterResource("rancher2:index/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("rancher2:index/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// Annotations of the resource
	Annotations map[string]interface{} `pulumi:"annotations"`
	Enabled     *bool                  `pulumi:"enabled"`
	// Labels of the resource
	Labels       map[string]interface{} `pulumi:"labels"`
	Name         *string                `pulumi:"name"`
	Password     *string                `pulumi:"password"`
	PrincipalIds []string               `pulumi:"principalIds"`
	Username     *string                `pulumi:"username"`
}

type UserState struct {
	// Annotations of the resource
	Annotations pulumi.MapInput
	Enabled     pulumi.BoolPtrInput
	// Labels of the resource
	Labels       pulumi.MapInput
	Name         pulumi.StringPtrInput
	Password     pulumi.StringPtrInput
	PrincipalIds pulumi.StringArrayInput
	Username     pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// Annotations of the resource
	Annotations map[string]interface{} `pulumi:"annotations"`
	Enabled     *bool                  `pulumi:"enabled"`
	// Labels of the resource
	Labels   map[string]interface{} `pulumi:"labels"`
	Name     *string                `pulumi:"name"`
	Password string                 `pulumi:"password"`
	Username string                 `pulumi:"username"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// Annotations of the resource
	Annotations pulumi.MapInput
	Enabled     pulumi.BoolPtrInput
	// Labels of the resource
	Labels   pulumi.MapInput
	Name     pulumi.StringPtrInput
	Password pulumi.StringInput
	Username pulumi.StringInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}
