// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/bootstrap.html.markdown.
type Bootstrap struct {
	s *pulumi.ResourceState
}

// NewBootstrap registers a new resource with the given unique name, arguments, and options.
func NewBootstrap(ctx *pulumi.Context,
	name string, args *BootstrapArgs, opts ...pulumi.ResourceOpt) (*Bootstrap, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["currentPassword"] = nil
		inputs["password"] = nil
		inputs["telemetry"] = nil
		inputs["tokenTtl"] = nil
		inputs["tokenUpdate"] = nil
	} else {
		inputs["currentPassword"] = args.CurrentPassword
		inputs["password"] = args.Password
		inputs["telemetry"] = args.Telemetry
		inputs["tokenTtl"] = args.TokenTtl
		inputs["tokenUpdate"] = args.TokenUpdate
	}
	inputs["tempToken"] = nil
	inputs["tempTokenId"] = nil
	inputs["token"] = nil
	inputs["tokenId"] = nil
	inputs["url"] = nil
	inputs["user"] = nil
	s, err := ctx.RegisterResource("rancher2:index/bootstrap:Bootstrap", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Bootstrap{s: s}, nil
}

// GetBootstrap gets an existing Bootstrap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBootstrap(ctx *pulumi.Context,
	name string, id pulumi.ID, state *BootstrapState, opts ...pulumi.ResourceOpt) (*Bootstrap, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["currentPassword"] = state.CurrentPassword
		inputs["password"] = state.Password
		inputs["telemetry"] = state.Telemetry
		inputs["tempToken"] = state.TempToken
		inputs["tempTokenId"] = state.TempTokenId
		inputs["token"] = state.Token
		inputs["tokenId"] = state.TokenId
		inputs["tokenTtl"] = state.TokenTtl
		inputs["tokenUpdate"] = state.TokenUpdate
		inputs["url"] = state.Url
		inputs["user"] = state.User
	}
	s, err := ctx.ReadResource("rancher2:index/bootstrap:Bootstrap", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Bootstrap{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Bootstrap) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Bootstrap) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Current password for Admin user. Just needed for recover if admin password has been changed from other resources and token is expired (string)
func (r *Bootstrap) CurrentPassword() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["currentPassword"])
}

// Password for Admin user or random generated if empty (string)
func (r *Bootstrap) Password() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["password"])
}

// Send telemetry anonymous data. Default: `false` (bool)
func (r *Bootstrap) Telemetry() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["telemetry"])
}

// (Computed) Generated API temporary token as helper. Should be empty (string)
func (r *Bootstrap) TempToken() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tempToken"])
}

// (Computed) Generated API temporary token id as helper. Should be empty (string)
func (r *Bootstrap) TempTokenId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tempTokenId"])
}

// (Computed) Generated API token for Admin User (string)
func (r *Bootstrap) Token() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["token"])
}

// (Computed) Generated API token id for Admin User (string)
func (r *Bootstrap) TokenId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tokenId"])
}

// TTL in seconds for generated admin token. Default: `0`  (int)
func (r *Bootstrap) TokenTtl() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenTtl"])
}

// Regenerate admin token. Default: `false` (bool)
func (r *Bootstrap) TokenUpdate() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["tokenUpdate"])
}

// (Computed) URL set as server-url (string)
func (r *Bootstrap) Url() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["url"])
}

// (Computed) Admin username (string)
func (r *Bootstrap) User() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["user"])
}

// Input properties used for looking up and filtering Bootstrap resources.
type BootstrapState struct {
	// Current password for Admin user. Just needed for recover if admin password has been changed from other resources and token is expired (string)
	CurrentPassword interface{}
	// Password for Admin user or random generated if empty (string)
	Password interface{}
	// Send telemetry anonymous data. Default: `false` (bool)
	Telemetry interface{}
	// (Computed) Generated API temporary token as helper. Should be empty (string)
	TempToken interface{}
	// (Computed) Generated API temporary token id as helper. Should be empty (string)
	TempTokenId interface{}
	// (Computed) Generated API token for Admin User (string)
	Token interface{}
	// (Computed) Generated API token id for Admin User (string)
	TokenId interface{}
	// TTL in seconds for generated admin token. Default: `0`  (int)
	TokenTtl interface{}
	// Regenerate admin token. Default: `false` (bool)
	TokenUpdate interface{}
	// (Computed) URL set as server-url (string)
	Url interface{}
	// (Computed) Admin username (string)
	User interface{}
}

// The set of arguments for constructing a Bootstrap resource.
type BootstrapArgs struct {
	// Current password for Admin user. Just needed for recover if admin password has been changed from other resources and token is expired (string)
	CurrentPassword interface{}
	// Password for Admin user or random generated if empty (string)
	Password interface{}
	// Send telemetry anonymous data. Default: `false` (bool)
	Telemetry interface{}
	// TTL in seconds for generated admin token. Default: `0`  (int)
	TokenTtl interface{}
	// Regenerate admin token. Default: `false` (bool)
	TokenUpdate interface{}
}
