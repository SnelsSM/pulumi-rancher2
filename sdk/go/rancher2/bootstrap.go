// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Bootstrap struct {
	pulumi.CustomResourceState

	CurrentPassword pulumi.StringOutput  `pulumi:"currentPassword"`
	Password        pulumi.StringOutput  `pulumi:"password"`
	Telemetry       pulumi.BoolPtrOutput `pulumi:"telemetry"`
	TempToken       pulumi.StringOutput  `pulumi:"tempToken"`
	TempTokenId     pulumi.StringOutput  `pulumi:"tempTokenId"`
	Token           pulumi.StringOutput  `pulumi:"token"`
	TokenId         pulumi.StringOutput  `pulumi:"tokenId"`
	TokenTtl        pulumi.IntPtrOutput  `pulumi:"tokenTtl"`
	TokenUpdate     pulumi.BoolPtrOutput `pulumi:"tokenUpdate"`
	Url             pulumi.StringOutput  `pulumi:"url"`
	User            pulumi.StringOutput  `pulumi:"user"`
}

// NewBootstrap registers a new resource with the given unique name, arguments, and options.
func NewBootstrap(ctx *pulumi.Context,
	name string, args *BootstrapArgs, opts ...pulumi.ResourceOption) (*Bootstrap, error) {
	if args == nil {
		args = &BootstrapArgs{}
	}
	var resource Bootstrap
	err := ctx.RegisterResource("rancher2:index/bootstrap:Bootstrap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBootstrap gets an existing Bootstrap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBootstrap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BootstrapState, opts ...pulumi.ResourceOption) (*Bootstrap, error) {
	var resource Bootstrap
	err := ctx.ReadResource("rancher2:index/bootstrap:Bootstrap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Bootstrap resources.
type bootstrapState struct {
	CurrentPassword *string `pulumi:"currentPassword"`
	Password        *string `pulumi:"password"`
	Telemetry       *bool   `pulumi:"telemetry"`
	TempToken       *string `pulumi:"tempToken"`
	TempTokenId     *string `pulumi:"tempTokenId"`
	Token           *string `pulumi:"token"`
	TokenId         *string `pulumi:"tokenId"`
	TokenTtl        *int    `pulumi:"tokenTtl"`
	TokenUpdate     *bool   `pulumi:"tokenUpdate"`
	Url             *string `pulumi:"url"`
	User            *string `pulumi:"user"`
}

type BootstrapState struct {
	CurrentPassword pulumi.StringPtrInput
	Password        pulumi.StringPtrInput
	Telemetry       pulumi.BoolPtrInput
	TempToken       pulumi.StringPtrInput
	TempTokenId     pulumi.StringPtrInput
	Token           pulumi.StringPtrInput
	TokenId         pulumi.StringPtrInput
	TokenTtl        pulumi.IntPtrInput
	TokenUpdate     pulumi.BoolPtrInput
	Url             pulumi.StringPtrInput
	User            pulumi.StringPtrInput
}

func (BootstrapState) ElementType() reflect.Type {
	return reflect.TypeOf((*bootstrapState)(nil)).Elem()
}

type bootstrapArgs struct {
	CurrentPassword *string `pulumi:"currentPassword"`
	Password        *string `pulumi:"password"`
	Telemetry       *bool   `pulumi:"telemetry"`
	TokenTtl        *int    `pulumi:"tokenTtl"`
	TokenUpdate     *bool   `pulumi:"tokenUpdate"`
}

// The set of arguments for constructing a Bootstrap resource.
type BootstrapArgs struct {
	CurrentPassword pulumi.StringPtrInput
	Password        pulumi.StringPtrInput
	Telemetry       pulumi.BoolPtrInput
	TokenTtl        pulumi.IntPtrInput
	TokenUpdate     pulumi.BoolPtrInput
}

func (BootstrapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bootstrapArgs)(nil)).Elem()
}
