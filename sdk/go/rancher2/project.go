// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Project struct {
	pulumi.CustomResourceState

	// Annotations of the resource
	Annotations            pulumi.MapOutput                       `pulumi:"annotations"`
	ClusterId              pulumi.StringOutput                    `pulumi:"clusterId"`
	ContainerResourceLimit ProjectContainerResourceLimitPtrOutput `pulumi:"containerResourceLimit"`
	Description            pulumi.StringPtrOutput                 `pulumi:"description"`
	// Enable built-in project monitoring
	EnableProjectMonitoring pulumi.BoolPtrOutput `pulumi:"enableProjectMonitoring"`
	// Labels of the resource
	Labels                      pulumi.MapOutput       `pulumi:"labels"`
	Name                        pulumi.StringOutput    `pulumi:"name"`
	PodSecurityPolicyTemplateId pulumi.StringPtrOutput `pulumi:"podSecurityPolicyTemplateId"`
	// Cluster monitoring configuration
	ProjectMonitoringInput ProjectProjectMonitoringInputPtrOutput `pulumi:"projectMonitoringInput"`
	ResourceQuota          ProjectResourceQuotaPtrOutput          `pulumi:"resourceQuota"`
	// Wait for cluster becomes active
	WaitForCluster pulumi.BoolPtrOutput `pulumi:"waitForCluster"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	if args == nil {
		args = &ProjectArgs{}
	}
	var resource Project
	err := ctx.RegisterResource("rancher2:index/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("rancher2:index/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// Annotations of the resource
	Annotations            map[string]interface{}         `pulumi:"annotations"`
	ClusterId              *string                        `pulumi:"clusterId"`
	ContainerResourceLimit *ProjectContainerResourceLimit `pulumi:"containerResourceLimit"`
	Description            *string                        `pulumi:"description"`
	// Enable built-in project monitoring
	EnableProjectMonitoring *bool `pulumi:"enableProjectMonitoring"`
	// Labels of the resource
	Labels                      map[string]interface{} `pulumi:"labels"`
	Name                        *string                `pulumi:"name"`
	PodSecurityPolicyTemplateId *string                `pulumi:"podSecurityPolicyTemplateId"`
	// Cluster monitoring configuration
	ProjectMonitoringInput *ProjectProjectMonitoringInput `pulumi:"projectMonitoringInput"`
	ResourceQuota          *ProjectResourceQuota          `pulumi:"resourceQuota"`
	// Wait for cluster becomes active
	WaitForCluster *bool `pulumi:"waitForCluster"`
}

type ProjectState struct {
	// Annotations of the resource
	Annotations            pulumi.MapInput
	ClusterId              pulumi.StringPtrInput
	ContainerResourceLimit ProjectContainerResourceLimitPtrInput
	Description            pulumi.StringPtrInput
	// Enable built-in project monitoring
	EnableProjectMonitoring pulumi.BoolPtrInput
	// Labels of the resource
	Labels                      pulumi.MapInput
	Name                        pulumi.StringPtrInput
	PodSecurityPolicyTemplateId pulumi.StringPtrInput
	// Cluster monitoring configuration
	ProjectMonitoringInput ProjectProjectMonitoringInputPtrInput
	ResourceQuota          ProjectResourceQuotaPtrInput
	// Wait for cluster becomes active
	WaitForCluster pulumi.BoolPtrInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// Annotations of the resource
	Annotations            map[string]interface{}         `pulumi:"annotations"`
	ClusterId              string                         `pulumi:"clusterId"`
	ContainerResourceLimit *ProjectContainerResourceLimit `pulumi:"containerResourceLimit"`
	Description            *string                        `pulumi:"description"`
	// Enable built-in project monitoring
	EnableProjectMonitoring *bool `pulumi:"enableProjectMonitoring"`
	// Labels of the resource
	Labels                      map[string]interface{} `pulumi:"labels"`
	Name                        *string                `pulumi:"name"`
	PodSecurityPolicyTemplateId *string                `pulumi:"podSecurityPolicyTemplateId"`
	// Cluster monitoring configuration
	ProjectMonitoringInput *ProjectProjectMonitoringInput `pulumi:"projectMonitoringInput"`
	ResourceQuota          *ProjectResourceQuota          `pulumi:"resourceQuota"`
	// Wait for cluster becomes active
	WaitForCluster *bool `pulumi:"waitForCluster"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Annotations of the resource
	Annotations            pulumi.MapInput
	ClusterId              pulumi.StringInput
	ContainerResourceLimit ProjectContainerResourceLimitPtrInput
	Description            pulumi.StringPtrInput
	// Enable built-in project monitoring
	EnableProjectMonitoring pulumi.BoolPtrInput
	// Labels of the resource
	Labels                      pulumi.MapInput
	Name                        pulumi.StringPtrInput
	PodSecurityPolicyTemplateId pulumi.StringPtrInput
	// Cluster monitoring configuration
	ProjectMonitoringInput ProjectProjectMonitoringInputPtrInput
	ResourceQuota          ProjectResourceQuotaPtrInput
	// Wait for cluster becomes active
	WaitForCluster pulumi.BoolPtrInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}
