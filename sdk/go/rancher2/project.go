// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Rancher v2 Project resource. This can be used to create projects for Rancher v2 environments and retrieve their information.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/project.html.markdown.
type Project struct {
	s *pulumi.ResourceState
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOpt) (*Project, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["annotations"] = nil
		inputs["clusterId"] = nil
		inputs["containerResourceLimit"] = nil
		inputs["description"] = nil
		inputs["enableProjectMonitoring"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["podSecurityPolicyTemplateId"] = nil
		inputs["projectMonitoringInput"] = nil
		inputs["resourceQuota"] = nil
		inputs["waitForCluster"] = nil
	} else {
		inputs["annotations"] = args.Annotations
		inputs["clusterId"] = args.ClusterId
		inputs["containerResourceLimit"] = args.ContainerResourceLimit
		inputs["description"] = args.Description
		inputs["enableProjectMonitoring"] = args.EnableProjectMonitoring
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["podSecurityPolicyTemplateId"] = args.PodSecurityPolicyTemplateId
		inputs["projectMonitoringInput"] = args.ProjectMonitoringInput
		inputs["resourceQuota"] = args.ResourceQuota
		inputs["waitForCluster"] = args.WaitForCluster
	}
	s, err := ctx.RegisterResource("rancher2:index/project:Project", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Project{s: s}, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProjectState, opts ...pulumi.ResourceOpt) (*Project, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["annotations"] = state.Annotations
		inputs["clusterId"] = state.ClusterId
		inputs["containerResourceLimit"] = state.ContainerResourceLimit
		inputs["description"] = state.Description
		inputs["enableProjectMonitoring"] = state.EnableProjectMonitoring
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["podSecurityPolicyTemplateId"] = state.PodSecurityPolicyTemplateId
		inputs["projectMonitoringInput"] = state.ProjectMonitoringInput
		inputs["resourceQuota"] = state.ResourceQuota
		inputs["waitForCluster"] = state.WaitForCluster
	}
	s, err := ctx.ReadResource("rancher2:index/project:Project", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Project{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Project) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Project) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Annotations for Node Pool object (map)
func (r *Project) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// The cluster id where create project (string)
func (r *Project) ClusterId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clusterId"])
}

// Default containers resource limits on project (List maxitem:1)
func (r *Project) ContainerResourceLimit() pulumi.Output {
	return r.s.State["containerResourceLimit"]
}

// A project description (string)
func (r *Project) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Enable built-in project monitoring. Default `false` (bool)
func (r *Project) EnableProjectMonitoring() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enableProjectMonitoring"])
}

// Labels for Node Pool object (map)
func (r *Project) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// The name of the project (string)
func (r *Project) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Default Pod Security Policy ID for the project (string)
func (r *Project) PodSecurityPolicyTemplateId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["podSecurityPolicyTemplateId"])
}

// Project monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured (list maxitems:1)
func (r *Project) ProjectMonitoringInput() pulumi.Output {
	return r.s.State["projectMonitoringInput"]
}

// Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)
func (r *Project) ResourceQuota() pulumi.Output {
	return r.s.State["resourceQuota"]
}

// Wait for cluster becomes active. Default `false` (bool)
func (r *Project) WaitForCluster() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["waitForCluster"])
}

// Input properties used for looking up and filtering Project resources.
type ProjectState struct {
	// Annotations for Node Pool object (map)
	Annotations interface{}
	// The cluster id where create project (string)
	ClusterId interface{}
	// Default containers resource limits on project (List maxitem:1)
	ContainerResourceLimit interface{}
	// A project description (string)
	Description interface{}
	// Enable built-in project monitoring. Default `false` (bool)
	EnableProjectMonitoring interface{}
	// Labels for Node Pool object (map)
	Labels interface{}
	// The name of the project (string)
	Name interface{}
	// Default Pod Security Policy ID for the project (string)
	PodSecurityPolicyTemplateId interface{}
	// Project monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured (list maxitems:1)
	ProjectMonitoringInput interface{}
	// Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)
	ResourceQuota interface{}
	// Wait for cluster becomes active. Default `false` (bool)
	WaitForCluster interface{}
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Annotations for Node Pool object (map)
	Annotations interface{}
	// The cluster id where create project (string)
	ClusterId interface{}
	// Default containers resource limits on project (List maxitem:1)
	ContainerResourceLimit interface{}
	// A project description (string)
	Description interface{}
	// Enable built-in project monitoring. Default `false` (bool)
	EnableProjectMonitoring interface{}
	// Labels for Node Pool object (map)
	Labels interface{}
	// The name of the project (string)
	Name interface{}
	// Default Pod Security Policy ID for the project (string)
	PodSecurityPolicyTemplateId interface{}
	// Project monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured (list maxitems:1)
	ProjectMonitoringInput interface{}
	// Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)
	ResourceQuota interface{}
	// Wait for cluster becomes active. Default `false` (bool)
	WaitForCluster interface{}
}
