// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Rancher v2 Auth Config ActiveDirectory resource. This can be used to configure and enable Auth Config ActiveDirectory for Rancher v2 RKE clusters and retrieve their information.
// 
// In addition to the built-in local auth, only one external auth config provider can be enabled at a time.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/auth_config_activedirectory.html.markdown.
type ActiveDirectory struct {
	s *pulumi.ResourceState
}

// NewActiveDirectory registers a new resource with the given unique name, arguments, and options.
func NewActiveDirectory(ctx *pulumi.Context,
	name string, args *ActiveDirectoryArgs, opts ...pulumi.ResourceOpt) (*ActiveDirectory, error) {
	if args == nil || args.Servers == nil {
		return nil, errors.New("missing required argument 'Servers'")
	}
	if args == nil || args.ServiceAccountPassword == nil {
		return nil, errors.New("missing required argument 'ServiceAccountPassword'")
	}
	if args == nil || args.ServiceAccountUsername == nil {
		return nil, errors.New("missing required argument 'ServiceAccountUsername'")
	}
	if args == nil || args.UserSearchBase == nil {
		return nil, errors.New("missing required argument 'UserSearchBase'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessMode"] = nil
		inputs["allowedPrincipalIds"] = nil
		inputs["annotations"] = nil
		inputs["certificate"] = nil
		inputs["connectionTimeout"] = nil
		inputs["defaultLoginDomain"] = nil
		inputs["enabled"] = nil
		inputs["groupDnAttribute"] = nil
		inputs["groupMemberMappingAttribute"] = nil
		inputs["groupMemberUserAttribute"] = nil
		inputs["groupNameAttribute"] = nil
		inputs["groupObjectClass"] = nil
		inputs["groupSearchAttribute"] = nil
		inputs["groupSearchBase"] = nil
		inputs["groupSearchFilter"] = nil
		inputs["labels"] = nil
		inputs["nestedGroupMembershipEnabled"] = nil
		inputs["port"] = nil
		inputs["servers"] = nil
		inputs["serviceAccountPassword"] = nil
		inputs["serviceAccountUsername"] = nil
		inputs["tls"] = nil
		inputs["userDisabledBitMask"] = nil
		inputs["userEnabledAttribute"] = nil
		inputs["userLoginAttribute"] = nil
		inputs["userNameAttribute"] = nil
		inputs["userObjectClass"] = nil
		inputs["userSearchAttribute"] = nil
		inputs["userSearchBase"] = nil
		inputs["userSearchFilter"] = nil
	} else {
		inputs["accessMode"] = args.AccessMode
		inputs["allowedPrincipalIds"] = args.AllowedPrincipalIds
		inputs["annotations"] = args.Annotations
		inputs["certificate"] = args.Certificate
		inputs["connectionTimeout"] = args.ConnectionTimeout
		inputs["defaultLoginDomain"] = args.DefaultLoginDomain
		inputs["enabled"] = args.Enabled
		inputs["groupDnAttribute"] = args.GroupDnAttribute
		inputs["groupMemberMappingAttribute"] = args.GroupMemberMappingAttribute
		inputs["groupMemberUserAttribute"] = args.GroupMemberUserAttribute
		inputs["groupNameAttribute"] = args.GroupNameAttribute
		inputs["groupObjectClass"] = args.GroupObjectClass
		inputs["groupSearchAttribute"] = args.GroupSearchAttribute
		inputs["groupSearchBase"] = args.GroupSearchBase
		inputs["groupSearchFilter"] = args.GroupSearchFilter
		inputs["labels"] = args.Labels
		inputs["nestedGroupMembershipEnabled"] = args.NestedGroupMembershipEnabled
		inputs["port"] = args.Port
		inputs["servers"] = args.Servers
		inputs["serviceAccountPassword"] = args.ServiceAccountPassword
		inputs["serviceAccountUsername"] = args.ServiceAccountUsername
		inputs["tls"] = args.Tls
		inputs["userDisabledBitMask"] = args.UserDisabledBitMask
		inputs["userEnabledAttribute"] = args.UserEnabledAttribute
		inputs["userLoginAttribute"] = args.UserLoginAttribute
		inputs["userNameAttribute"] = args.UserNameAttribute
		inputs["userObjectClass"] = args.UserObjectClass
		inputs["userSearchAttribute"] = args.UserSearchAttribute
		inputs["userSearchBase"] = args.UserSearchBase
		inputs["userSearchFilter"] = args.UserSearchFilter
	}
	inputs["name"] = nil
	inputs["type"] = nil
	s, err := ctx.RegisterResource("rancher2:index/activeDirectory:ActiveDirectory", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ActiveDirectory{s: s}, nil
}

// GetActiveDirectory gets an existing ActiveDirectory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActiveDirectory(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ActiveDirectoryState, opts ...pulumi.ResourceOpt) (*ActiveDirectory, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessMode"] = state.AccessMode
		inputs["allowedPrincipalIds"] = state.AllowedPrincipalIds
		inputs["annotations"] = state.Annotations
		inputs["certificate"] = state.Certificate
		inputs["connectionTimeout"] = state.ConnectionTimeout
		inputs["defaultLoginDomain"] = state.DefaultLoginDomain
		inputs["enabled"] = state.Enabled
		inputs["groupDnAttribute"] = state.GroupDnAttribute
		inputs["groupMemberMappingAttribute"] = state.GroupMemberMappingAttribute
		inputs["groupMemberUserAttribute"] = state.GroupMemberUserAttribute
		inputs["groupNameAttribute"] = state.GroupNameAttribute
		inputs["groupObjectClass"] = state.GroupObjectClass
		inputs["groupSearchAttribute"] = state.GroupSearchAttribute
		inputs["groupSearchBase"] = state.GroupSearchBase
		inputs["groupSearchFilter"] = state.GroupSearchFilter
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["nestedGroupMembershipEnabled"] = state.NestedGroupMembershipEnabled
		inputs["port"] = state.Port
		inputs["servers"] = state.Servers
		inputs["serviceAccountPassword"] = state.ServiceAccountPassword
		inputs["serviceAccountUsername"] = state.ServiceAccountUsername
		inputs["tls"] = state.Tls
		inputs["type"] = state.Type
		inputs["userDisabledBitMask"] = state.UserDisabledBitMask
		inputs["userEnabledAttribute"] = state.UserEnabledAttribute
		inputs["userLoginAttribute"] = state.UserLoginAttribute
		inputs["userNameAttribute"] = state.UserNameAttribute
		inputs["userObjectClass"] = state.UserObjectClass
		inputs["userSearchAttribute"] = state.UserSearchAttribute
		inputs["userSearchBase"] = state.UserSearchBase
		inputs["userSearchFilter"] = state.UserSearchFilter
	}
	s, err := ctx.ReadResource("rancher2:index/activeDirectory:ActiveDirectory", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ActiveDirectory{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ActiveDirectory) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ActiveDirectory) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
func (r *ActiveDirectory) AccessMode() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accessMode"])
}

// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `activedirectory_user://<DN>`  `activedirectory_group://<DN>` (list)
func (r *ActiveDirectory) AllowedPrincipalIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["allowedPrincipalIds"])
}

// Annotations of the resource (map)
func (r *ActiveDirectory) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// CA certificate for TLS if selfsigned (string)
func (r *ActiveDirectory) Certificate() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["certificate"])
}

// ActiveDirectory connection timeout. Default `5000` (int)
func (r *ActiveDirectory) ConnectionTimeout() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["connectionTimeout"])
}

// ActiveDirectory defult lgoin domain (string)
func (r *ActiveDirectory) DefaultLoginDomain() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["defaultLoginDomain"])
}

// Enable auth config provider. Default `true` (bool)
func (r *ActiveDirectory) Enabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enabled"])
}

// Group DN attribute. Default `distinguishedName` (string)
func (r *ActiveDirectory) GroupDnAttribute() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupDnAttribute"])
}

// Group member mapping attribute. Default `member` (string)
func (r *ActiveDirectory) GroupMemberMappingAttribute() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupMemberMappingAttribute"])
}

// Group member user attribute. Default `distinguishedName` (string)
func (r *ActiveDirectory) GroupMemberUserAttribute() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupMemberUserAttribute"])
}

// Group name attribute. Default `name` (string)
func (r *ActiveDirectory) GroupNameAttribute() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupNameAttribute"])
}

// Group object class. Default `group` (string)
func (r *ActiveDirectory) GroupObjectClass() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupObjectClass"])
}

// Group search attribute. Default `sAMAccountName` (string)
func (r *ActiveDirectory) GroupSearchAttribute() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupSearchAttribute"])
}

// Group search base (string)
func (r *ActiveDirectory) GroupSearchBase() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupSearchBase"])
}

// Group search filter (string)
func (r *ActiveDirectory) GroupSearchFilter() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["groupSearchFilter"])
}

// Labels of the resource (map)
func (r *ActiveDirectory) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// (Computed) The name of the resource (string)
func (r *ActiveDirectory) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Nested group membership enable. Default `false` (bool)
func (r *ActiveDirectory) NestedGroupMembershipEnabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["nestedGroupMembershipEnabled"])
}

// ActiveDirectory port. Default `389` (int)
func (r *ActiveDirectory) Port() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["port"])
}

// ActiveDirectory servers list (list)
func (r *ActiveDirectory) Servers() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["servers"])
}

// Service account password for access ActiveDirectory service (string)
func (r *ActiveDirectory) ServiceAccountPassword() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serviceAccountPassword"])
}

// Service account DN for access ActiveDirectory service (string)
func (r *ActiveDirectory) ServiceAccountUsername() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serviceAccountUsername"])
}

// Enable TLS connection (bool)
func (r *ActiveDirectory) Tls() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["tls"])
}

// (Computed) The type of the resource (string)
func (r *ActiveDirectory) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// User disabled bit mask. Default `2` (int)
func (r *ActiveDirectory) UserDisabledBitMask() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["userDisabledBitMask"])
}

// User enable attribute (string)
func (r *ActiveDirectory) UserEnabledAttribute() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userEnabledAttribute"])
}

// User login attribute. Default `sAMAccountName` (string)
func (r *ActiveDirectory) UserLoginAttribute() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userLoginAttribute"])
}

// User name attribute. Default `name` (string)
func (r *ActiveDirectory) UserNameAttribute() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userNameAttribute"])
}

// User object class. Default `person` (string)
func (r *ActiveDirectory) UserObjectClass() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userObjectClass"])
}

// User search attribute. Default `sAMAccountName|sn|givenName` (string)
func (r *ActiveDirectory) UserSearchAttribute() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userSearchAttribute"])
}

// User search base DN (string)
func (r *ActiveDirectory) UserSearchBase() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userSearchBase"])
}

// User search filter (string)
func (r *ActiveDirectory) UserSearchFilter() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["userSearchFilter"])
}

// Input properties used for looking up and filtering ActiveDirectory resources.
type ActiveDirectoryState struct {
	// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
	AccessMode interface{}
	// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `activedirectory_user://<DN>`  `activedirectory_group://<DN>` (list)
	AllowedPrincipalIds interface{}
	// Annotations of the resource (map)
	Annotations interface{}
	// CA certificate for TLS if selfsigned (string)
	Certificate interface{}
	// ActiveDirectory connection timeout. Default `5000` (int)
	ConnectionTimeout interface{}
	// ActiveDirectory defult lgoin domain (string)
	DefaultLoginDomain interface{}
	// Enable auth config provider. Default `true` (bool)
	Enabled interface{}
	// Group DN attribute. Default `distinguishedName` (string)
	GroupDnAttribute interface{}
	// Group member mapping attribute. Default `member` (string)
	GroupMemberMappingAttribute interface{}
	// Group member user attribute. Default `distinguishedName` (string)
	GroupMemberUserAttribute interface{}
	// Group name attribute. Default `name` (string)
	GroupNameAttribute interface{}
	// Group object class. Default `group` (string)
	GroupObjectClass interface{}
	// Group search attribute. Default `sAMAccountName` (string)
	GroupSearchAttribute interface{}
	// Group search base (string)
	GroupSearchBase interface{}
	// Group search filter (string)
	GroupSearchFilter interface{}
	// Labels of the resource (map)
	Labels interface{}
	// (Computed) The name of the resource (string)
	Name interface{}
	// Nested group membership enable. Default `false` (bool)
	NestedGroupMembershipEnabled interface{}
	// ActiveDirectory port. Default `389` (int)
	Port interface{}
	// ActiveDirectory servers list (list)
	Servers interface{}
	// Service account password for access ActiveDirectory service (string)
	ServiceAccountPassword interface{}
	// Service account DN for access ActiveDirectory service (string)
	ServiceAccountUsername interface{}
	// Enable TLS connection (bool)
	Tls interface{}
	// (Computed) The type of the resource (string)
	Type interface{}
	// User disabled bit mask. Default `2` (int)
	UserDisabledBitMask interface{}
	// User enable attribute (string)
	UserEnabledAttribute interface{}
	// User login attribute. Default `sAMAccountName` (string)
	UserLoginAttribute interface{}
	// User name attribute. Default `name` (string)
	UserNameAttribute interface{}
	// User object class. Default `person` (string)
	UserObjectClass interface{}
	// User search attribute. Default `sAMAccountName|sn|givenName` (string)
	UserSearchAttribute interface{}
	// User search base DN (string)
	UserSearchBase interface{}
	// User search filter (string)
	UserSearchFilter interface{}
}

// The set of arguments for constructing a ActiveDirectory resource.
type ActiveDirectoryArgs struct {
	// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
	AccessMode interface{}
	// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `activedirectory_user://<DN>`  `activedirectory_group://<DN>` (list)
	AllowedPrincipalIds interface{}
	// Annotations of the resource (map)
	Annotations interface{}
	// CA certificate for TLS if selfsigned (string)
	Certificate interface{}
	// ActiveDirectory connection timeout. Default `5000` (int)
	ConnectionTimeout interface{}
	// ActiveDirectory defult lgoin domain (string)
	DefaultLoginDomain interface{}
	// Enable auth config provider. Default `true` (bool)
	Enabled interface{}
	// Group DN attribute. Default `distinguishedName` (string)
	GroupDnAttribute interface{}
	// Group member mapping attribute. Default `member` (string)
	GroupMemberMappingAttribute interface{}
	// Group member user attribute. Default `distinguishedName` (string)
	GroupMemberUserAttribute interface{}
	// Group name attribute. Default `name` (string)
	GroupNameAttribute interface{}
	// Group object class. Default `group` (string)
	GroupObjectClass interface{}
	// Group search attribute. Default `sAMAccountName` (string)
	GroupSearchAttribute interface{}
	// Group search base (string)
	GroupSearchBase interface{}
	// Group search filter (string)
	GroupSearchFilter interface{}
	// Labels of the resource (map)
	Labels interface{}
	// Nested group membership enable. Default `false` (bool)
	NestedGroupMembershipEnabled interface{}
	// ActiveDirectory port. Default `389` (int)
	Port interface{}
	// ActiveDirectory servers list (list)
	Servers interface{}
	// Service account password for access ActiveDirectory service (string)
	ServiceAccountPassword interface{}
	// Service account DN for access ActiveDirectory service (string)
	ServiceAccountUsername interface{}
	// Enable TLS connection (bool)
	Tls interface{}
	// User disabled bit mask. Default `2` (int)
	UserDisabledBitMask interface{}
	// User enable attribute (string)
	UserEnabledAttribute interface{}
	// User login attribute. Default `sAMAccountName` (string)
	UserLoginAttribute interface{}
	// User name attribute. Default `name` (string)
	UserNameAttribute interface{}
	// User object class. Default `person` (string)
	UserObjectClass interface{}
	// User search attribute. Default `sAMAccountName|sn|givenName` (string)
	UserSearchAttribute interface{}
	// User search base DN (string)
	UserSearchBase interface{}
	// User search filter (string)
	UserSearchFilter interface{}
}
