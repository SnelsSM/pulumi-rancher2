// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AuthConfigAzureAd struct {
	pulumi.CustomResourceState

	AccessMode          pulumi.StringPtrOutput   `pulumi:"accessMode"`
	AllowedPrincipalIds pulumi.StringArrayOutput `pulumi:"allowedPrincipalIds"`
	// Annotations of the resource
	Annotations       pulumi.MapOutput       `pulumi:"annotations"`
	ApplicationId     pulumi.StringOutput    `pulumi:"applicationId"`
	ApplicationSecret pulumi.StringOutput    `pulumi:"applicationSecret"`
	AuthEndpoint      pulumi.StringOutput    `pulumi:"authEndpoint"`
	Enabled           pulumi.BoolPtrOutput   `pulumi:"enabled"`
	Endpoint          pulumi.StringPtrOutput `pulumi:"endpoint"`
	GraphEndpoint     pulumi.StringOutput    `pulumi:"graphEndpoint"`
	// Labels of the resource
	Labels        pulumi.MapOutput    `pulumi:"labels"`
	Name          pulumi.StringOutput `pulumi:"name"`
	RancherUrl    pulumi.StringOutput `pulumi:"rancherUrl"`
	TenantId      pulumi.StringOutput `pulumi:"tenantId"`
	TokenEndpoint pulumi.StringOutput `pulumi:"tokenEndpoint"`
	Type          pulumi.StringOutput `pulumi:"type"`
}

// NewAuthConfigAzureAd registers a new resource with the given unique name, arguments, and options.
func NewAuthConfigAzureAd(ctx *pulumi.Context,
	name string, args *AuthConfigAzureAdArgs, opts ...pulumi.ResourceOption) (*AuthConfigAzureAd, error) {
	if args == nil || args.ApplicationId == nil {
		return nil, errors.New("missing required argument 'ApplicationId'")
	}
	if args == nil || args.ApplicationSecret == nil {
		return nil, errors.New("missing required argument 'ApplicationSecret'")
	}
	if args == nil || args.AuthEndpoint == nil {
		return nil, errors.New("missing required argument 'AuthEndpoint'")
	}
	if args == nil || args.GraphEndpoint == nil {
		return nil, errors.New("missing required argument 'GraphEndpoint'")
	}
	if args == nil || args.RancherUrl == nil {
		return nil, errors.New("missing required argument 'RancherUrl'")
	}
	if args == nil || args.TenantId == nil {
		return nil, errors.New("missing required argument 'TenantId'")
	}
	if args == nil || args.TokenEndpoint == nil {
		return nil, errors.New("missing required argument 'TokenEndpoint'")
	}
	if args == nil {
		args = &AuthConfigAzureAdArgs{}
	}
	var resource AuthConfigAzureAd
	err := ctx.RegisterResource("rancher2:index/authConfigAzureAd:AuthConfigAzureAd", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthConfigAzureAd gets an existing AuthConfigAzureAd resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthConfigAzureAd(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthConfigAzureAdState, opts ...pulumi.ResourceOption) (*AuthConfigAzureAd, error) {
	var resource AuthConfigAzureAd
	err := ctx.ReadResource("rancher2:index/authConfigAzureAd:AuthConfigAzureAd", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthConfigAzureAd resources.
type authConfigAzureAdState struct {
	AccessMode          *string  `pulumi:"accessMode"`
	AllowedPrincipalIds []string `pulumi:"allowedPrincipalIds"`
	// Annotations of the resource
	Annotations       map[string]interface{} `pulumi:"annotations"`
	ApplicationId     *string                `pulumi:"applicationId"`
	ApplicationSecret *string                `pulumi:"applicationSecret"`
	AuthEndpoint      *string                `pulumi:"authEndpoint"`
	Enabled           *bool                  `pulumi:"enabled"`
	Endpoint          *string                `pulumi:"endpoint"`
	GraphEndpoint     *string                `pulumi:"graphEndpoint"`
	// Labels of the resource
	Labels        map[string]interface{} `pulumi:"labels"`
	Name          *string                `pulumi:"name"`
	RancherUrl    *string                `pulumi:"rancherUrl"`
	TenantId      *string                `pulumi:"tenantId"`
	TokenEndpoint *string                `pulumi:"tokenEndpoint"`
	Type          *string                `pulumi:"type"`
}

type AuthConfigAzureAdState struct {
	AccessMode          pulumi.StringPtrInput
	AllowedPrincipalIds pulumi.StringArrayInput
	// Annotations of the resource
	Annotations       pulumi.MapInput
	ApplicationId     pulumi.StringPtrInput
	ApplicationSecret pulumi.StringPtrInput
	AuthEndpoint      pulumi.StringPtrInput
	Enabled           pulumi.BoolPtrInput
	Endpoint          pulumi.StringPtrInput
	GraphEndpoint     pulumi.StringPtrInput
	// Labels of the resource
	Labels        pulumi.MapInput
	Name          pulumi.StringPtrInput
	RancherUrl    pulumi.StringPtrInput
	TenantId      pulumi.StringPtrInput
	TokenEndpoint pulumi.StringPtrInput
	Type          pulumi.StringPtrInput
}

func (AuthConfigAzureAdState) ElementType() reflect.Type {
	return reflect.TypeOf((*authConfigAzureAdState)(nil)).Elem()
}

type authConfigAzureAdArgs struct {
	AccessMode          *string  `pulumi:"accessMode"`
	AllowedPrincipalIds []string `pulumi:"allowedPrincipalIds"`
	// Annotations of the resource
	Annotations       map[string]interface{} `pulumi:"annotations"`
	ApplicationId     string                 `pulumi:"applicationId"`
	ApplicationSecret string                 `pulumi:"applicationSecret"`
	AuthEndpoint      string                 `pulumi:"authEndpoint"`
	Enabled           *bool                  `pulumi:"enabled"`
	Endpoint          *string                `pulumi:"endpoint"`
	GraphEndpoint     string                 `pulumi:"graphEndpoint"`
	// Labels of the resource
	Labels        map[string]interface{} `pulumi:"labels"`
	RancherUrl    string                 `pulumi:"rancherUrl"`
	TenantId      string                 `pulumi:"tenantId"`
	TokenEndpoint string                 `pulumi:"tokenEndpoint"`
}

// The set of arguments for constructing a AuthConfigAzureAd resource.
type AuthConfigAzureAdArgs struct {
	AccessMode          pulumi.StringPtrInput
	AllowedPrincipalIds pulumi.StringArrayInput
	// Annotations of the resource
	Annotations       pulumi.MapInput
	ApplicationId     pulumi.StringInput
	ApplicationSecret pulumi.StringInput
	AuthEndpoint      pulumi.StringInput
	Enabled           pulumi.BoolPtrInput
	Endpoint          pulumi.StringPtrInput
	GraphEndpoint     pulumi.StringInput
	// Labels of the resource
	Labels        pulumi.MapInput
	RancherUrl    pulumi.StringInput
	TenantId      pulumi.StringInput
	TokenEndpoint pulumi.StringInput
}

func (AuthConfigAzureAdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authConfigAzureAdArgs)(nil)).Elem()
}
