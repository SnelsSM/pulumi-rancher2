// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Rancher v2 Auth Config AzureAD resource. This can be used to configure and enable Auth Config AzureAD for Rancher v2 RKE clusters and retrieve their information.
// 
// In addition to the built-in local auth, only one external auth config provider can be enabled at a time.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/auth_config_azuread.html.markdown.
type AuthConfigAzureAd struct {
	s *pulumi.ResourceState
}

// NewAuthConfigAzureAd registers a new resource with the given unique name, arguments, and options.
func NewAuthConfigAzureAd(ctx *pulumi.Context,
	name string, args *AuthConfigAzureAdArgs, opts ...pulumi.ResourceOpt) (*AuthConfigAzureAd, error) {
	if args == nil || args.ApplicationId == nil {
		return nil, errors.New("missing required argument 'ApplicationId'")
	}
	if args == nil || args.ApplicationSecret == nil {
		return nil, errors.New("missing required argument 'ApplicationSecret'")
	}
	if args == nil || args.AuthEndpoint == nil {
		return nil, errors.New("missing required argument 'AuthEndpoint'")
	}
	if args == nil || args.GraphEndpoint == nil {
		return nil, errors.New("missing required argument 'GraphEndpoint'")
	}
	if args == nil || args.RancherUrl == nil {
		return nil, errors.New("missing required argument 'RancherUrl'")
	}
	if args == nil || args.TenantId == nil {
		return nil, errors.New("missing required argument 'TenantId'")
	}
	if args == nil || args.TokenEndpoint == nil {
		return nil, errors.New("missing required argument 'TokenEndpoint'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessMode"] = nil
		inputs["allowedPrincipalIds"] = nil
		inputs["annotations"] = nil
		inputs["applicationId"] = nil
		inputs["applicationSecret"] = nil
		inputs["authEndpoint"] = nil
		inputs["enabled"] = nil
		inputs["endpoint"] = nil
		inputs["graphEndpoint"] = nil
		inputs["labels"] = nil
		inputs["rancherUrl"] = nil
		inputs["tenantId"] = nil
		inputs["tokenEndpoint"] = nil
	} else {
		inputs["accessMode"] = args.AccessMode
		inputs["allowedPrincipalIds"] = args.AllowedPrincipalIds
		inputs["annotations"] = args.Annotations
		inputs["applicationId"] = args.ApplicationId
		inputs["applicationSecret"] = args.ApplicationSecret
		inputs["authEndpoint"] = args.AuthEndpoint
		inputs["enabled"] = args.Enabled
		inputs["endpoint"] = args.Endpoint
		inputs["graphEndpoint"] = args.GraphEndpoint
		inputs["labels"] = args.Labels
		inputs["rancherUrl"] = args.RancherUrl
		inputs["tenantId"] = args.TenantId
		inputs["tokenEndpoint"] = args.TokenEndpoint
	}
	inputs["name"] = nil
	inputs["type"] = nil
	s, err := ctx.RegisterResource("rancher2:index/authConfigAzureAd:AuthConfigAzureAd", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthConfigAzureAd{s: s}, nil
}

// GetAuthConfigAzureAd gets an existing AuthConfigAzureAd resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthConfigAzureAd(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AuthConfigAzureAdState, opts ...pulumi.ResourceOpt) (*AuthConfigAzureAd, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessMode"] = state.AccessMode
		inputs["allowedPrincipalIds"] = state.AllowedPrincipalIds
		inputs["annotations"] = state.Annotations
		inputs["applicationId"] = state.ApplicationId
		inputs["applicationSecret"] = state.ApplicationSecret
		inputs["authEndpoint"] = state.AuthEndpoint
		inputs["enabled"] = state.Enabled
		inputs["endpoint"] = state.Endpoint
		inputs["graphEndpoint"] = state.GraphEndpoint
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["rancherUrl"] = state.RancherUrl
		inputs["tenantId"] = state.TenantId
		inputs["tokenEndpoint"] = state.TokenEndpoint
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("rancher2:index/authConfigAzureAd:AuthConfigAzureAd", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthConfigAzureAd{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AuthConfigAzureAd) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AuthConfigAzureAd) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
func (r *AuthConfigAzureAd) AccessMode() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accessMode"])
}

// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `azuread_user://<USER_ID>`  `azuread_group://<GROUP_ID>` (list)
func (r *AuthConfigAzureAd) AllowedPrincipalIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["allowedPrincipalIds"])
}

// Annotations of the resource (map)
func (r *AuthConfigAzureAd) Annotations() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["annotations"])
}

// AzureAD auth application ID (string)
func (r *AuthConfigAzureAd) ApplicationId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["applicationId"])
}

// AzureAD auth application secret (string)
func (r *AuthConfigAzureAd) ApplicationSecret() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["applicationSecret"])
}

// AzureAD auth endpoint (string)
func (r *AuthConfigAzureAd) AuthEndpoint() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["authEndpoint"])
}

// Enable auth config provider. Default `true` (bool)
func (r *AuthConfigAzureAd) Enabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enabled"])
}

// AzureAD endpoint. Default `https://login.microsoftonline.com/` (string)
func (r *AuthConfigAzureAd) Endpoint() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["endpoint"])
}

// AzureAD graph endpoint (string)
func (r *AuthConfigAzureAd) GraphEndpoint() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["graphEndpoint"])
}

// Labels of the resource (map)
func (r *AuthConfigAzureAd) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// (Computed) The name of the resource (string)
func (r *AuthConfigAzureAd) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Rancher URL (string). "<rancher_url>/verify-auth-azure"
func (r *AuthConfigAzureAd) RancherUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["rancherUrl"])
}

// AzureAD tenant ID (string)
func (r *AuthConfigAzureAd) TenantId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tenantId"])
}

// AzureAD token endpoint (string)
func (r *AuthConfigAzureAd) TokenEndpoint() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tokenEndpoint"])
}

// (Computed) The type of the resource (string)
func (r *AuthConfigAzureAd) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering AuthConfigAzureAd resources.
type AuthConfigAzureAdState struct {
	// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
	AccessMode interface{}
	// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `azuread_user://<USER_ID>`  `azuread_group://<GROUP_ID>` (list)
	AllowedPrincipalIds interface{}
	// Annotations of the resource (map)
	Annotations interface{}
	// AzureAD auth application ID (string)
	ApplicationId interface{}
	// AzureAD auth application secret (string)
	ApplicationSecret interface{}
	// AzureAD auth endpoint (string)
	AuthEndpoint interface{}
	// Enable auth config provider. Default `true` (bool)
	Enabled interface{}
	// AzureAD endpoint. Default `https://login.microsoftonline.com/` (string)
	Endpoint interface{}
	// AzureAD graph endpoint (string)
	GraphEndpoint interface{}
	// Labels of the resource (map)
	Labels interface{}
	// (Computed) The name of the resource (string)
	Name interface{}
	// Rancher URL (string). "<rancher_url>/verify-auth-azure"
	RancherUrl interface{}
	// AzureAD tenant ID (string)
	TenantId interface{}
	// AzureAD token endpoint (string)
	TokenEndpoint interface{}
	// (Computed) The type of the resource (string)
	Type interface{}
}

// The set of arguments for constructing a AuthConfigAzureAd resource.
type AuthConfigAzureAdArgs struct {
	// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
	AccessMode interface{}
	// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `azuread_user://<USER_ID>`  `azuread_group://<GROUP_ID>` (list)
	AllowedPrincipalIds interface{}
	// Annotations of the resource (map)
	Annotations interface{}
	// AzureAD auth application ID (string)
	ApplicationId interface{}
	// AzureAD auth application secret (string)
	ApplicationSecret interface{}
	// AzureAD auth endpoint (string)
	AuthEndpoint interface{}
	// Enable auth config provider. Default `true` (bool)
	Enabled interface{}
	// AzureAD endpoint. Default `https://login.microsoftonline.com/` (string)
	Endpoint interface{}
	// AzureAD graph endpoint (string)
	GraphEndpoint interface{}
	// Labels of the resource (map)
	Labels interface{}
	// Rancher URL (string). "<rancher_url>/verify-auth-azure"
	RancherUrl interface{}
	// AzureAD tenant ID (string)
	TenantId interface{}
	// AzureAD token endpoint (string)
	TokenEndpoint interface{}
}
