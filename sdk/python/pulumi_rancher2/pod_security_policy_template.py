# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['PodSecurityPolicyTemplate']


class PodSecurityPolicyTemplate(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_privilege_escalation: Optional[pulumi.Input[bool]] = None,
                 allowed_capabilities: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allowed_csi_drivers: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateAllowedCsiDriverArgs']]]]] = None,
                 allowed_flex_volumes: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateAllowedFlexVolumeArgs']]]]] = None,
                 allowed_host_paths: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateAllowedHostPathArgs']]]]] = None,
                 allowed_proc_mount_types: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 allowed_unsafe_sysctls: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 default_add_capabilities: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 default_allow_privilege_escalation: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 forbidden_sysctls: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 fs_group: Optional[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateFsGroupArgs']]] = None,
                 host_ipc: Optional[pulumi.Input[bool]] = None,
                 host_network: Optional[pulumi.Input[bool]] = None,
                 host_pid: Optional[pulumi.Input[bool]] = None,
                 host_ports: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateHostPortArgs']]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 privileged: Optional[pulumi.Input[bool]] = None,
                 read_only_root_filesystem: Optional[pulumi.Input[bool]] = None,
                 required_drop_capabilities: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 run_as_group: Optional[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateRunAsGroupArgs']]] = None,
                 run_as_user: Optional[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateRunAsUserArgs']]] = None,
                 runtime_class: Optional[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateRuntimeClassArgs']]] = None,
                 se_linux: Optional[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateSeLinuxArgs']]] = None,
                 supplemental_group: Optional[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateSupplementalGroupArgs']]] = None,
                 volumes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a PodSecurityPolicyTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_privilege_escalation: allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to
               true.
        :param pulumi.Input[List[pulumi.Input[str]]] allowed_capabilities: allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field
               may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and
               requiredDropCapabilities.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateAllowedCsiDriverArgs']]]] allowed_csi_drivers: AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An
               empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only
               honored if the API server enables the CSIInlineVolume feature gate.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateAllowedFlexVolumeArgs']]]] allowed_flex_volumes: allowedFlexVolumes is a whitelist of allowed Flexvolumes. Empty or nil indicates that all Flexvolumes may be used. This
               parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateAllowedHostPathArgs']]]] allowed_host_paths: allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
        :param pulumi.Input[List[pulumi.Input[str]]] allowed_proc_mount_types: AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the
               DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
        :param pulumi.Input[List[pulumi.Input[str]]] allowed_unsafe_sysctls: allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain
               sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe
               sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations of the resource
        :param pulumi.Input[List[pulumi.Input[str]]] default_add_capabilities: defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec
               specifically drops the capability. You may not list a capability in both defaultAddCapabilities and
               requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the
               allowedCapabilities list.
        :param pulumi.Input[bool] default_allow_privilege_escalation: defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its
               parent process.
        :param pulumi.Input[str] description: Pod Security Policy template policy description
        :param pulumi.Input[List[pulumi.Input[str]]] forbidden_sysctls: forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name
               or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are
               forbidden.
        :param pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateFsGroupArgs']] fs_group: fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
        :param pulumi.Input[bool] host_ipc: hostIPC determines if the policy allows the use of HostIPC in the pod spec.
        :param pulumi.Input[bool] host_network: hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
        :param pulumi.Input[bool] host_pid: hostPID determines if the policy allows the use of HostPID in the pod spec.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateHostPortArgs']]]] host_ports: hostPorts determines which host port ranges are allowed to be exposed.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of the resource
        :param pulumi.Input[str] name: Pod Security Policy template policy name
        :param pulumi.Input[bool] privileged: privileged determines if a pod can request to be run as privileged.
        :param pulumi.Input[bool] read_only_root_filesystem: readOnlyRootFilesystem when set to true will force containers to run with a read only root file system. If the container
               specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the
               container may run with a read only root file system if it wishes but it will not be forced to.
        :param pulumi.Input[List[pulumi.Input[str]]] required_drop_capabilities: requiredDropCapabilities are the capabilities that will be dropped from the container. These are required to be dropped
               and cannot be added.
        :param pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateRunAsGroupArgs']] run_as_group: RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted,
               the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
        :param pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateRunAsUserArgs']] run_as_user: runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
        :param pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateRuntimeClassArgs']] runtime_class: runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the
               pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being
               enabled.
        :param pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateSeLinuxArgs']] se_linux: seLinux is the strategy that will dictate the allowable labels that may be set.
        :param pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateSupplementalGroupArgs']] supplemental_group: supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
        :param pulumi.Input[List[pulumi.Input[str]]] volumes: volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you
               may use '*'
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['allow_privilege_escalation'] = allow_privilege_escalation
            __props__['allowed_capabilities'] = allowed_capabilities
            __props__['allowed_csi_drivers'] = allowed_csi_drivers
            __props__['allowed_flex_volumes'] = allowed_flex_volumes
            __props__['allowed_host_paths'] = allowed_host_paths
            __props__['allowed_proc_mount_types'] = allowed_proc_mount_types
            __props__['allowed_unsafe_sysctls'] = allowed_unsafe_sysctls
            __props__['annotations'] = annotations
            __props__['default_add_capabilities'] = default_add_capabilities
            __props__['default_allow_privilege_escalation'] = default_allow_privilege_escalation
            __props__['description'] = description
            __props__['forbidden_sysctls'] = forbidden_sysctls
            __props__['fs_group'] = fs_group
            __props__['host_ipc'] = host_ipc
            __props__['host_network'] = host_network
            __props__['host_pid'] = host_pid
            __props__['host_ports'] = host_ports
            __props__['labels'] = labels
            __props__['name'] = name
            __props__['privileged'] = privileged
            __props__['read_only_root_filesystem'] = read_only_root_filesystem
            __props__['required_drop_capabilities'] = required_drop_capabilities
            __props__['run_as_group'] = run_as_group
            __props__['run_as_user'] = run_as_user
            __props__['runtime_class'] = runtime_class
            __props__['se_linux'] = se_linux
            __props__['supplemental_group'] = supplemental_group
            __props__['volumes'] = volumes
        super(PodSecurityPolicyTemplate, __self__).__init__(
            'rancher2:index/podSecurityPolicyTemplate:PodSecurityPolicyTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_privilege_escalation: Optional[pulumi.Input[bool]] = None,
            allowed_capabilities: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
            allowed_csi_drivers: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateAllowedCsiDriverArgs']]]]] = None,
            allowed_flex_volumes: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateAllowedFlexVolumeArgs']]]]] = None,
            allowed_host_paths: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateAllowedHostPathArgs']]]]] = None,
            allowed_proc_mount_types: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
            allowed_unsafe_sysctls: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
            annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            default_add_capabilities: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
            default_allow_privilege_escalation: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            forbidden_sysctls: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
            fs_group: Optional[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateFsGroupArgs']]] = None,
            host_ipc: Optional[pulumi.Input[bool]] = None,
            host_network: Optional[pulumi.Input[bool]] = None,
            host_pid: Optional[pulumi.Input[bool]] = None,
            host_ports: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateHostPortArgs']]]]] = None,
            labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            privileged: Optional[pulumi.Input[bool]] = None,
            read_only_root_filesystem: Optional[pulumi.Input[bool]] = None,
            required_drop_capabilities: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
            run_as_group: Optional[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateRunAsGroupArgs']]] = None,
            run_as_user: Optional[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateRunAsUserArgs']]] = None,
            runtime_class: Optional[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateRuntimeClassArgs']]] = None,
            se_linux: Optional[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateSeLinuxArgs']]] = None,
            supplemental_group: Optional[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateSupplementalGroupArgs']]] = None,
            volumes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> 'PodSecurityPolicyTemplate':
        """
        Get an existing PodSecurityPolicyTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_privilege_escalation: allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to
               true.
        :param pulumi.Input[List[pulumi.Input[str]]] allowed_capabilities: allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field
               may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and
               requiredDropCapabilities.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateAllowedCsiDriverArgs']]]] allowed_csi_drivers: AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An
               empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only
               honored if the API server enables the CSIInlineVolume feature gate.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateAllowedFlexVolumeArgs']]]] allowed_flex_volumes: allowedFlexVolumes is a whitelist of allowed Flexvolumes. Empty or nil indicates that all Flexvolumes may be used. This
               parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateAllowedHostPathArgs']]]] allowed_host_paths: allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
        :param pulumi.Input[List[pulumi.Input[str]]] allowed_proc_mount_types: AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the
               DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
        :param pulumi.Input[List[pulumi.Input[str]]] allowed_unsafe_sysctls: allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain
               sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe
               sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations of the resource
        :param pulumi.Input[List[pulumi.Input[str]]] default_add_capabilities: defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec
               specifically drops the capability. You may not list a capability in both defaultAddCapabilities and
               requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the
               allowedCapabilities list.
        :param pulumi.Input[bool] default_allow_privilege_escalation: defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its
               parent process.
        :param pulumi.Input[str] description: Pod Security Policy template policy description
        :param pulumi.Input[List[pulumi.Input[str]]] forbidden_sysctls: forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name
               or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are
               forbidden.
        :param pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateFsGroupArgs']] fs_group: fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
        :param pulumi.Input[bool] host_ipc: hostIPC determines if the policy allows the use of HostIPC in the pod spec.
        :param pulumi.Input[bool] host_network: hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
        :param pulumi.Input[bool] host_pid: hostPID determines if the policy allows the use of HostPID in the pod spec.
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateHostPortArgs']]]] host_ports: hostPorts determines which host port ranges are allowed to be exposed.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of the resource
        :param pulumi.Input[str] name: Pod Security Policy template policy name
        :param pulumi.Input[bool] privileged: privileged determines if a pod can request to be run as privileged.
        :param pulumi.Input[bool] read_only_root_filesystem: readOnlyRootFilesystem when set to true will force containers to run with a read only root file system. If the container
               specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the
               container may run with a read only root file system if it wishes but it will not be forced to.
        :param pulumi.Input[List[pulumi.Input[str]]] required_drop_capabilities: requiredDropCapabilities are the capabilities that will be dropped from the container. These are required to be dropped
               and cannot be added.
        :param pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateRunAsGroupArgs']] run_as_group: RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted,
               the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
        :param pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateRunAsUserArgs']] run_as_user: runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
        :param pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateRuntimeClassArgs']] runtime_class: runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the
               pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being
               enabled.
        :param pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateSeLinuxArgs']] se_linux: seLinux is the strategy that will dictate the allowable labels that may be set.
        :param pulumi.Input[pulumi.InputType['PodSecurityPolicyTemplateSupplementalGroupArgs']] supplemental_group: supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
        :param pulumi.Input[List[pulumi.Input[str]]] volumes: volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you
               may use '*'
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["allow_privilege_escalation"] = allow_privilege_escalation
        __props__["allowed_capabilities"] = allowed_capabilities
        __props__["allowed_csi_drivers"] = allowed_csi_drivers
        __props__["allowed_flex_volumes"] = allowed_flex_volumes
        __props__["allowed_host_paths"] = allowed_host_paths
        __props__["allowed_proc_mount_types"] = allowed_proc_mount_types
        __props__["allowed_unsafe_sysctls"] = allowed_unsafe_sysctls
        __props__["annotations"] = annotations
        __props__["default_add_capabilities"] = default_add_capabilities
        __props__["default_allow_privilege_escalation"] = default_allow_privilege_escalation
        __props__["description"] = description
        __props__["forbidden_sysctls"] = forbidden_sysctls
        __props__["fs_group"] = fs_group
        __props__["host_ipc"] = host_ipc
        __props__["host_network"] = host_network
        __props__["host_pid"] = host_pid
        __props__["host_ports"] = host_ports
        __props__["labels"] = labels
        __props__["name"] = name
        __props__["privileged"] = privileged
        __props__["read_only_root_filesystem"] = read_only_root_filesystem
        __props__["required_drop_capabilities"] = required_drop_capabilities
        __props__["run_as_group"] = run_as_group
        __props__["run_as_user"] = run_as_user
        __props__["runtime_class"] = runtime_class
        __props__["se_linux"] = se_linux
        __props__["supplemental_group"] = supplemental_group
        __props__["volumes"] = volumes
        return PodSecurityPolicyTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> pulumi.Output[bool]:
        """
        allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to
        true.
        """
        return pulumi.get(self, "allow_privilege_escalation")

    @property
    @pulumi.getter(name="allowedCapabilities")
    def allowed_capabilities(self) -> pulumi.Output[Optional[List[str]]]:
        """
        allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field
        may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and
        requiredDropCapabilities.
        """
        return pulumi.get(self, "allowed_capabilities")

    @property
    @pulumi.getter(name="allowedCsiDrivers")
    def allowed_csi_drivers(self) -> pulumi.Output[Optional[List['outputs.PodSecurityPolicyTemplateAllowedCsiDriver']]]:
        """
        AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An
        empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only
        honored if the API server enables the CSIInlineVolume feature gate.
        """
        return pulumi.get(self, "allowed_csi_drivers")

    @property
    @pulumi.getter(name="allowedFlexVolumes")
    def allowed_flex_volumes(self) -> pulumi.Output[Optional[List['outputs.PodSecurityPolicyTemplateAllowedFlexVolume']]]:
        """
        allowedFlexVolumes is a whitelist of allowed Flexvolumes. Empty or nil indicates that all Flexvolumes may be used. This
        parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
        """
        return pulumi.get(self, "allowed_flex_volumes")

    @property
    @pulumi.getter(name="allowedHostPaths")
    def allowed_host_paths(self) -> pulumi.Output[Optional[List['outputs.PodSecurityPolicyTemplateAllowedHostPath']]]:
        """
        allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
        """
        return pulumi.get(self, "allowed_host_paths")

    @property
    @pulumi.getter(name="allowedProcMountTypes")
    def allowed_proc_mount_types(self) -> pulumi.Output[Optional[List[str]]]:
        """
        AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the
        DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
        """
        return pulumi.get(self, "allowed_proc_mount_types")

    @property
    @pulumi.getter(name="allowedUnsafeSysctls")
    def allowed_unsafe_sysctls(self) -> pulumi.Output[Optional[List[str]]]:
        """
        allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain
        sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe
        sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
        """
        return pulumi.get(self, "allowed_unsafe_sysctls")

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Annotations of the resource
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="defaultAddCapabilities")
    def default_add_capabilities(self) -> pulumi.Output[Optional[List[str]]]:
        """
        defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec
        specifically drops the capability. You may not list a capability in both defaultAddCapabilities and
        requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the
        allowedCapabilities list.
        """
        return pulumi.get(self, "default_add_capabilities")

    @property
    @pulumi.getter(name="defaultAllowPrivilegeEscalation")
    def default_allow_privilege_escalation(self) -> pulumi.Output[Optional[bool]]:
        """
        defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its
        parent process.
        """
        return pulumi.get(self, "default_allow_privilege_escalation")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Pod Security Policy template policy description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="forbiddenSysctls")
    def forbidden_sysctls(self) -> pulumi.Output[Optional[List[str]]]:
        """
        forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name
        or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are
        forbidden.
        """
        return pulumi.get(self, "forbidden_sysctls")

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> pulumi.Output['outputs.PodSecurityPolicyTemplateFsGroup']:
        """
        fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
        """
        return pulumi.get(self, "fs_group")

    @property
    @pulumi.getter(name="hostIpc")
    def host_ipc(self) -> pulumi.Output[bool]:
        """
        hostIPC determines if the policy allows the use of HostIPC in the pod spec.
        """
        return pulumi.get(self, "host_ipc")

    @property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> pulumi.Output[bool]:
        """
        hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
        """
        return pulumi.get(self, "host_network")

    @property
    @pulumi.getter(name="hostPid")
    def host_pid(self) -> pulumi.Output[bool]:
        """
        hostPID determines if the policy allows the use of HostPID in the pod spec.
        """
        return pulumi.get(self, "host_pid")

    @property
    @pulumi.getter(name="hostPorts")
    def host_ports(self) -> pulumi.Output[List['outputs.PodSecurityPolicyTemplateHostPort']]:
        """
        hostPorts determines which host port ranges are allowed to be exposed.
        """
        return pulumi.get(self, "host_ports")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Labels of the resource
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Pod Security Policy template policy name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def privileged(self) -> pulumi.Output[bool]:
        """
        privileged determines if a pod can request to be run as privileged.
        """
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> pulumi.Output[bool]:
        """
        readOnlyRootFilesystem when set to true will force containers to run with a read only root file system. If the container
        specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the
        container may run with a read only root file system if it wishes but it will not be forced to.
        """
        return pulumi.get(self, "read_only_root_filesystem")

    @property
    @pulumi.getter(name="requiredDropCapabilities")
    def required_drop_capabilities(self) -> pulumi.Output[Optional[List[str]]]:
        """
        requiredDropCapabilities are the capabilities that will be dropped from the container. These are required to be dropped
        and cannot be added.
        """
        return pulumi.get(self, "required_drop_capabilities")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> pulumi.Output[Optional['outputs.PodSecurityPolicyTemplateRunAsGroup']]:
        """
        RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted,
        the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
        """
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> pulumi.Output['outputs.PodSecurityPolicyTemplateRunAsUser']:
        """
        runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
        """
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="runtimeClass")
    def runtime_class(self) -> pulumi.Output[Optional['outputs.PodSecurityPolicyTemplateRuntimeClass']]:
        """
        runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the
        pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being
        enabled.
        """
        return pulumi.get(self, "runtime_class")

    @property
    @pulumi.getter(name="seLinux")
    def se_linux(self) -> pulumi.Output['outputs.PodSecurityPolicyTemplateSeLinux']:
        """
        seLinux is the strategy that will dictate the allowable labels that may be set.
        """
        return pulumi.get(self, "se_linux")

    @property
    @pulumi.getter(name="supplementalGroup")
    def supplemental_group(self) -> pulumi.Output['outputs.PodSecurityPolicyTemplateSupplementalGroup']:
        """
        supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
        """
        return pulumi.get(self, "supplemental_group")

    @property
    @pulumi.getter
    def volumes(self) -> pulumi.Output[List[str]]:
        """
        volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you
        may use '*'
        """
        return pulumi.get(self, "volumes")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

