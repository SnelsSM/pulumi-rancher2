# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['MultiClusterApp']


class MultiClusterApp(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 answers: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['MultiClusterAppAnswerArgs']]]]] = None,
                 catalog_name: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 members: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['MultiClusterAppMemberArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 revision_history_limit: Optional[pulumi.Input[float]] = None,
                 revision_id: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 targets: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['MultiClusterAppTargetArgs']]]]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 template_version: Optional[pulumi.Input[str]] = None,
                 upgrade_strategy: Optional[pulumi.Input[pulumi.InputType['MultiClusterAppUpgradeStrategyArgs']]] = None,
                 wait: Optional[pulumi.Input[bool]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a MultiClusterApp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations of the resource
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['MultiClusterAppAnswerArgs']]]] answers: Multi cluster app answers
        :param pulumi.Input[str] catalog_name: Multi cluster app catalog name
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of the resource
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['MultiClusterAppMemberArgs']]]] members: Multi cluster app members
        :param pulumi.Input[str] name: Multi cluster app name
        :param pulumi.Input[float] revision_history_limit: Multi cluster app revision history limit
        :param pulumi.Input[str] revision_id: Multi cluster app revision name
        :param pulumi.Input[List[pulumi.Input[str]]] roles: Multi cluster app roles
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['MultiClusterAppTargetArgs']]]] targets: Multi cluster app targets
        :param pulumi.Input[str] template_name: Multi cluster app template name
        :param pulumi.Input[str] template_version: Multi cluster app template version
        :param pulumi.Input[pulumi.InputType['MultiClusterAppUpgradeStrategyArgs']] upgrade_strategy: Multi cluster app upgrade strategy
        :param pulumi.Input[bool] wait: Wait until multi cluster app is active
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['annotations'] = annotations
            __props__['answers'] = answers
            if catalog_name is None:
                raise TypeError("Missing required property 'catalog_name'")
            __props__['catalog_name'] = catalog_name
            __props__['labels'] = labels
            __props__['members'] = members
            __props__['name'] = name
            __props__['revision_history_limit'] = revision_history_limit
            __props__['revision_id'] = revision_id
            if roles is None:
                raise TypeError("Missing required property 'roles'")
            __props__['roles'] = roles
            if targets is None:
                raise TypeError("Missing required property 'targets'")
            __props__['targets'] = targets
            if template_name is None:
                raise TypeError("Missing required property 'template_name'")
            __props__['template_name'] = template_name
            __props__['template_version'] = template_version
            __props__['upgrade_strategy'] = upgrade_strategy
            __props__['wait'] = wait
            __props__['template_version_id'] = None
        super(MultiClusterApp, __self__).__init__(
            'rancher2:index/multiClusterApp:MultiClusterApp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            answers: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['MultiClusterAppAnswerArgs']]]]] = None,
            catalog_name: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            members: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['MultiClusterAppMemberArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            revision_history_limit: Optional[pulumi.Input[float]] = None,
            revision_id: Optional[pulumi.Input[str]] = None,
            roles: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
            targets: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['MultiClusterAppTargetArgs']]]]] = None,
            template_name: Optional[pulumi.Input[str]] = None,
            template_version: Optional[pulumi.Input[str]] = None,
            template_version_id: Optional[pulumi.Input[str]] = None,
            upgrade_strategy: Optional[pulumi.Input[pulumi.InputType['MultiClusterAppUpgradeStrategyArgs']]] = None,
            wait: Optional[pulumi.Input[bool]] = None) -> 'MultiClusterApp':
        """
        Get an existing MultiClusterApp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations of the resource
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['MultiClusterAppAnswerArgs']]]] answers: Multi cluster app answers
        :param pulumi.Input[str] catalog_name: Multi cluster app catalog name
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of the resource
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['MultiClusterAppMemberArgs']]]] members: Multi cluster app members
        :param pulumi.Input[str] name: Multi cluster app name
        :param pulumi.Input[float] revision_history_limit: Multi cluster app revision history limit
        :param pulumi.Input[str] revision_id: Multi cluster app revision name
        :param pulumi.Input[List[pulumi.Input[str]]] roles: Multi cluster app roles
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['MultiClusterAppTargetArgs']]]] targets: Multi cluster app targets
        :param pulumi.Input[str] template_name: Multi cluster app template name
        :param pulumi.Input[str] template_version: Multi cluster app template version
        :param pulumi.Input[str] template_version_id: Multi cluster app template version ID
        :param pulumi.Input[pulumi.InputType['MultiClusterAppUpgradeStrategyArgs']] upgrade_strategy: Multi cluster app upgrade strategy
        :param pulumi.Input[bool] wait: Wait until multi cluster app is active
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["annotations"] = annotations
        __props__["answers"] = answers
        __props__["catalog_name"] = catalog_name
        __props__["labels"] = labels
        __props__["members"] = members
        __props__["name"] = name
        __props__["revision_history_limit"] = revision_history_limit
        __props__["revision_id"] = revision_id
        __props__["roles"] = roles
        __props__["targets"] = targets
        __props__["template_name"] = template_name
        __props__["template_version"] = template_version
        __props__["template_version_id"] = template_version_id
        __props__["upgrade_strategy"] = upgrade_strategy
        __props__["wait"] = wait
        return MultiClusterApp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Annotations of the resource
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def answers(self) -> pulumi.Output[List['outputs.MultiClusterAppAnswer']]:
        """
        Multi cluster app answers
        """
        return pulumi.get(self, "answers")

    @property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> pulumi.Output[str]:
        """
        Multi cluster app catalog name
        """
        return pulumi.get(self, "catalog_name")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Labels of the resource
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def members(self) -> pulumi.Output[Optional[List['outputs.MultiClusterAppMember']]]:
        """
        Multi cluster app members
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Multi cluster app name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> pulumi.Output[Optional[float]]:
        """
        Multi cluster app revision history limit
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter(name="revisionId")
    def revision_id(self) -> pulumi.Output[str]:
        """
        Multi cluster app revision name
        """
        return pulumi.get(self, "revision_id")

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Output[List[str]]:
        """
        Multi cluster app roles
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def targets(self) -> pulumi.Output[List['outputs.MultiClusterAppTarget']]:
        """
        Multi cluster app targets
        """
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Output[str]:
        """
        Multi cluster app template name
        """
        return pulumi.get(self, "template_name")

    @property
    @pulumi.getter(name="templateVersion")
    def template_version(self) -> pulumi.Output[str]:
        """
        Multi cluster app template version
        """
        return pulumi.get(self, "template_version")

    @property
    @pulumi.getter(name="templateVersionId")
    def template_version_id(self) -> pulumi.Output[str]:
        """
        Multi cluster app template version ID
        """
        return pulumi.get(self, "template_version_id")

    @property
    @pulumi.getter(name="upgradeStrategy")
    def upgrade_strategy(self) -> pulumi.Output['outputs.MultiClusterAppUpgradeStrategy']:
        """
        Multi cluster app upgrade strategy
        """
        return pulumi.get(self, "upgrade_strategy")

    @property
    @pulumi.getter
    def wait(self) -> pulumi.Output[Optional[bool]]:
        """
        Wait until multi cluster app is active
        """
        return pulumi.get(self, "wait")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

