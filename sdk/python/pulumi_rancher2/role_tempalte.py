# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['RoleTempalte']


class RoleTempalte(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 administrative: Optional[pulumi.Input[bool]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 context: Optional[pulumi.Input[str]] = None,
                 default_role: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[bool]] = None,
                 hidden: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 locked: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 role_template_ids: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 rules: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['RoleTempalteRuleArgs']]]]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a RoleTempalte resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] administrative: Administrative role template
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations of the resource
        :param pulumi.Input[str] context: Context role template
        :param pulumi.Input[bool] default_role: Default role template for new created cluster or project
        :param pulumi.Input[str] description: Role template policy description
        :param pulumi.Input[bool] external: External role template
        :param pulumi.Input[bool] hidden: Hidden role template
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of the resource
        :param pulumi.Input[bool] locked: Locked role template
        :param pulumi.Input[str] name: Role template policy name
        :param pulumi.Input[List[pulumi.Input[str]]] role_template_ids: Inherit role template IDs
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['RoleTempalteRuleArgs']]]] rules: Role template policy rules
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['administrative'] = administrative
            __props__['annotations'] = annotations
            __props__['context'] = context
            __props__['default_role'] = default_role
            __props__['description'] = description
            __props__['external'] = external
            __props__['hidden'] = hidden
            __props__['labels'] = labels
            __props__['locked'] = locked
            __props__['name'] = name
            __props__['role_template_ids'] = role_template_ids
            __props__['rules'] = rules
            __props__['builtin'] = None
        super(RoleTempalte, __self__).__init__(
            'rancher2:index/roleTempalte:RoleTempalte',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            administrative: Optional[pulumi.Input[bool]] = None,
            annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            builtin: Optional[pulumi.Input[bool]] = None,
            context: Optional[pulumi.Input[str]] = None,
            default_role: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            external: Optional[pulumi.Input[bool]] = None,
            hidden: Optional[pulumi.Input[bool]] = None,
            labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            locked: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            role_template_ids: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
            rules: Optional[pulumi.Input[List[pulumi.Input[pulumi.InputType['RoleTempalteRuleArgs']]]]] = None) -> 'RoleTempalte':
        """
        Get an existing RoleTempalte resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] administrative: Administrative role template
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations of the resource
        :param pulumi.Input[bool] builtin: Builtin role template
        :param pulumi.Input[str] context: Context role template
        :param pulumi.Input[bool] default_role: Default role template for new created cluster or project
        :param pulumi.Input[str] description: Role template policy description
        :param pulumi.Input[bool] external: External role template
        :param pulumi.Input[bool] hidden: Hidden role template
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of the resource
        :param pulumi.Input[bool] locked: Locked role template
        :param pulumi.Input[str] name: Role template policy name
        :param pulumi.Input[List[pulumi.Input[str]]] role_template_ids: Inherit role template IDs
        :param pulumi.Input[List[pulumi.Input[pulumi.InputType['RoleTempalteRuleArgs']]]] rules: Role template policy rules
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["administrative"] = administrative
        __props__["annotations"] = annotations
        __props__["builtin"] = builtin
        __props__["context"] = context
        __props__["default_role"] = default_role
        __props__["description"] = description
        __props__["external"] = external
        __props__["hidden"] = hidden
        __props__["labels"] = labels
        __props__["locked"] = locked
        __props__["name"] = name
        __props__["role_template_ids"] = role_template_ids
        __props__["rules"] = rules
        return RoleTempalte(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def administrative(self) -> pulumi.Output[Optional[bool]]:
        """
        Administrative role template
        """
        return pulumi.get(self, "administrative")

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Annotations of the resource
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def builtin(self) -> pulumi.Output[bool]:
        """
        Builtin role template
        """
        return pulumi.get(self, "builtin")

    @property
    @pulumi.getter
    def context(self) -> pulumi.Output[Optional[str]]:
        """
        Context role template
        """
        return pulumi.get(self, "context")

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> pulumi.Output[Optional[bool]]:
        """
        Default role template for new created cluster or project
        """
        return pulumi.get(self, "default_role")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Role template policy description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def external(self) -> pulumi.Output[Optional[bool]]:
        """
        External role template
        """
        return pulumi.get(self, "external")

    @property
    @pulumi.getter
    def hidden(self) -> pulumi.Output[Optional[bool]]:
        """
        Hidden role template
        """
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Labels of the resource
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def locked(self) -> pulumi.Output[Optional[bool]]:
        """
        Locked role template
        """
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Role template policy name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleTemplateIds")
    def role_template_ids(self) -> pulumi.Output[List[str]]:
        """
        Inherit role template IDs
        """
        return pulumi.get(self, "role_template_ids")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output[List['outputs.RoleTempalteRule']]:
        """
        Role template policy rules
        """
        return pulumi.get(self, "rules")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

