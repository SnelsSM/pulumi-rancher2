// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class App extends pulumi.CustomResource {
    /**
     * Get an existing App resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppState, opts?: pulumi.CustomResourceOptions): App {
        return new App(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/app:App';

    /**
     * Returns true if the given object is an instance of App.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is App {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === App.__pulumiType;
    }

    /**
     * Annotations of the resource
     */
    public readonly annotations!: pulumi.Output<{[key: string]: any}>;
    /**
     * Answers of the app
     */
    public readonly answers!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Catalog name of the app
     */
    public readonly catalogName!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    /**
     * External ID of the app
     */
    public /*out*/ readonly externalId!: pulumi.Output<string>;
    /**
     * Force app upgrade
     */
    public readonly forceUpgrade!: pulumi.Output<boolean | undefined>;
    /**
     * Labels of the resource
     */
    public readonly labels!: pulumi.Output<{[key: string]: any}>;
    /**
     * Name of the app
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Project ID to add app
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * App revision id
     */
    public readonly revisionId!: pulumi.Output<string>;
    /**
     * Namespace name to add app
     */
    public readonly targetNamespace!: pulumi.Output<string>;
    /**
     * Template name of the app
     */
    public readonly templateName!: pulumi.Output<string>;
    /**
     * Template version of the app
     */
    public readonly templateVersion!: pulumi.Output<string>;
    /**
     * values.yaml base64 encoded file content of the app
     */
    public readonly valuesYaml!: pulumi.Output<string | undefined>;
    /**
     * Wait until app is deployed and active
     */
    public readonly wait!: pulumi.Output<boolean | undefined>;

    /**
     * Create a App resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppArgs | AppState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as AppState | undefined;
            inputs["annotations"] = state ? state.annotations : undefined;
            inputs["answers"] = state ? state.answers : undefined;
            inputs["catalogName"] = state ? state.catalogName : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["externalId"] = state ? state.externalId : undefined;
            inputs["forceUpgrade"] = state ? state.forceUpgrade : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["projectId"] = state ? state.projectId : undefined;
            inputs["revisionId"] = state ? state.revisionId : undefined;
            inputs["targetNamespace"] = state ? state.targetNamespace : undefined;
            inputs["templateName"] = state ? state.templateName : undefined;
            inputs["templateVersion"] = state ? state.templateVersion : undefined;
            inputs["valuesYaml"] = state ? state.valuesYaml : undefined;
            inputs["wait"] = state ? state.wait : undefined;
        } else {
            const args = argsOrState as AppArgs | undefined;
            if (!args || args.catalogName === undefined) {
                throw new Error("Missing required property 'catalogName'");
            }
            if (!args || args.projectId === undefined) {
                throw new Error("Missing required property 'projectId'");
            }
            if (!args || args.targetNamespace === undefined) {
                throw new Error("Missing required property 'targetNamespace'");
            }
            if (!args || args.templateName === undefined) {
                throw new Error("Missing required property 'templateName'");
            }
            inputs["annotations"] = args ? args.annotations : undefined;
            inputs["answers"] = args ? args.answers : undefined;
            inputs["catalogName"] = args ? args.catalogName : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["forceUpgrade"] = args ? args.forceUpgrade : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["projectId"] = args ? args.projectId : undefined;
            inputs["revisionId"] = args ? args.revisionId : undefined;
            inputs["targetNamespace"] = args ? args.targetNamespace : undefined;
            inputs["templateName"] = args ? args.templateName : undefined;
            inputs["templateVersion"] = args ? args.templateVersion : undefined;
            inputs["valuesYaml"] = args ? args.valuesYaml : undefined;
            inputs["wait"] = args ? args.wait : undefined;
            inputs["externalId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(App.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering App resources.
 */
export interface AppState {
    /**
     * Annotations of the resource
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * Answers of the app
     */
    readonly answers?: pulumi.Input<{[key: string]: any}>;
    /**
     * Catalog name of the app
     */
    readonly catalogName?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    /**
     * External ID of the app
     */
    readonly externalId?: pulumi.Input<string>;
    /**
     * Force app upgrade
     */
    readonly forceUpgrade?: pulumi.Input<boolean>;
    /**
     * Labels of the resource
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * Name of the app
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Project ID to add app
     */
    readonly projectId?: pulumi.Input<string>;
    /**
     * App revision id
     */
    readonly revisionId?: pulumi.Input<string>;
    /**
     * Namespace name to add app
     */
    readonly targetNamespace?: pulumi.Input<string>;
    /**
     * Template name of the app
     */
    readonly templateName?: pulumi.Input<string>;
    /**
     * Template version of the app
     */
    readonly templateVersion?: pulumi.Input<string>;
    /**
     * values.yaml base64 encoded file content of the app
     */
    readonly valuesYaml?: pulumi.Input<string>;
    /**
     * Wait until app is deployed and active
     */
    readonly wait?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a App resource.
 */
export interface AppArgs {
    /**
     * Annotations of the resource
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * Answers of the app
     */
    readonly answers?: pulumi.Input<{[key: string]: any}>;
    /**
     * Catalog name of the app
     */
    readonly catalogName: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    /**
     * Force app upgrade
     */
    readonly forceUpgrade?: pulumi.Input<boolean>;
    /**
     * Labels of the resource
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * Name of the app
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Project ID to add app
     */
    readonly projectId: pulumi.Input<string>;
    /**
     * App revision id
     */
    readonly revisionId?: pulumi.Input<string>;
    /**
     * Namespace name to add app
     */
    readonly targetNamespace: pulumi.Input<string>;
    /**
     * Template name of the app
     */
    readonly templateName: pulumi.Input<string>;
    /**
     * Template version of the app
     */
    readonly templateVersion?: pulumi.Input<string>;
    /**
     * values.yaml base64 encoded file content of the app
     */
    readonly valuesYaml?: pulumi.Input<string>;
    /**
     * Wait until app is deployed and active
     */
    readonly wait?: pulumi.Input<boolean>;
}
