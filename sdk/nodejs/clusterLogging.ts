// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ClusterLogging extends pulumi.CustomResource {
    /**
     * Get an existing ClusterLogging resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterLoggingState, opts?: pulumi.CustomResourceOptions): ClusterLogging {
        return new ClusterLogging(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/clusterLogging:ClusterLogging';

    /**
     * Returns true if the given object is an instance of ClusterLogging.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterLogging {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterLogging.__pulumiType;
    }

    /**
     * Annotations of the resource
     */
    public readonly annotations!: pulumi.Output<{[key: string]: any}>;
    public readonly clusterId!: pulumi.Output<string>;
    public readonly customTargetConfig!: pulumi.Output<outputs.ClusterLoggingCustomTargetConfig | undefined>;
    public readonly elasticsearchConfig!: pulumi.Output<outputs.ClusterLoggingElasticsearchConfig | undefined>;
    /**
     * Optional enable json log parsing
     */
    public readonly enableJsonParsing!: pulumi.Output<boolean | undefined>;
    public readonly fluentdConfig!: pulumi.Output<outputs.ClusterLoggingFluentdConfig | undefined>;
    public readonly kafkaConfig!: pulumi.Output<outputs.ClusterLoggingKafkaConfig | undefined>;
    public readonly kind!: pulumi.Output<string>;
    /**
     * Labels of the resource
     */
    public readonly labels!: pulumi.Output<{[key: string]: any}>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespaceId!: pulumi.Output<string | undefined>;
    public readonly outputFlushInterval!: pulumi.Output<number | undefined>;
    public readonly outputTags!: pulumi.Output<{[key: string]: any}>;
    public readonly splunkConfig!: pulumi.Output<outputs.ClusterLoggingSplunkConfig | undefined>;
    public readonly syslogConfig!: pulumi.Output<outputs.ClusterLoggingSyslogConfig | undefined>;

    /**
     * Create a ClusterLogging resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterLoggingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterLoggingArgs | ClusterLoggingState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ClusterLoggingState | undefined;
            inputs["annotations"] = state ? state.annotations : undefined;
            inputs["clusterId"] = state ? state.clusterId : undefined;
            inputs["customTargetConfig"] = state ? state.customTargetConfig : undefined;
            inputs["elasticsearchConfig"] = state ? state.elasticsearchConfig : undefined;
            inputs["enableJsonParsing"] = state ? state.enableJsonParsing : undefined;
            inputs["fluentdConfig"] = state ? state.fluentdConfig : undefined;
            inputs["kafkaConfig"] = state ? state.kafkaConfig : undefined;
            inputs["kind"] = state ? state.kind : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namespaceId"] = state ? state.namespaceId : undefined;
            inputs["outputFlushInterval"] = state ? state.outputFlushInterval : undefined;
            inputs["outputTags"] = state ? state.outputTags : undefined;
            inputs["splunkConfig"] = state ? state.splunkConfig : undefined;
            inputs["syslogConfig"] = state ? state.syslogConfig : undefined;
        } else {
            const args = argsOrState as ClusterLoggingArgs | undefined;
            if (!args || args.clusterId === undefined) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (!args || args.kind === undefined) {
                throw new Error("Missing required property 'kind'");
            }
            inputs["annotations"] = args ? args.annotations : undefined;
            inputs["clusterId"] = args ? args.clusterId : undefined;
            inputs["customTargetConfig"] = args ? args.customTargetConfig : undefined;
            inputs["elasticsearchConfig"] = args ? args.elasticsearchConfig : undefined;
            inputs["enableJsonParsing"] = args ? args.enableJsonParsing : undefined;
            inputs["fluentdConfig"] = args ? args.fluentdConfig : undefined;
            inputs["kafkaConfig"] = args ? args.kafkaConfig : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namespaceId"] = args ? args.namespaceId : undefined;
            inputs["outputFlushInterval"] = args ? args.outputFlushInterval : undefined;
            inputs["outputTags"] = args ? args.outputTags : undefined;
            inputs["splunkConfig"] = args ? args.splunkConfig : undefined;
            inputs["syslogConfig"] = args ? args.syslogConfig : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ClusterLogging.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClusterLogging resources.
 */
export interface ClusterLoggingState {
    /**
     * Annotations of the resource
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    readonly clusterId?: pulumi.Input<string>;
    readonly customTargetConfig?: pulumi.Input<inputs.ClusterLoggingCustomTargetConfig>;
    readonly elasticsearchConfig?: pulumi.Input<inputs.ClusterLoggingElasticsearchConfig>;
    /**
     * Optional enable json log parsing
     */
    readonly enableJsonParsing?: pulumi.Input<boolean>;
    readonly fluentdConfig?: pulumi.Input<inputs.ClusterLoggingFluentdConfig>;
    readonly kafkaConfig?: pulumi.Input<inputs.ClusterLoggingKafkaConfig>;
    readonly kind?: pulumi.Input<string>;
    /**
     * Labels of the resource
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    readonly name?: pulumi.Input<string>;
    readonly namespaceId?: pulumi.Input<string>;
    readonly outputFlushInterval?: pulumi.Input<number>;
    readonly outputTags?: pulumi.Input<{[key: string]: any}>;
    readonly splunkConfig?: pulumi.Input<inputs.ClusterLoggingSplunkConfig>;
    readonly syslogConfig?: pulumi.Input<inputs.ClusterLoggingSyslogConfig>;
}

/**
 * The set of arguments for constructing a ClusterLogging resource.
 */
export interface ClusterLoggingArgs {
    /**
     * Annotations of the resource
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    readonly clusterId: pulumi.Input<string>;
    readonly customTargetConfig?: pulumi.Input<inputs.ClusterLoggingCustomTargetConfig>;
    readonly elasticsearchConfig?: pulumi.Input<inputs.ClusterLoggingElasticsearchConfig>;
    /**
     * Optional enable json log parsing
     */
    readonly enableJsonParsing?: pulumi.Input<boolean>;
    readonly fluentdConfig?: pulumi.Input<inputs.ClusterLoggingFluentdConfig>;
    readonly kafkaConfig?: pulumi.Input<inputs.ClusterLoggingKafkaConfig>;
    readonly kind: pulumi.Input<string>;
    /**
     * Labels of the resource
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    readonly name?: pulumi.Input<string>;
    readonly namespaceId?: pulumi.Input<string>;
    readonly outputFlushInterval?: pulumi.Input<number>;
    readonly outputTags?: pulumi.Input<{[key: string]: any}>;
    readonly splunkConfig?: pulumi.Input<inputs.ClusterLoggingSplunkConfig>;
    readonly syslogConfig?: pulumi.Input<inputs.ClusterLoggingSyslogConfig>;
}
