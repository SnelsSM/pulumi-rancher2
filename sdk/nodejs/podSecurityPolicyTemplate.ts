// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PodSecurityPolicyTemplate extends pulumi.CustomResource {
    /**
     * Get an existing PodSecurityPolicyTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PodSecurityPolicyTemplateState, opts?: pulumi.CustomResourceOptions): PodSecurityPolicyTemplate {
        return new PodSecurityPolicyTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/podSecurityPolicyTemplate:PodSecurityPolicyTemplate';

    /**
     * Returns true if the given object is an instance of PodSecurityPolicyTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PodSecurityPolicyTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PodSecurityPolicyTemplate.__pulumiType;
    }

    /**
     * allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to
     * true.
     */
    public readonly allowPrivilegeEscalation!: pulumi.Output<boolean>;
    /**
     * allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field
     * may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and
     * requiredDropCapabilities.
     */
    public readonly allowedCapabilities!: pulumi.Output<string[] | undefined>;
    /**
     * AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An
     * empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only
     * honored if the API server enables the CSIInlineVolume feature gate.
     */
    public readonly allowedCsiDrivers!: pulumi.Output<outputs.PodSecurityPolicyTemplateAllowedCsiDriver[] | undefined>;
    /**
     * allowedFlexVolumes is a whitelist of allowed Flexvolumes. Empty or nil indicates that all Flexvolumes may be used. This
     * parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
     */
    public readonly allowedFlexVolumes!: pulumi.Output<outputs.PodSecurityPolicyTemplateAllowedFlexVolume[] | undefined>;
    /**
     * allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
     */
    public readonly allowedHostPaths!: pulumi.Output<outputs.PodSecurityPolicyTemplateAllowedHostPath[] | undefined>;
    /**
     * AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the
     * DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
     */
    public readonly allowedProcMountTypes!: pulumi.Output<string[] | undefined>;
    /**
     * allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain
     * sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe
     * sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
     */
    public readonly allowedUnsafeSysctls!: pulumi.Output<string[] | undefined>;
    /**
     * Annotations of the resource
     */
    public readonly annotations!: pulumi.Output<{[key: string]: any}>;
    /**
     * defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec
     * specifically drops the capability. You may not list a capability in both defaultAddCapabilities and
     * requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the
     * allowedCapabilities list.
     */
    public readonly defaultAddCapabilities!: pulumi.Output<string[] | undefined>;
    /**
     * defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its
     * parent process.
     */
    public readonly defaultAllowPrivilegeEscalation!: pulumi.Output<boolean | undefined>;
    /**
     * Pod Security Policy template policy description
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name
     * or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are
     * forbidden.
     */
    public readonly forbiddenSysctls!: pulumi.Output<string[] | undefined>;
    /**
     * fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
     */
    public readonly fsGroup!: pulumi.Output<outputs.PodSecurityPolicyTemplateFsGroup>;
    /**
     * hostIPC determines if the policy allows the use of HostIPC in the pod spec.
     */
    public readonly hostIpc!: pulumi.Output<boolean>;
    /**
     * hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
     */
    public readonly hostNetwork!: pulumi.Output<boolean>;
    /**
     * hostPID determines if the policy allows the use of HostPID in the pod spec.
     */
    public readonly hostPid!: pulumi.Output<boolean>;
    /**
     * hostPorts determines which host port ranges are allowed to be exposed.
     */
    public readonly hostPorts!: pulumi.Output<outputs.PodSecurityPolicyTemplateHostPort[]>;
    /**
     * Labels of the resource
     */
    public readonly labels!: pulumi.Output<{[key: string]: any}>;
    /**
     * Pod Security Policy template policy name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * privileged determines if a pod can request to be run as privileged.
     */
    public readonly privileged!: pulumi.Output<boolean>;
    /**
     * readOnlyRootFilesystem when set to true will force containers to run with a read only root file system. If the container
     * specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the
     * container may run with a read only root file system if it wishes but it will not be forced to.
     */
    public readonly readOnlyRootFilesystem!: pulumi.Output<boolean>;
    /**
     * requiredDropCapabilities are the capabilities that will be dropped from the container. These are required to be dropped
     * and cannot be added.
     */
    public readonly requiredDropCapabilities!: pulumi.Output<string[] | undefined>;
    /**
     * RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted,
     * the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
     */
    public readonly runAsGroup!: pulumi.Output<outputs.PodSecurityPolicyTemplateRunAsGroup | undefined>;
    /**
     * runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
     */
    public readonly runAsUser!: pulumi.Output<outputs.PodSecurityPolicyTemplateRunAsUser>;
    /**
     * runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the
     * pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being
     * enabled.
     */
    public readonly runtimeClass!: pulumi.Output<outputs.PodSecurityPolicyTemplateRuntimeClass | undefined>;
    /**
     * seLinux is the strategy that will dictate the allowable labels that may be set.
     */
    public readonly seLinux!: pulumi.Output<outputs.PodSecurityPolicyTemplateSeLinux>;
    /**
     * supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
     */
    public readonly supplementalGroup!: pulumi.Output<outputs.PodSecurityPolicyTemplateSupplementalGroup>;
    /**
     * volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you
     * may use '*'
     */
    public readonly volumes!: pulumi.Output<string[]>;

    /**
     * Create a PodSecurityPolicyTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PodSecurityPolicyTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PodSecurityPolicyTemplateArgs | PodSecurityPolicyTemplateState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as PodSecurityPolicyTemplateState | undefined;
            inputs["allowPrivilegeEscalation"] = state ? state.allowPrivilegeEscalation : undefined;
            inputs["allowedCapabilities"] = state ? state.allowedCapabilities : undefined;
            inputs["allowedCsiDrivers"] = state ? state.allowedCsiDrivers : undefined;
            inputs["allowedFlexVolumes"] = state ? state.allowedFlexVolumes : undefined;
            inputs["allowedHostPaths"] = state ? state.allowedHostPaths : undefined;
            inputs["allowedProcMountTypes"] = state ? state.allowedProcMountTypes : undefined;
            inputs["allowedUnsafeSysctls"] = state ? state.allowedUnsafeSysctls : undefined;
            inputs["annotations"] = state ? state.annotations : undefined;
            inputs["defaultAddCapabilities"] = state ? state.defaultAddCapabilities : undefined;
            inputs["defaultAllowPrivilegeEscalation"] = state ? state.defaultAllowPrivilegeEscalation : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["forbiddenSysctls"] = state ? state.forbiddenSysctls : undefined;
            inputs["fsGroup"] = state ? state.fsGroup : undefined;
            inputs["hostIpc"] = state ? state.hostIpc : undefined;
            inputs["hostNetwork"] = state ? state.hostNetwork : undefined;
            inputs["hostPid"] = state ? state.hostPid : undefined;
            inputs["hostPorts"] = state ? state.hostPorts : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["privileged"] = state ? state.privileged : undefined;
            inputs["readOnlyRootFilesystem"] = state ? state.readOnlyRootFilesystem : undefined;
            inputs["requiredDropCapabilities"] = state ? state.requiredDropCapabilities : undefined;
            inputs["runAsGroup"] = state ? state.runAsGroup : undefined;
            inputs["runAsUser"] = state ? state.runAsUser : undefined;
            inputs["runtimeClass"] = state ? state.runtimeClass : undefined;
            inputs["seLinux"] = state ? state.seLinux : undefined;
            inputs["supplementalGroup"] = state ? state.supplementalGroup : undefined;
            inputs["volumes"] = state ? state.volumes : undefined;
        } else {
            const args = argsOrState as PodSecurityPolicyTemplateArgs | undefined;
            inputs["allowPrivilegeEscalation"] = args ? args.allowPrivilegeEscalation : undefined;
            inputs["allowedCapabilities"] = args ? args.allowedCapabilities : undefined;
            inputs["allowedCsiDrivers"] = args ? args.allowedCsiDrivers : undefined;
            inputs["allowedFlexVolumes"] = args ? args.allowedFlexVolumes : undefined;
            inputs["allowedHostPaths"] = args ? args.allowedHostPaths : undefined;
            inputs["allowedProcMountTypes"] = args ? args.allowedProcMountTypes : undefined;
            inputs["allowedUnsafeSysctls"] = args ? args.allowedUnsafeSysctls : undefined;
            inputs["annotations"] = args ? args.annotations : undefined;
            inputs["defaultAddCapabilities"] = args ? args.defaultAddCapabilities : undefined;
            inputs["defaultAllowPrivilegeEscalation"] = args ? args.defaultAllowPrivilegeEscalation : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["forbiddenSysctls"] = args ? args.forbiddenSysctls : undefined;
            inputs["fsGroup"] = args ? args.fsGroup : undefined;
            inputs["hostIpc"] = args ? args.hostIpc : undefined;
            inputs["hostNetwork"] = args ? args.hostNetwork : undefined;
            inputs["hostPid"] = args ? args.hostPid : undefined;
            inputs["hostPorts"] = args ? args.hostPorts : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["privileged"] = args ? args.privileged : undefined;
            inputs["readOnlyRootFilesystem"] = args ? args.readOnlyRootFilesystem : undefined;
            inputs["requiredDropCapabilities"] = args ? args.requiredDropCapabilities : undefined;
            inputs["runAsGroup"] = args ? args.runAsGroup : undefined;
            inputs["runAsUser"] = args ? args.runAsUser : undefined;
            inputs["runtimeClass"] = args ? args.runtimeClass : undefined;
            inputs["seLinux"] = args ? args.seLinux : undefined;
            inputs["supplementalGroup"] = args ? args.supplementalGroup : undefined;
            inputs["volumes"] = args ? args.volumes : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(PodSecurityPolicyTemplate.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PodSecurityPolicyTemplate resources.
 */
export interface PodSecurityPolicyTemplateState {
    /**
     * allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to
     * true.
     */
    readonly allowPrivilegeEscalation?: pulumi.Input<boolean>;
    /**
     * allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field
     * may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and
     * requiredDropCapabilities.
     */
    readonly allowedCapabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An
     * empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only
     * honored if the API server enables the CSIInlineVolume feature gate.
     */
    readonly allowedCsiDrivers?: pulumi.Input<pulumi.Input<inputs.PodSecurityPolicyTemplateAllowedCsiDriver>[]>;
    /**
     * allowedFlexVolumes is a whitelist of allowed Flexvolumes. Empty or nil indicates that all Flexvolumes may be used. This
     * parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
     */
    readonly allowedFlexVolumes?: pulumi.Input<pulumi.Input<inputs.PodSecurityPolicyTemplateAllowedFlexVolume>[]>;
    /**
     * allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
     */
    readonly allowedHostPaths?: pulumi.Input<pulumi.Input<inputs.PodSecurityPolicyTemplateAllowedHostPath>[]>;
    /**
     * AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the
     * DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
     */
    readonly allowedProcMountTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain
     * sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe
     * sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
     */
    readonly allowedUnsafeSysctls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Annotations of the resource
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec
     * specifically drops the capability. You may not list a capability in both defaultAddCapabilities and
     * requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the
     * allowedCapabilities list.
     */
    readonly defaultAddCapabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its
     * parent process.
     */
    readonly defaultAllowPrivilegeEscalation?: pulumi.Input<boolean>;
    /**
     * Pod Security Policy template policy description
     */
    readonly description?: pulumi.Input<string>;
    /**
     * forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name
     * or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are
     * forbidden.
     */
    readonly forbiddenSysctls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
     */
    readonly fsGroup?: pulumi.Input<inputs.PodSecurityPolicyTemplateFsGroup>;
    /**
     * hostIPC determines if the policy allows the use of HostIPC in the pod spec.
     */
    readonly hostIpc?: pulumi.Input<boolean>;
    /**
     * hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
     */
    readonly hostNetwork?: pulumi.Input<boolean>;
    /**
     * hostPID determines if the policy allows the use of HostPID in the pod spec.
     */
    readonly hostPid?: pulumi.Input<boolean>;
    /**
     * hostPorts determines which host port ranges are allowed to be exposed.
     */
    readonly hostPorts?: pulumi.Input<pulumi.Input<inputs.PodSecurityPolicyTemplateHostPort>[]>;
    /**
     * Labels of the resource
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * Pod Security Policy template policy name
     */
    readonly name?: pulumi.Input<string>;
    /**
     * privileged determines if a pod can request to be run as privileged.
     */
    readonly privileged?: pulumi.Input<boolean>;
    /**
     * readOnlyRootFilesystem when set to true will force containers to run with a read only root file system. If the container
     * specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the
     * container may run with a read only root file system if it wishes but it will not be forced to.
     */
    readonly readOnlyRootFilesystem?: pulumi.Input<boolean>;
    /**
     * requiredDropCapabilities are the capabilities that will be dropped from the container. These are required to be dropped
     * and cannot be added.
     */
    readonly requiredDropCapabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted,
     * the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
     */
    readonly runAsGroup?: pulumi.Input<inputs.PodSecurityPolicyTemplateRunAsGroup>;
    /**
     * runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
     */
    readonly runAsUser?: pulumi.Input<inputs.PodSecurityPolicyTemplateRunAsUser>;
    /**
     * runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the
     * pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being
     * enabled.
     */
    readonly runtimeClass?: pulumi.Input<inputs.PodSecurityPolicyTemplateRuntimeClass>;
    /**
     * seLinux is the strategy that will dictate the allowable labels that may be set.
     */
    readonly seLinux?: pulumi.Input<inputs.PodSecurityPolicyTemplateSeLinux>;
    /**
     * supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
     */
    readonly supplementalGroup?: pulumi.Input<inputs.PodSecurityPolicyTemplateSupplementalGroup>;
    /**
     * volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you
     * may use '*'
     */
    readonly volumes?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a PodSecurityPolicyTemplate resource.
 */
export interface PodSecurityPolicyTemplateArgs {
    /**
     * allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to
     * true.
     */
    readonly allowPrivilegeEscalation?: pulumi.Input<boolean>;
    /**
     * allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field
     * may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and
     * requiredDropCapabilities.
     */
    readonly allowedCapabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An
     * empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only
     * honored if the API server enables the CSIInlineVolume feature gate.
     */
    readonly allowedCsiDrivers?: pulumi.Input<pulumi.Input<inputs.PodSecurityPolicyTemplateAllowedCsiDriver>[]>;
    /**
     * allowedFlexVolumes is a whitelist of allowed Flexvolumes. Empty or nil indicates that all Flexvolumes may be used. This
     * parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
     */
    readonly allowedFlexVolumes?: pulumi.Input<pulumi.Input<inputs.PodSecurityPolicyTemplateAllowedFlexVolume>[]>;
    /**
     * allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
     */
    readonly allowedHostPaths?: pulumi.Input<pulumi.Input<inputs.PodSecurityPolicyTemplateAllowedHostPath>[]>;
    /**
     * AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the
     * DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
     */
    readonly allowedProcMountTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain
     * sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe
     * sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
     */
    readonly allowedUnsafeSysctls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Annotations of the resource
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec
     * specifically drops the capability. You may not list a capability in both defaultAddCapabilities and
     * requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the
     * allowedCapabilities list.
     */
    readonly defaultAddCapabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its
     * parent process.
     */
    readonly defaultAllowPrivilegeEscalation?: pulumi.Input<boolean>;
    /**
     * Pod Security Policy template policy description
     */
    readonly description?: pulumi.Input<string>;
    /**
     * forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name
     * or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are
     * forbidden.
     */
    readonly forbiddenSysctls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
     */
    readonly fsGroup?: pulumi.Input<inputs.PodSecurityPolicyTemplateFsGroup>;
    /**
     * hostIPC determines if the policy allows the use of HostIPC in the pod spec.
     */
    readonly hostIpc?: pulumi.Input<boolean>;
    /**
     * hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
     */
    readonly hostNetwork?: pulumi.Input<boolean>;
    /**
     * hostPID determines if the policy allows the use of HostPID in the pod spec.
     */
    readonly hostPid?: pulumi.Input<boolean>;
    /**
     * hostPorts determines which host port ranges are allowed to be exposed.
     */
    readonly hostPorts?: pulumi.Input<pulumi.Input<inputs.PodSecurityPolicyTemplateHostPort>[]>;
    /**
     * Labels of the resource
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * Pod Security Policy template policy name
     */
    readonly name?: pulumi.Input<string>;
    /**
     * privileged determines if a pod can request to be run as privileged.
     */
    readonly privileged?: pulumi.Input<boolean>;
    /**
     * readOnlyRootFilesystem when set to true will force containers to run with a read only root file system. If the container
     * specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the
     * container may run with a read only root file system if it wishes but it will not be forced to.
     */
    readonly readOnlyRootFilesystem?: pulumi.Input<boolean>;
    /**
     * requiredDropCapabilities are the capabilities that will be dropped from the container. These are required to be dropped
     * and cannot be added.
     */
    readonly requiredDropCapabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted,
     * the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
     */
    readonly runAsGroup?: pulumi.Input<inputs.PodSecurityPolicyTemplateRunAsGroup>;
    /**
     * runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
     */
    readonly runAsUser?: pulumi.Input<inputs.PodSecurityPolicyTemplateRunAsUser>;
    /**
     * runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the
     * pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being
     * enabled.
     */
    readonly runtimeClass?: pulumi.Input<inputs.PodSecurityPolicyTemplateRuntimeClass>;
    /**
     * seLinux is the strategy that will dictate the allowable labels that may be set.
     */
    readonly seLinux?: pulumi.Input<inputs.PodSecurityPolicyTemplateSeLinux>;
    /**
     * supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
     */
    readonly supplementalGroup?: pulumi.Input<inputs.PodSecurityPolicyTemplateSupplementalGroup>;
    /**
     * volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you
     * may use '*'
     */
    readonly volumes?: pulumi.Input<pulumi.Input<string>[]>;
}
