// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NodeDriver extends pulumi.CustomResource {
    /**
     * Get an existing NodeDriver resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodeDriverState, opts?: pulumi.CustomResourceOptions): NodeDriver {
        return new NodeDriver(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/nodeDriver:NodeDriver';

    /**
     * Returns true if the given object is an instance of NodeDriver.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NodeDriver {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodeDriver.__pulumiType;
    }

    public readonly active!: pulumi.Output<boolean>;
    /**
     * Annotations of the resource
     */
    public readonly annotations!: pulumi.Output<{[key: string]: any}>;
    public readonly builtin!: pulumi.Output<boolean>;
    public readonly checksum!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly externalId!: pulumi.Output<string | undefined>;
    /**
     * Labels of the resource
     */
    public readonly labels!: pulumi.Output<{[key: string]: any}>;
    public readonly name!: pulumi.Output<string>;
    public readonly uiUrl!: pulumi.Output<string | undefined>;
    public readonly url!: pulumi.Output<string>;
    public readonly whitelistDomains!: pulumi.Output<string[] | undefined>;

    /**
     * Create a NodeDriver resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodeDriverArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodeDriverArgs | NodeDriverState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as NodeDriverState | undefined;
            inputs["active"] = state ? state.active : undefined;
            inputs["annotations"] = state ? state.annotations : undefined;
            inputs["builtin"] = state ? state.builtin : undefined;
            inputs["checksum"] = state ? state.checksum : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["externalId"] = state ? state.externalId : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["uiUrl"] = state ? state.uiUrl : undefined;
            inputs["url"] = state ? state.url : undefined;
            inputs["whitelistDomains"] = state ? state.whitelistDomains : undefined;
        } else {
            const args = argsOrState as NodeDriverArgs | undefined;
            if (!args || args.active === undefined) {
                throw new Error("Missing required property 'active'");
            }
            if (!args || args.builtin === undefined) {
                throw new Error("Missing required property 'builtin'");
            }
            if (!args || args.url === undefined) {
                throw new Error("Missing required property 'url'");
            }
            inputs["active"] = args ? args.active : undefined;
            inputs["annotations"] = args ? args.annotations : undefined;
            inputs["builtin"] = args ? args.builtin : undefined;
            inputs["checksum"] = args ? args.checksum : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["externalId"] = args ? args.externalId : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["uiUrl"] = args ? args.uiUrl : undefined;
            inputs["url"] = args ? args.url : undefined;
            inputs["whitelistDomains"] = args ? args.whitelistDomains : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(NodeDriver.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NodeDriver resources.
 */
export interface NodeDriverState {
    readonly active?: pulumi.Input<boolean>;
    /**
     * Annotations of the resource
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    readonly builtin?: pulumi.Input<boolean>;
    readonly checksum?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly externalId?: pulumi.Input<string>;
    /**
     * Labels of the resource
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    readonly name?: pulumi.Input<string>;
    readonly uiUrl?: pulumi.Input<string>;
    readonly url?: pulumi.Input<string>;
    readonly whitelistDomains?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a NodeDriver resource.
 */
export interface NodeDriverArgs {
    readonly active: pulumi.Input<boolean>;
    /**
     * Annotations of the resource
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    readonly builtin: pulumi.Input<boolean>;
    readonly checksum?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly externalId?: pulumi.Input<string>;
    /**
     * Labels of the resource
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    readonly name?: pulumi.Input<string>;
    readonly uiUrl?: pulumi.Input<string>;
    readonly url: pulumi.Input<string>;
    readonly whitelistDomains?: pulumi.Input<pulumi.Input<string>[]>;
}
