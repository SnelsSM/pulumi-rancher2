// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * Annotations of the resource
     */
    public readonly annotations!: pulumi.Output<{[key: string]: any}>;
    /**
     * Certificate certs base64 encoded
     */
    public readonly certs!: pulumi.Output<string>;
    /**
     * Certificate description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Certificate key base64 encoded
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * Labels of the resource
     */
    public readonly labels!: pulumi.Output<{[key: string]: any}>;
    /**
     * Certificate name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Namespace ID to add certificate
     */
    public readonly namespaceId!: pulumi.Output<string | undefined>;
    /**
     * Project ID to add certificate
     */
    public readonly projectId!: pulumi.Output<string>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as CertificateState | undefined;
            inputs["annotations"] = state ? state.annotations : undefined;
            inputs["certs"] = state ? state.certs : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["key"] = state ? state.key : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namespaceId"] = state ? state.namespaceId : undefined;
            inputs["projectId"] = state ? state.projectId : undefined;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            if (!args || args.certs === undefined) {
                throw new Error("Missing required property 'certs'");
            }
            if (!args || args.key === undefined) {
                throw new Error("Missing required property 'key'");
            }
            if (!args || args.projectId === undefined) {
                throw new Error("Missing required property 'projectId'");
            }
            inputs["annotations"] = args ? args.annotations : undefined;
            inputs["certs"] = args ? args.certs : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["key"] = args ? args.key : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namespaceId"] = args ? args.namespaceId : undefined;
            inputs["projectId"] = args ? args.projectId : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Certificate.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    /**
     * Annotations of the resource
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * Certificate certs base64 encoded
     */
    readonly certs?: pulumi.Input<string>;
    /**
     * Certificate description
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Certificate key base64 encoded
     */
    readonly key?: pulumi.Input<string>;
    /**
     * Labels of the resource
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * Certificate name
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Namespace ID to add certificate
     */
    readonly namespaceId?: pulumi.Input<string>;
    /**
     * Project ID to add certificate
     */
    readonly projectId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * Annotations of the resource
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * Certificate certs base64 encoded
     */
    readonly certs: pulumi.Input<string>;
    /**
     * Certificate description
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Certificate key base64 encoded
     */
    readonly key: pulumi.Input<string>;
    /**
     * Labels of the resource
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * Certificate name
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Namespace ID to add certificate
     */
    readonly namespaceId?: pulumi.Input<string>;
    /**
     * Project ID to add certificate
     */
    readonly projectId: pulumi.Input<string>;
}
