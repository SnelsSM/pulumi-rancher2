// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPodSecurityPolicyTemplate(args: GetPodSecurityPolicyTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetPodSecurityPolicyTemplateResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("rancher2:index/getPodSecurityPolicyTemplate:getPodSecurityPolicyTemplate", {
        "allowPrivilegeEscalation": args.allowPrivilegeEscalation,
        "allowedCapabilities": args.allowedCapabilities,
        "allowedCsiDrivers": args.allowedCsiDrivers,
        "allowedFlexVolumes": args.allowedFlexVolumes,
        "allowedHostPaths": args.allowedHostPaths,
        "allowedProcMountTypes": args.allowedProcMountTypes,
        "allowedUnsafeSysctls": args.allowedUnsafeSysctls,
        "annotations": args.annotations,
        "defaultAddCapabilities": args.defaultAddCapabilities,
        "defaultAllowPrivilegeEscalation": args.defaultAllowPrivilegeEscalation,
        "description": args.description,
        "forbiddenSysctls": args.forbiddenSysctls,
        "fsGroup": args.fsGroup,
        "hostIpc": args.hostIpc,
        "hostNetwork": args.hostNetwork,
        "hostPid": args.hostPid,
        "hostPorts": args.hostPorts,
        "labels": args.labels,
        "name": args.name,
        "privileged": args.privileged,
        "readOnlyRootFilesystem": args.readOnlyRootFilesystem,
        "requiredDropCapabilities": args.requiredDropCapabilities,
        "runAsGroup": args.runAsGroup,
        "runAsUser": args.runAsUser,
        "runtimeClass": args.runtimeClass,
        "seLinux": args.seLinux,
        "supplementalGroup": args.supplementalGroup,
        "volumes": args.volumes,
    }, opts);
}

/**
 * A collection of arguments for invoking getPodSecurityPolicyTemplate.
 */
export interface GetPodSecurityPolicyTemplateArgs {
    readonly allowPrivilegeEscalation?: boolean;
    readonly allowedCapabilities?: string[];
    readonly allowedCsiDrivers?: inputs.GetPodSecurityPolicyTemplateAllowedCsiDriver[];
    readonly allowedFlexVolumes?: inputs.GetPodSecurityPolicyTemplateAllowedFlexVolume[];
    readonly allowedHostPaths?: inputs.GetPodSecurityPolicyTemplateAllowedHostPath[];
    readonly allowedProcMountTypes?: string[];
    readonly allowedUnsafeSysctls?: string[];
    readonly annotations?: {[key: string]: any};
    readonly defaultAddCapabilities?: string[];
    readonly defaultAllowPrivilegeEscalation?: boolean;
    readonly description?: string;
    readonly forbiddenSysctls?: string[];
    readonly fsGroup?: inputs.GetPodSecurityPolicyTemplateFsGroup;
    readonly hostIpc?: boolean;
    readonly hostNetwork?: boolean;
    readonly hostPid?: boolean;
    readonly hostPorts?: inputs.GetPodSecurityPolicyTemplateHostPort[];
    readonly labels?: {[key: string]: any};
    readonly name: string;
    readonly privileged?: boolean;
    readonly readOnlyRootFilesystem?: boolean;
    readonly requiredDropCapabilities?: string[];
    readonly runAsGroup?: inputs.GetPodSecurityPolicyTemplateRunAsGroup;
    readonly runAsUser?: inputs.GetPodSecurityPolicyTemplateRunAsUser;
    readonly runtimeClass?: inputs.GetPodSecurityPolicyTemplateRuntimeClass;
    readonly seLinux?: inputs.GetPodSecurityPolicyTemplateSeLinux;
    readonly supplementalGroup?: inputs.GetPodSecurityPolicyTemplateSupplementalGroup;
    readonly volumes?: string[];
}

/**
 * A collection of values returned by getPodSecurityPolicyTemplate.
 */
export interface GetPodSecurityPolicyTemplateResult {
    readonly allowPrivilegeEscalation: boolean;
    readonly allowedCapabilities?: string[];
    readonly allowedCsiDrivers?: outputs.GetPodSecurityPolicyTemplateAllowedCsiDriver[];
    readonly allowedFlexVolumes?: outputs.GetPodSecurityPolicyTemplateAllowedFlexVolume[];
    readonly allowedHostPaths?: outputs.GetPodSecurityPolicyTemplateAllowedHostPath[];
    readonly allowedProcMountTypes?: string[];
    readonly allowedUnsafeSysctls?: string[];
    readonly annotations: {[key: string]: any};
    readonly defaultAddCapabilities?: string[];
    readonly defaultAllowPrivilegeEscalation?: boolean;
    readonly description: string;
    readonly forbiddenSysctls?: string[];
    readonly fsGroup: outputs.GetPodSecurityPolicyTemplateFsGroup;
    readonly hostIpc: boolean;
    readonly hostNetwork: boolean;
    readonly hostPid: boolean;
    readonly hostPorts: outputs.GetPodSecurityPolicyTemplateHostPort[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly labels: {[key: string]: any};
    readonly name: string;
    readonly privileged: boolean;
    readonly readOnlyRootFilesystem: boolean;
    readonly requiredDropCapabilities?: string[];
    readonly runAsGroup?: outputs.GetPodSecurityPolicyTemplateRunAsGroup;
    readonly runAsUser: outputs.GetPodSecurityPolicyTemplateRunAsUser;
    readonly runtimeClass?: outputs.GetPodSecurityPolicyTemplateRuntimeClass;
    readonly seLinux: outputs.GetPodSecurityPolicyTemplateSeLinux;
    readonly supplementalGroup: outputs.GetPodSecurityPolicyTemplateSupplementalGroup;
    readonly volumes: string[];
}
