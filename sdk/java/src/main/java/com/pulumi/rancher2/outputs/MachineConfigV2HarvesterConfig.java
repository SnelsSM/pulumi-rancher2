// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MachineConfigV2HarvesterConfig {
    /**
     * @return CPU count, Default `2` (string)
     * 
     */
    private @Nullable String cpuCount;
    /**
     * @return Disk bus, Default `virtio` (string)
     * 
     */
    private @Nullable String diskBus;
    /**
     * @return Disk size if using managed disk. Just for Rancher v2.3.x and above. Default `30` (string)
     * 
     */
    private @Nullable String diskSize;
    /**
     * @return Image name e.g. `harvester-public/image-57hzg` (string)
     * 
     */
    private String imageName;
    /**
     * @return Memory size (in GiB), Default `4` (string)
     * 
     */
    private @Nullable String memorySize;
    /**
     * @return NetworkData content of cloud-init, base64 is supported (string)
     * 
     */
    private @Nullable String networkData;
    /**
     * @return Network model, Default `virtio` (string)
     * 
     */
    private @Nullable String networkModel;
    /**
     * @return Network name e.g. `harvester-public/vlan1` (string)
     * 
     */
    private String networkName;
    /**
     * @return SSH password (string)
     * 
     */
    private @Nullable String sshPassword;
    /**
     * @return Set the name of the ssh user (string)
     * 
     */
    private String sshUser;
    /**
     * @return UserData content of cloud-init, base64 is supported (string)
     * 
     */
    private @Nullable String userData;
    /**
     * @return Virtual machine namespace e.g. `default` (string)
     * 
     */
    private String vmNamespace;

    private MachineConfigV2HarvesterConfig() {}
    /**
     * @return CPU count, Default `2` (string)
     * 
     */
    public Optional<String> cpuCount() {
        return Optional.ofNullable(this.cpuCount);
    }
    /**
     * @return Disk bus, Default `virtio` (string)
     * 
     */
    public Optional<String> diskBus() {
        return Optional.ofNullable(this.diskBus);
    }
    /**
     * @return Disk size if using managed disk. Just for Rancher v2.3.x and above. Default `30` (string)
     * 
     */
    public Optional<String> diskSize() {
        return Optional.ofNullable(this.diskSize);
    }
    /**
     * @return Image name e.g. `harvester-public/image-57hzg` (string)
     * 
     */
    public String imageName() {
        return this.imageName;
    }
    /**
     * @return Memory size (in GiB), Default `4` (string)
     * 
     */
    public Optional<String> memorySize() {
        return Optional.ofNullable(this.memorySize);
    }
    /**
     * @return NetworkData content of cloud-init, base64 is supported (string)
     * 
     */
    public Optional<String> networkData() {
        return Optional.ofNullable(this.networkData);
    }
    /**
     * @return Network model, Default `virtio` (string)
     * 
     */
    public Optional<String> networkModel() {
        return Optional.ofNullable(this.networkModel);
    }
    /**
     * @return Network name e.g. `harvester-public/vlan1` (string)
     * 
     */
    public String networkName() {
        return this.networkName;
    }
    /**
     * @return SSH password (string)
     * 
     */
    public Optional<String> sshPassword() {
        return Optional.ofNullable(this.sshPassword);
    }
    /**
     * @return Set the name of the ssh user (string)
     * 
     */
    public String sshUser() {
        return this.sshUser;
    }
    /**
     * @return UserData content of cloud-init, base64 is supported (string)
     * 
     */
    public Optional<String> userData() {
        return Optional.ofNullable(this.userData);
    }
    /**
     * @return Virtual machine namespace e.g. `default` (string)
     * 
     */
    public String vmNamespace() {
        return this.vmNamespace;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MachineConfigV2HarvesterConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cpuCount;
        private @Nullable String diskBus;
        private @Nullable String diskSize;
        private String imageName;
        private @Nullable String memorySize;
        private @Nullable String networkData;
        private @Nullable String networkModel;
        private String networkName;
        private @Nullable String sshPassword;
        private String sshUser;
        private @Nullable String userData;
        private String vmNamespace;
        public Builder() {}
        public Builder(MachineConfigV2HarvesterConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cpuCount = defaults.cpuCount;
    	      this.diskBus = defaults.diskBus;
    	      this.diskSize = defaults.diskSize;
    	      this.imageName = defaults.imageName;
    	      this.memorySize = defaults.memorySize;
    	      this.networkData = defaults.networkData;
    	      this.networkModel = defaults.networkModel;
    	      this.networkName = defaults.networkName;
    	      this.sshPassword = defaults.sshPassword;
    	      this.sshUser = defaults.sshUser;
    	      this.userData = defaults.userData;
    	      this.vmNamespace = defaults.vmNamespace;
        }

        @CustomType.Setter
        public Builder cpuCount(@Nullable String cpuCount) {
            this.cpuCount = cpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder diskBus(@Nullable String diskBus) {
            this.diskBus = diskBus;
            return this;
        }
        @CustomType.Setter
        public Builder diskSize(@Nullable String diskSize) {
            this.diskSize = diskSize;
            return this;
        }
        @CustomType.Setter
        public Builder imageName(String imageName) {
            this.imageName = Objects.requireNonNull(imageName);
            return this;
        }
        @CustomType.Setter
        public Builder memorySize(@Nullable String memorySize) {
            this.memorySize = memorySize;
            return this;
        }
        @CustomType.Setter
        public Builder networkData(@Nullable String networkData) {
            this.networkData = networkData;
            return this;
        }
        @CustomType.Setter
        public Builder networkModel(@Nullable String networkModel) {
            this.networkModel = networkModel;
            return this;
        }
        @CustomType.Setter
        public Builder networkName(String networkName) {
            this.networkName = Objects.requireNonNull(networkName);
            return this;
        }
        @CustomType.Setter
        public Builder sshPassword(@Nullable String sshPassword) {
            this.sshPassword = sshPassword;
            return this;
        }
        @CustomType.Setter
        public Builder sshUser(String sshUser) {
            this.sshUser = Objects.requireNonNull(sshUser);
            return this;
        }
        @CustomType.Setter
        public Builder userData(@Nullable String userData) {
            this.userData = userData;
            return this;
        }
        @CustomType.Setter
        public Builder vmNamespace(String vmNamespace) {
            this.vmNamespace = Objects.requireNonNull(vmNamespace);
            return this;
        }
        public MachineConfigV2HarvesterConfig build() {
            final var o = new MachineConfigV2HarvesterConfig();
            o.cpuCount = cpuCount;
            o.diskBus = diskBus;
            o.diskSize = diskSize;
            o.imageName = imageName;
            o.memorySize = memorySize;
            o.networkData = networkData;
            o.networkModel = networkModel;
            o.networkName = networkName;
            o.sshPassword = sshPassword;
            o.sshUser = sshUser;
            o.userData = userData;
            o.vmNamespace = vmNamespace;
            return o;
        }
    }
}
