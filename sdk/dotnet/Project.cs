// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    public partial class Project : Pulumi.CustomResource
    {
        /// <summary>
        /// Annotations of the resource
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, object>> Annotations { get; private set; } = null!;

        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        [Output("containerResourceLimit")]
        public Output<Outputs.ProjectContainerResourceLimit?> ContainerResourceLimit { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Enable built-in project monitoring
        /// </summary>
        [Output("enableProjectMonitoring")]
        public Output<bool?> EnableProjectMonitoring { get; private set; } = null!;

        /// <summary>
        /// Labels of the resource
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, object>> Labels { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("podSecurityPolicyTemplateId")]
        public Output<string?> PodSecurityPolicyTemplateId { get; private set; } = null!;

        /// <summary>
        /// Cluster monitoring configuration
        /// </summary>
        [Output("projectMonitoringInput")]
        public Output<Outputs.ProjectProjectMonitoringInput?> ProjectMonitoringInput { get; private set; } = null!;

        [Output("resourceQuota")]
        public Output<Outputs.ProjectResourceQuota?> ResourceQuota { get; private set; } = null!;

        /// <summary>
        /// Wait for cluster becomes active
        /// </summary>
        [Output("waitForCluster")]
        public Output<bool?> WaitForCluster { get; private set; } = null!;


        /// <summary>
        /// Create a Project resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Project(string name, ProjectArgs args, CustomResourceOptions? options = null)
            : base("rancher2:index/project:Project", name, args ?? new ProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Project(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
            : base("rancher2:index/project:Project", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Project resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Project Get(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new Project(name, id, state, options);
        }
    }

    public sealed class ProjectArgs : Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations of the resource
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("containerResourceLimit")]
        public Input<Inputs.ProjectContainerResourceLimitArgs>? ContainerResourceLimit { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable built-in project monitoring
        /// </summary>
        [Input("enableProjectMonitoring")]
        public Input<bool>? EnableProjectMonitoring { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels of the resource
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("podSecurityPolicyTemplateId")]
        public Input<string>? PodSecurityPolicyTemplateId { get; set; }

        /// <summary>
        /// Cluster monitoring configuration
        /// </summary>
        [Input("projectMonitoringInput")]
        public Input<Inputs.ProjectProjectMonitoringInputArgs>? ProjectMonitoringInput { get; set; }

        [Input("resourceQuota")]
        public Input<Inputs.ProjectResourceQuotaArgs>? ResourceQuota { get; set; }

        /// <summary>
        /// Wait for cluster becomes active
        /// </summary>
        [Input("waitForCluster")]
        public Input<bool>? WaitForCluster { get; set; }

        public ProjectArgs()
        {
        }
    }

    public sealed class ProjectState : Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations of the resource
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("containerResourceLimit")]
        public Input<Inputs.ProjectContainerResourceLimitGetArgs>? ContainerResourceLimit { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable built-in project monitoring
        /// </summary>
        [Input("enableProjectMonitoring")]
        public Input<bool>? EnableProjectMonitoring { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels of the resource
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("podSecurityPolicyTemplateId")]
        public Input<string>? PodSecurityPolicyTemplateId { get; set; }

        /// <summary>
        /// Cluster monitoring configuration
        /// </summary>
        [Input("projectMonitoringInput")]
        public Input<Inputs.ProjectProjectMonitoringInputGetArgs>? ProjectMonitoringInput { get; set; }

        [Input("resourceQuota")]
        public Input<Inputs.ProjectResourceQuotaGetArgs>? ResourceQuota { get; set; }

        /// <summary>
        /// Wait for cluster becomes active
        /// </summary>
        [Input("waitForCluster")]
        public Input<bool>? WaitForCluster { get; set; }

        public ProjectState()
        {
        }
    }
}
