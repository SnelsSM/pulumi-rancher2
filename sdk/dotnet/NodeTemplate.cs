// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    public partial class NodeTemplate : Pulumi.CustomResource
    {
        [Output("amazonec2Config")]
        public Output<Outputs.NodeTemplateAmazonec2Config?> Amazonec2Config { get; private set; } = null!;

        /// <summary>
        /// Annotations of the resource
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, object>> Annotations { get; private set; } = null!;

        [Output("authCertificateAuthority")]
        public Output<string?> AuthCertificateAuthority { get; private set; } = null!;

        [Output("authKey")]
        public Output<string?> AuthKey { get; private set; } = null!;

        [Output("azureConfig")]
        public Output<Outputs.NodeTemplateAzureConfig?> AzureConfig { get; private set; } = null!;

        [Output("cloudCredentialId")]
        public Output<string?> CloudCredentialId { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("digitaloceanConfig")]
        public Output<Outputs.NodeTemplateDigitaloceanConfig?> DigitaloceanConfig { get; private set; } = null!;

        [Output("driver")]
        public Output<string> Driver { get; private set; } = null!;

        [Output("driverId")]
        public Output<string> DriverId { get; private set; } = null!;

        [Output("engineEnv")]
        public Output<ImmutableDictionary<string, object>?> EngineEnv { get; private set; } = null!;

        [Output("engineInsecureRegistries")]
        public Output<ImmutableArray<string>> EngineInsecureRegistries { get; private set; } = null!;

        [Output("engineInstallUrl")]
        public Output<string?> EngineInstallUrl { get; private set; } = null!;

        [Output("engineLabel")]
        public Output<ImmutableDictionary<string, object>?> EngineLabel { get; private set; } = null!;

        [Output("engineOpt")]
        public Output<ImmutableDictionary<string, object>?> EngineOpt { get; private set; } = null!;

        [Output("engineRegistryMirrors")]
        public Output<ImmutableArray<string>> EngineRegistryMirrors { get; private set; } = null!;

        [Output("engineStorageDriver")]
        public Output<string?> EngineStorageDriver { get; private set; } = null!;

        /// <summary>
        /// Labels of the resource
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, object>> Labels { get; private set; } = null!;

        [Output("linodeConfig")]
        public Output<Outputs.NodeTemplateLinodeConfig?> LinodeConfig { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("opennebulaConfig")]
        public Output<Outputs.NodeTemplateOpennebulaConfig?> OpennebulaConfig { get; private set; } = null!;

        [Output("openstackConfig")]
        public Output<Outputs.NodeTemplateOpenstackConfig?> OpenstackConfig { get; private set; } = null!;

        [Output("useInternalIpAddress")]
        public Output<bool?> UseInternalIpAddress { get; private set; } = null!;

        [Output("vsphereConfig")]
        public Output<Outputs.NodeTemplateVsphereConfig?> VsphereConfig { get; private set; } = null!;


        /// <summary>
        /// Create a NodeTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NodeTemplate(string name, NodeTemplateArgs? args = null, CustomResourceOptions? options = null)
            : base("rancher2:index/nodeTemplate:NodeTemplate", name, args ?? new NodeTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NodeTemplate(string name, Input<string> id, NodeTemplateState? state = null, CustomResourceOptions? options = null)
            : base("rancher2:index/nodeTemplate:NodeTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NodeTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NodeTemplate Get(string name, Input<string> id, NodeTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new NodeTemplate(name, id, state, options);
        }
    }

    public sealed class NodeTemplateArgs : Pulumi.ResourceArgs
    {
        [Input("amazonec2Config")]
        public Input<Inputs.NodeTemplateAmazonec2ConfigArgs>? Amazonec2Config { get; set; }

        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations of the resource
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        [Input("authCertificateAuthority")]
        public Input<string>? AuthCertificateAuthority { get; set; }

        [Input("authKey")]
        public Input<string>? AuthKey { get; set; }

        [Input("azureConfig")]
        public Input<Inputs.NodeTemplateAzureConfigArgs>? AzureConfig { get; set; }

        [Input("cloudCredentialId")]
        public Input<string>? CloudCredentialId { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("digitaloceanConfig")]
        public Input<Inputs.NodeTemplateDigitaloceanConfigArgs>? DigitaloceanConfig { get; set; }

        [Input("driverId")]
        public Input<string>? DriverId { get; set; }

        [Input("engineEnv")]
        private InputMap<object>? _engineEnv;
        public InputMap<object> EngineEnv
        {
            get => _engineEnv ?? (_engineEnv = new InputMap<object>());
            set => _engineEnv = value;
        }

        [Input("engineInsecureRegistries")]
        private InputList<string>? _engineInsecureRegistries;
        public InputList<string> EngineInsecureRegistries
        {
            get => _engineInsecureRegistries ?? (_engineInsecureRegistries = new InputList<string>());
            set => _engineInsecureRegistries = value;
        }

        [Input("engineInstallUrl")]
        public Input<string>? EngineInstallUrl { get; set; }

        [Input("engineLabel")]
        private InputMap<object>? _engineLabel;
        public InputMap<object> EngineLabel
        {
            get => _engineLabel ?? (_engineLabel = new InputMap<object>());
            set => _engineLabel = value;
        }

        [Input("engineOpt")]
        private InputMap<object>? _engineOpt;
        public InputMap<object> EngineOpt
        {
            get => _engineOpt ?? (_engineOpt = new InputMap<object>());
            set => _engineOpt = value;
        }

        [Input("engineRegistryMirrors")]
        private InputList<string>? _engineRegistryMirrors;
        public InputList<string> EngineRegistryMirrors
        {
            get => _engineRegistryMirrors ?? (_engineRegistryMirrors = new InputList<string>());
            set => _engineRegistryMirrors = value;
        }

        [Input("engineStorageDriver")]
        public Input<string>? EngineStorageDriver { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels of the resource
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        [Input("linodeConfig")]
        public Input<Inputs.NodeTemplateLinodeConfigArgs>? LinodeConfig { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("opennebulaConfig")]
        public Input<Inputs.NodeTemplateOpennebulaConfigArgs>? OpennebulaConfig { get; set; }

        [Input("openstackConfig")]
        public Input<Inputs.NodeTemplateOpenstackConfigArgs>? OpenstackConfig { get; set; }

        [Input("useInternalIpAddress")]
        public Input<bool>? UseInternalIpAddress { get; set; }

        [Input("vsphereConfig")]
        public Input<Inputs.NodeTemplateVsphereConfigArgs>? VsphereConfig { get; set; }

        public NodeTemplateArgs()
        {
        }
    }

    public sealed class NodeTemplateState : Pulumi.ResourceArgs
    {
        [Input("amazonec2Config")]
        public Input<Inputs.NodeTemplateAmazonec2ConfigGetArgs>? Amazonec2Config { get; set; }

        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations of the resource
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        [Input("authCertificateAuthority")]
        public Input<string>? AuthCertificateAuthority { get; set; }

        [Input("authKey")]
        public Input<string>? AuthKey { get; set; }

        [Input("azureConfig")]
        public Input<Inputs.NodeTemplateAzureConfigGetArgs>? AzureConfig { get; set; }

        [Input("cloudCredentialId")]
        public Input<string>? CloudCredentialId { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("digitaloceanConfig")]
        public Input<Inputs.NodeTemplateDigitaloceanConfigGetArgs>? DigitaloceanConfig { get; set; }

        [Input("driver")]
        public Input<string>? Driver { get; set; }

        [Input("driverId")]
        public Input<string>? DriverId { get; set; }

        [Input("engineEnv")]
        private InputMap<object>? _engineEnv;
        public InputMap<object> EngineEnv
        {
            get => _engineEnv ?? (_engineEnv = new InputMap<object>());
            set => _engineEnv = value;
        }

        [Input("engineInsecureRegistries")]
        private InputList<string>? _engineInsecureRegistries;
        public InputList<string> EngineInsecureRegistries
        {
            get => _engineInsecureRegistries ?? (_engineInsecureRegistries = new InputList<string>());
            set => _engineInsecureRegistries = value;
        }

        [Input("engineInstallUrl")]
        public Input<string>? EngineInstallUrl { get; set; }

        [Input("engineLabel")]
        private InputMap<object>? _engineLabel;
        public InputMap<object> EngineLabel
        {
            get => _engineLabel ?? (_engineLabel = new InputMap<object>());
            set => _engineLabel = value;
        }

        [Input("engineOpt")]
        private InputMap<object>? _engineOpt;
        public InputMap<object> EngineOpt
        {
            get => _engineOpt ?? (_engineOpt = new InputMap<object>());
            set => _engineOpt = value;
        }

        [Input("engineRegistryMirrors")]
        private InputList<string>? _engineRegistryMirrors;
        public InputList<string> EngineRegistryMirrors
        {
            get => _engineRegistryMirrors ?? (_engineRegistryMirrors = new InputList<string>());
            set => _engineRegistryMirrors = value;
        }

        [Input("engineStorageDriver")]
        public Input<string>? EngineStorageDriver { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels of the resource
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        [Input("linodeConfig")]
        public Input<Inputs.NodeTemplateLinodeConfigGetArgs>? LinodeConfig { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("opennebulaConfig")]
        public Input<Inputs.NodeTemplateOpennebulaConfigGetArgs>? OpennebulaConfig { get; set; }

        [Input("openstackConfig")]
        public Input<Inputs.NodeTemplateOpenstackConfigGetArgs>? OpenstackConfig { get; set; }

        [Input("useInternalIpAddress")]
        public Input<bool>? UseInternalIpAddress { get; set; }

        [Input("vsphereConfig")]
        public Input<Inputs.NodeTemplateVsphereConfigGetArgs>? VsphereConfig { get; set; }

        public NodeTemplateState()
        {
        }
    }
}
