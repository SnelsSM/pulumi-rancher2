// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2.Outputs
{

    [OutputType]
    public sealed class ClusterAksConfigV2
    {
        /// <summary>
        /// Different authentication API url to use. Default `https://login.microsoftonline.com/` (string)
        /// </summary>
        public readonly string? AuthBaseUrl;
        /// <summary>
        /// The AKS authorized ip ranges (list)
        /// </summary>
        public readonly ImmutableArray<string> AuthorizedIpRanges;
        /// <summary>
        /// Different resource management API url to use. Default `https://management.azure.com/` (string)
        /// </summary>
        public readonly string? BaseUrl;
        /// <summary>
        /// The AKS Cloud Credential ID to use (string)
        /// </summary>
        public readonly string CloudCredentialId;
        /// <summary>
        /// The AKS dns prefix. Required if `imported=false` (string)
        /// </summary>
        public readonly string? DnsPrefix;
        /// <summary>
        /// Enable AKS http application routing? (bool)
        /// </summary>
        public readonly bool? HttpApplicationRouting;
        /// <summary>
        /// Is AKS cluster imported? Defaul: `false` (bool)
        /// </summary>
        public readonly bool? Imported;
        /// <summary>
        /// K8s version to deploy. Default: `Rancher default` (string) (Note - if rke_config is set at cluster_template, kubernetes_version must be set to the active cluster version so Rancher can clone the RKE template)
        /// </summary>
        public readonly string? KubernetesVersion;
        /// <summary>
        /// The AKS linux admin username (string)
        /// </summary>
        public readonly string? LinuxAdminUsername;
        /// <summary>
        /// The AKS linux ssh public key (string)
        /// </summary>
        public readonly string? LinuxSshPublicKey;
        /// <summary>
        /// Allowed values: `basic` (default) `standard` (string)
        /// </summary>
        public readonly string? LoadBalancerSku;
        /// <summary>
        /// The AKS log analytics workspace group (string)
        /// </summary>
        public readonly string? LogAnalyticsWorkspaceGroup;
        /// <summary>
        /// The AKS log analytics workspace name (string)
        /// </summary>
        public readonly string? LogAnalyticsWorkspaceName;
        /// <summary>
        /// Kubernetes cluster monitoring (list maxitems:1)
        /// </summary>
        public readonly bool? Monitoring;
        /// <summary>
        /// The name of the Cluster (string)
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The AKS network dns service ip (string)
        /// </summary>
        public readonly string? NetworkDnsServiceIp;
        /// <summary>
        /// The AKS network docker bridge cidr (string)
        /// </summary>
        public readonly string? NetworkDockerBridgeCidr;
        /// <summary>
        /// Network plugin used for building Kubernetes network. Chooses from `azure` or `kubenet`. Default `azure` (string)
        /// </summary>
        public readonly string? NetworkPlugin;
        /// <summary>
        /// The AKS network pod cidr (string)
        /// </summary>
        public readonly string? NetworkPodCidr;
        /// <summary>
        /// Network policy used for building Kubernetes network. Chooses from `calico` (string)
        /// </summary>
        public readonly string? NetworkPolicy;
        /// <summary>
        /// The AKS network service cidr (string)
        /// </summary>
        public readonly string? NetworkServiceCidr;
        /// <summary>
        /// The AKS nnode pools. Required if `imported=false` (list)
        /// </summary>
        public readonly ImmutableArray<Outputs.ClusterAksConfigV2NodePool> NodePools;
        /// <summary>
        /// Is AKS cluster private? (bool)
        /// </summary>
        public readonly bool? PrivateCluster;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string ResourceGroup;
        /// <summary>
        /// The AKS resource location (string)
        /// </summary>
        public readonly string ResourceLocation;
        /// <summary>
        /// The name of an existing Azure Virtual Subnet. Composite of agent virtual network subnet ID (string)
        /// </summary>
        public readonly string? Subnet;
        /// <summary>
        /// Tags for Kubernetes cluster. For example, `["foo=bar","bar=foo"]` (list)
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Tags;
        /// <summary>
        /// The name of an existing Azure Virtual Network. Composite of agent virtual network subnet ID (string)
        /// </summary>
        public readonly string? VirtualNetwork;
        /// <summary>
        /// The resource group of an existing Azure Virtual Network. Composite of agent virtual network subnet ID (string)
        /// </summary>
        public readonly string? VirtualNetworkResourceGroup;

        [OutputConstructor]
        private ClusterAksConfigV2(
            string? authBaseUrl,

            ImmutableArray<string> authorizedIpRanges,

            string? baseUrl,

            string cloudCredentialId,

            string? dnsPrefix,

            bool? httpApplicationRouting,

            bool? imported,

            string? kubernetesVersion,

            string? linuxAdminUsername,

            string? linuxSshPublicKey,

            string? loadBalancerSku,

            string? logAnalyticsWorkspaceGroup,

            string? logAnalyticsWorkspaceName,

            bool? monitoring,

            string? name,

            string? networkDnsServiceIp,

            string? networkDockerBridgeCidr,

            string? networkPlugin,

            string? networkPodCidr,

            string? networkPolicy,

            string? networkServiceCidr,

            ImmutableArray<Outputs.ClusterAksConfigV2NodePool> nodePools,

            bool? privateCluster,

            string resourceGroup,

            string resourceLocation,

            string? subnet,

            ImmutableDictionary<string, object>? tags,

            string? virtualNetwork,

            string? virtualNetworkResourceGroup)
        {
            AuthBaseUrl = authBaseUrl;
            AuthorizedIpRanges = authorizedIpRanges;
            BaseUrl = baseUrl;
            CloudCredentialId = cloudCredentialId;
            DnsPrefix = dnsPrefix;
            HttpApplicationRouting = httpApplicationRouting;
            Imported = imported;
            KubernetesVersion = kubernetesVersion;
            LinuxAdminUsername = linuxAdminUsername;
            LinuxSshPublicKey = linuxSshPublicKey;
            LoadBalancerSku = loadBalancerSku;
            LogAnalyticsWorkspaceGroup = logAnalyticsWorkspaceGroup;
            LogAnalyticsWorkspaceName = logAnalyticsWorkspaceName;
            Monitoring = monitoring;
            Name = name;
            NetworkDnsServiceIp = networkDnsServiceIp;
            NetworkDockerBridgeCidr = networkDockerBridgeCidr;
            NetworkPlugin = networkPlugin;
            NetworkPodCidr = networkPodCidr;
            NetworkPolicy = networkPolicy;
            NetworkServiceCidr = networkServiceCidr;
            NodePools = nodePools;
            PrivateCluster = privateCluster;
            ResourceGroup = resourceGroup;
            ResourceLocation = resourceLocation;
            Subnet = subnet;
            Tags = tags;
            VirtualNetwork = virtualNetwork;
            VirtualNetworkResourceGroup = virtualNetworkResourceGroup;
        }
    }
}
