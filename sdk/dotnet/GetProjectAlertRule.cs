// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    public static class GetProjectAlertRule
    {
        public static Task<GetProjectAlertRuleResult> InvokeAsync(GetProjectAlertRuleArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetProjectAlertRuleResult>("rancher2:index/getProjectAlertRule:getProjectAlertRule", args ?? new GetProjectAlertRuleArgs(), options.WithVersion());
    }


    public sealed class GetProjectAlertRuleArgs : Pulumi.InvokeArgs
    {
        [Input("labels")]
        private Dictionary<string, object>? _labels;
        public Dictionary<string, object> Labels
        {
            get => _labels ?? (_labels = new Dictionary<string, object>());
            set => _labels = value;
        }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetProjectAlertRuleArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetProjectAlertRuleResult
    {
        public readonly ImmutableDictionary<string, object> Annotations;
        public readonly string GroupId;
        public readonly int GroupIntervalSeconds;
        public readonly int GroupWaitSeconds;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool Inherited;
        public readonly ImmutableDictionary<string, object>? Labels;
        public readonly Outputs.GetProjectAlertRuleMetricRuleResult MetricRule;
        public readonly string Name;
        public readonly Outputs.GetProjectAlertRulePodRuleResult PodRule;
        public readonly string ProjectId;
        public readonly int RepeatIntervalSeconds;
        public readonly string Severity;
        public readonly Outputs.GetProjectAlertRuleWorkloadRuleResult WorkloadRule;

        [OutputConstructor]
        private GetProjectAlertRuleResult(
            ImmutableDictionary<string, object> annotations,

            string groupId,

            int groupIntervalSeconds,

            int groupWaitSeconds,

            string id,

            bool inherited,

            ImmutableDictionary<string, object>? labels,

            Outputs.GetProjectAlertRuleMetricRuleResult metricRule,

            string name,

            Outputs.GetProjectAlertRulePodRuleResult podRule,

            string projectId,

            int repeatIntervalSeconds,

            string severity,

            Outputs.GetProjectAlertRuleWorkloadRuleResult workloadRule)
        {
            Annotations = annotations;
            GroupId = groupId;
            GroupIntervalSeconds = groupIntervalSeconds;
            GroupWaitSeconds = groupWaitSeconds;
            Id = id;
            Inherited = inherited;
            Labels = labels;
            MetricRule = metricRule;
            Name = name;
            PodRule = podRule;
            ProjectId = projectId;
            RepeatIntervalSeconds = repeatIntervalSeconds;
            Severity = severity;
            WorkloadRule = workloadRule;
        }
    }
}
