// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    public partial class NodeDriver : Pulumi.CustomResource
    {
        [Output("active")]
        public Output<bool> Active { get; private set; } = null!;

        /// <summary>
        /// Annotations of the resource
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, object>> Annotations { get; private set; } = null!;

        [Output("builtin")]
        public Output<bool> Builtin { get; private set; } = null!;

        [Output("checksum")]
        public Output<string?> Checksum { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("externalId")]
        public Output<string?> ExternalId { get; private set; } = null!;

        /// <summary>
        /// Labels of the resource
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, object>> Labels { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("uiUrl")]
        public Output<string?> UiUrl { get; private set; } = null!;

        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        [Output("whitelistDomains")]
        public Output<ImmutableArray<string>> WhitelistDomains { get; private set; } = null!;


        /// <summary>
        /// Create a NodeDriver resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NodeDriver(string name, NodeDriverArgs args, CustomResourceOptions? options = null)
            : base("rancher2:index/nodeDriver:NodeDriver", name, args ?? new NodeDriverArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NodeDriver(string name, Input<string> id, NodeDriverState? state = null, CustomResourceOptions? options = null)
            : base("rancher2:index/nodeDriver:NodeDriver", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NodeDriver resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NodeDriver Get(string name, Input<string> id, NodeDriverState? state = null, CustomResourceOptions? options = null)
        {
            return new NodeDriver(name, id, state, options);
        }
    }

    public sealed class NodeDriverArgs : Pulumi.ResourceArgs
    {
        [Input("active", required: true)]
        public Input<bool> Active { get; set; } = null!;

        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations of the resource
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        [Input("builtin", required: true)]
        public Input<bool> Builtin { get; set; } = null!;

        [Input("checksum")]
        public Input<string>? Checksum { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels of the resource
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("uiUrl")]
        public Input<string>? UiUrl { get; set; }

        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        [Input("whitelistDomains")]
        private InputList<string>? _whitelistDomains;
        public InputList<string> WhitelistDomains
        {
            get => _whitelistDomains ?? (_whitelistDomains = new InputList<string>());
            set => _whitelistDomains = value;
        }

        public NodeDriverArgs()
        {
        }
    }

    public sealed class NodeDriverState : Pulumi.ResourceArgs
    {
        [Input("active")]
        public Input<bool>? Active { get; set; }

        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations of the resource
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        [Input("builtin")]
        public Input<bool>? Builtin { get; set; }

        [Input("checksum")]
        public Input<string>? Checksum { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels of the resource
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("uiUrl")]
        public Input<string>? UiUrl { get; set; }

        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("whitelistDomains")]
        private InputList<string>? _whitelistDomains;
        public InputList<string> WhitelistDomains
        {
            get => _whitelistDomains ?? (_whitelistDomains = new InputList<string>());
            set => _whitelistDomains = value;
        }

        public NodeDriverState()
        {
        }
    }
}
