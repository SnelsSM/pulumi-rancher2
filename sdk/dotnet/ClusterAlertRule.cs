// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    public partial class ClusterAlertRule : Pulumi.CustomResource
    {
        /// <summary>
        /// Annotations of the resource
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, object>> Annotations { get; private set; } = null!;

        /// <summary>
        /// Alert rule cluster ID
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Alert event rule
        /// </summary>
        [Output("eventRule")]
        public Output<Outputs.ClusterAlertRuleEventRule?> EventRule { get; private set; } = null!;

        /// <summary>
        /// Alert rule group ID
        /// </summary>
        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;

        /// <summary>
        /// Alert rule interval seconds
        /// </summary>
        [Output("groupIntervalSeconds")]
        public Output<int?> GroupIntervalSeconds { get; private set; } = null!;

        /// <summary>
        /// Alert rule wait seconds
        /// </summary>
        [Output("groupWaitSeconds")]
        public Output<int?> GroupWaitSeconds { get; private set; } = null!;

        /// <summary>
        /// Alert rule inherited
        /// </summary>
        [Output("inherited")]
        public Output<bool?> Inherited { get; private set; } = null!;

        /// <summary>
        /// Labels of the resource
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, object>> Labels { get; private set; } = null!;

        /// <summary>
        /// Alert metric rule
        /// </summary>
        [Output("metricRule")]
        public Output<Outputs.ClusterAlertRuleMetricRule?> MetricRule { get; private set; } = null!;

        /// <summary>
        /// Alert rule name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Alert node rule
        /// </summary>
        [Output("nodeRule")]
        public Output<Outputs.ClusterAlertRuleNodeRule?> NodeRule { get; private set; } = null!;

        /// <summary>
        /// Alert rule repeat interval seconds
        /// </summary>
        [Output("repeatIntervalSeconds")]
        public Output<int?> RepeatIntervalSeconds { get; private set; } = null!;

        /// <summary>
        /// Alert rule severity
        /// </summary>
        [Output("severity")]
        public Output<string?> Severity { get; private set; } = null!;

        /// <summary>
        /// Alert system service rule
        /// </summary>
        [Output("systemServiceRule")]
        public Output<Outputs.ClusterAlertRuleSystemServiceRule?> SystemServiceRule { get; private set; } = null!;


        /// <summary>
        /// Create a ClusterAlertRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ClusterAlertRule(string name, ClusterAlertRuleArgs args, CustomResourceOptions? options = null)
            : base("rancher2:index/clusterAlertRule:ClusterAlertRule", name, args ?? new ClusterAlertRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ClusterAlertRule(string name, Input<string> id, ClusterAlertRuleState? state = null, CustomResourceOptions? options = null)
            : base("rancher2:index/clusterAlertRule:ClusterAlertRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Alias { Type = "rancher2:index/clusterAlterRule:ClusterAlterRule"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ClusterAlertRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ClusterAlertRule Get(string name, Input<string> id, ClusterAlertRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new ClusterAlertRule(name, id, state, options);
        }
    }

    public sealed class ClusterAlertRuleArgs : Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations of the resource
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        /// <summary>
        /// Alert rule cluster ID
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Alert event rule
        /// </summary>
        [Input("eventRule")]
        public Input<Inputs.ClusterAlertRuleEventRuleArgs>? EventRule { get; set; }

        /// <summary>
        /// Alert rule group ID
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        /// <summary>
        /// Alert rule interval seconds
        /// </summary>
        [Input("groupIntervalSeconds")]
        public Input<int>? GroupIntervalSeconds { get; set; }

        /// <summary>
        /// Alert rule wait seconds
        /// </summary>
        [Input("groupWaitSeconds")]
        public Input<int>? GroupWaitSeconds { get; set; }

        /// <summary>
        /// Alert rule inherited
        /// </summary>
        [Input("inherited")]
        public Input<bool>? Inherited { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels of the resource
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// Alert metric rule
        /// </summary>
        [Input("metricRule")]
        public Input<Inputs.ClusterAlertRuleMetricRuleArgs>? MetricRule { get; set; }

        /// <summary>
        /// Alert rule name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Alert node rule
        /// </summary>
        [Input("nodeRule")]
        public Input<Inputs.ClusterAlertRuleNodeRuleArgs>? NodeRule { get; set; }

        /// <summary>
        /// Alert rule repeat interval seconds
        /// </summary>
        [Input("repeatIntervalSeconds")]
        public Input<int>? RepeatIntervalSeconds { get; set; }

        /// <summary>
        /// Alert rule severity
        /// </summary>
        [Input("severity")]
        public Input<string>? Severity { get; set; }

        /// <summary>
        /// Alert system service rule
        /// </summary>
        [Input("systemServiceRule")]
        public Input<Inputs.ClusterAlertRuleSystemServiceRuleArgs>? SystemServiceRule { get; set; }

        public ClusterAlertRuleArgs()
        {
        }
    }

    public sealed class ClusterAlertRuleState : Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations of the resource
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        /// <summary>
        /// Alert rule cluster ID
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Alert event rule
        /// </summary>
        [Input("eventRule")]
        public Input<Inputs.ClusterAlertRuleEventRuleGetArgs>? EventRule { get; set; }

        /// <summary>
        /// Alert rule group ID
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// Alert rule interval seconds
        /// </summary>
        [Input("groupIntervalSeconds")]
        public Input<int>? GroupIntervalSeconds { get; set; }

        /// <summary>
        /// Alert rule wait seconds
        /// </summary>
        [Input("groupWaitSeconds")]
        public Input<int>? GroupWaitSeconds { get; set; }

        /// <summary>
        /// Alert rule inherited
        /// </summary>
        [Input("inherited")]
        public Input<bool>? Inherited { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels of the resource
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// Alert metric rule
        /// </summary>
        [Input("metricRule")]
        public Input<Inputs.ClusterAlertRuleMetricRuleGetArgs>? MetricRule { get; set; }

        /// <summary>
        /// Alert rule name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Alert node rule
        /// </summary>
        [Input("nodeRule")]
        public Input<Inputs.ClusterAlertRuleNodeRuleGetArgs>? NodeRule { get; set; }

        /// <summary>
        /// Alert rule repeat interval seconds
        /// </summary>
        [Input("repeatIntervalSeconds")]
        public Input<int>? RepeatIntervalSeconds { get; set; }

        /// <summary>
        /// Alert rule severity
        /// </summary>
        [Input("severity")]
        public Input<string>? Severity { get; set; }

        /// <summary>
        /// Alert system service rule
        /// </summary>
        [Input("systemServiceRule")]
        public Input<Inputs.ClusterAlertRuleSystemServiceRuleGetArgs>? SystemServiceRule { get; set; }

        public ClusterAlertRuleState()
        {
        }
    }
}
