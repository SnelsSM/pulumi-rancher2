// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    public static class GetClusterAlterRule
    {
        public static Task<GetClusterAlterRuleResult> InvokeAsync(GetClusterAlterRuleArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetClusterAlterRuleResult>("rancher2:index/getClusterAlterRule:getClusterAlterRule", args ?? new GetClusterAlterRuleArgs(), options.WithVersion());
    }


    public sealed class GetClusterAlterRuleArgs : Pulumi.InvokeArgs
    {
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        [Input("labels")]
        private Dictionary<string, object>? _labels;
        public Dictionary<string, object> Labels
        {
            get => _labels ?? (_labels = new Dictionary<string, object>());
            set => _labels = value;
        }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetClusterAlterRuleArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetClusterAlterRuleResult
    {
        public readonly ImmutableDictionary<string, object> Annotations;
        public readonly string ClusterId;
        public readonly Outputs.GetClusterAlterRuleEventRuleResult EventRule;
        public readonly string GroupId;
        public readonly int GroupIntervalSeconds;
        public readonly int GroupWaitSeconds;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool Inherited;
        public readonly ImmutableDictionary<string, object>? Labels;
        public readonly Outputs.GetClusterAlterRuleMetricRuleResult MetricRule;
        public readonly string Name;
        public readonly Outputs.GetClusterAlterRuleNodeRuleResult NodeRule;
        public readonly int RepeatIntervalSeconds;
        public readonly string Severity;
        public readonly Outputs.GetClusterAlterRuleSystemServiceRuleResult SystemServiceRule;

        [OutputConstructor]
        private GetClusterAlterRuleResult(
            ImmutableDictionary<string, object> annotations,

            string clusterId,

            Outputs.GetClusterAlterRuleEventRuleResult eventRule,

            string groupId,

            int groupIntervalSeconds,

            int groupWaitSeconds,

            string id,

            bool inherited,

            ImmutableDictionary<string, object>? labels,

            Outputs.GetClusterAlterRuleMetricRuleResult metricRule,

            string name,

            Outputs.GetClusterAlterRuleNodeRuleResult nodeRule,

            int repeatIntervalSeconds,

            string severity,

            Outputs.GetClusterAlterRuleSystemServiceRuleResult systemServiceRule)
        {
            Annotations = annotations;
            ClusterId = clusterId;
            EventRule = eventRule;
            GroupId = groupId;
            GroupIntervalSeconds = groupIntervalSeconds;
            GroupWaitSeconds = groupWaitSeconds;
            Id = id;
            Inherited = inherited;
            Labels = labels;
            MetricRule = metricRule;
            Name = name;
            NodeRule = nodeRule;
            RepeatIntervalSeconds = repeatIntervalSeconds;
            Severity = severity;
            SystemServiceRule = systemServiceRule;
        }
    }
}
